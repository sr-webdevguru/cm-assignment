'use strict';

angular.module('app', [
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ui.router',
    'ui.bootstrap',
    'mgcrea.ngStrap',
    'angular-loading-bar',
    'checklist-model',
    'ngIdle',
    'ngCsv',
    'pascalprecht.translate',
    'googlechart',
    'angular-growl',
    "leaflet-directive",
    'cfp.hotkeys',
    'schemaForm',
    'schemaForm-file-upload',
    //'restangular',
    'ngIntercom',
    'ui.bootstrap.datetimepicker',
    'number-input',

    'app.services'
])
    .constant('OAUTH', {
        CLIENT_ID: 'ZnojInHgal74Jx36phDURgtLWBBONF5JXBa2hWG4',
        CLIENT_SECRET: 'GxZ05xIV5bzAc99vO5lIscfUmsKIvv5TDzeZc9VpijncAHn2Car8nOSGdYENLwje278EsgQtC3YVvgReRCSMbId8BhwUM2j66ps3rlUUXNmDDfeyOfwygIBpHjZVIwah'
    })
    .factory('CONFIG', ["$location", function ($location) {
        var mapping = {
            'app.medic52.local': 'api.medic52.local',
            'app-dev.medic52.com': 'api-dev-us.medic52.com',
            'app-dev-us.medic52.com': 'api-dev-us.medic52.com',
            'app-staging.medic52.com': 'api-staging-us.medic52.com',
            'app.medic52.com': 'api-us.medic52.com',
            'localhost': 'localhost:8090'
        };
        var laravelMapping = {
            'api.medic52.local': 'api.medic52.local',
            'api-dev.medic52.com': 'api-dev-us.medic52.com',
            'api-dev-us.medic52.com': 'api-dev-us.medic52.com',
            'api-staging.medic52.com': 'api-staging-us.medic52.com',
            'api.medic52.com': 'api-us.medic52.com',
            'localhost': 'localhost:8090'
        };

        var host = $location.host();
//        var subdomain = host.split('.')[0];
//        host = host.replace(subdomain, mapping[subdomain]);

        return {
            BASE_URL: $location.protocol() + "://" + mapping[host], //        BASE_URL: 'https://api-dev-us.medic52.com',
            API_URL: '/api/v3',
            LARAVEL_URL: $location.protocol() + "://" + laravelMapping[host]
        }
    }])
//    .factory('INTERCOM_APPID', function ($location) {
//        var mapping = {
//            'app.medic52.local': 'y5rk20en',
//            'app-dev.medic52.com': 'y5rk20en',
//            'app-staging.medic52.com': 'y5rk20en',
//            'app.medic52.com': 'cxj57moj'
//
//        };
//
//        var host = $location.host();
//        return mapping[host];
//    })
    .factory('authHttpResponseInterceptor', ["$q", "$location", "$log", "$injector", function ($q, $location, $log, $injector) {
        return {
            request: function (config) {
                var LS = $injector.get('LS');
                var ApiService = $injector.get('ApiService');
                var authorization = LS.get('Authorization');
                var token = LS.get('token');
                
                var getURL = config.url;
                if (getURL.includes('s3.amazonaws.com')){
                    console.log('S3 call no auth header required');
                }else{
                    if (authorization != null) {
                        config.headers['Authorization'] = authorization;
                    }

                    if (token != null) {
                        config.headers['token'] = token;
                    }
                }

                return config;
            },
            responseError: function (rejection) {

                var ApiService = $injector.get('ApiService');

                if (rejection.status === 401) {

                    if (rejection.hasOwnProperty('data') && rejection.data.hasOwnProperty('detail') && (rejection.data.detail.indexOf("token_has_expired") != -1 || rejection.data.detail.indexOf("no_access_token_provided") != -1)) {
                        $log.log("Refresh Token ", rejection);

                        var LS = $injector.get('LS');
                        var $http = $injector.get('$http');
                        var OAUTH = $injector.get('OAUTH');

                        var deferred = $q.defer();

                        var auth = {
                            'grant_type': 'client_credentials',
                            'client_id': OAUTH.CLIENT_ID,
                            'client_secret': OAUTH.CLIENT_SECRET
                        };

                        //recover token and create a new session
                        $http({
                            method: 'POST',
                            url: ApiService.base() + '/oauth/access_token/',
                            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                            transformRequest: function (obj) {
                                var str = [];
                                for (var p in obj)
                                    str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                                return str.join("&");
                            },
                            data: auth
                        })
                            .success(function (data, status, headers) {
                                LS.set('Authorization', data.token_type + ' ' + data.access_token);
                                rejection.config.headers['Authorization'] = data.token_type + ' ' + data.access_token;
                                deferred.resolve(data);
                            })
                            .error(function (data, status, headers, config, errors) {
                                deferred.reject(data);
                            });


                        // When the session recovered, make the same backend call again and chain the request
                        return deferred.promise.then(function () {
                            return $http(rejection.config);
                        });

                    } else {
                        $log.log("401: ", rejection.data.detail);
                        $location.path('/login')
                    }

                }
                return $q.reject(rejection);
            }
        }
    }])
    .config(["$intercomProvider", function ($intercomProvider) {
        var mapping = {
            'app.medic52.local': 'y5rk20en',
            'app-dev.medic52.com': 'y5rk20en',
            'app-staging.medic52.com': 'y5rk20en',
            'app.medic52.com': 'cxj57moj',
            'localhost:8095': 'y5rk20en'
        };

        var host = window.location.host;
        var INTERCOM_APPID = mapping[host];


        // Either include your app_id here or later on boot
        $intercomProvider.appID(INTERCOM_APPID);

        // you can include the Intercom's script yourself or use the built in async loading feature
        $intercomProvider.asyncLoading(true);
    }])
    .config(["IdleProvider", "KeepaliveProvider", function (IdleProvider, KeepaliveProvider) {

        // configure IdleProvider settings
        IdleProvider.idle(1800); // in seconds
        IdleProvider.timeout(120); // in seconds

//            KeepaliveProvider.interval(2); // in seconds
    }])
    .config(['growlProvider', function (growlProvider) {
        growlProvider.globalTimeToLive({success: 4000, error: 6000, warning: 6000, info: 4000});
        growlProvider.globalPosition('top-center');
        growlProvider.globalDisableCountDown(true);
    }])
    .config(["$httpProvider", function ($httpProvider) {
        $httpProvider.interceptors.push('authHttpResponseInterceptor');

        //RestangularProvider.setBaseUrl("/api/v3");

        $httpProvider.defaults.useXDomain = true;
        delete $httpProvider.defaults.headers.common['X-Requested-With'];
        $httpProvider.defaults.xsrfCookieName = 'csrftoken';
        $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';

        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }
        //disable IE ajax request caching
        //$httpProvider.defaults.headers.get['If-Modified-Since'] = '0';
    }])
    .config(["$interpolateProvider", "$compileProvider", function ($interpolateProvider, $compileProvider) {
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');

        $compileProvider.imgSrcSanitizationWhitelist(/^\s*(http|https|blob|data):/);
    }])
    .config(["$translateProvider", function ($translateProvider) {
        $translateProvider.useLoader('langLoader', {});
        $translateProvider.preferredLanguage('en_US');
    }])
    .config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function ($stateProvider, $urlRouterProvider, $locationProvider) {

        var currentUser = function (UserService) {
            return UserService.currentUser();
        };
        currentUser.$inject = ["UserService"];

        var questions = function (QuestionService) {
            return QuestionService.fetch();
        };

        var assetTypes = function (AssetTypeService) {
            return AssetTypeService.fetchAll();
        };

        var areas = function (AreaService) {
            return AreaService.fetchAll(10000, 1);
        };

        var locations = function (LocationService) {
            return LocationService.fetchAll(10000, 1);
        };
        locations.$inject = ["LocationService"];

        var controlledSubstances = function (ControlledSubstanceService) {
            return ControlledSubstanceService.fetchAll(10000, 1);
        };
        controlledSubstances.$inject = ["ControlledSubstanceService"];

        var incidentStatus = function(IncidentService){
            return IncidentService.getStatuses();
        };

        // TODO : Handle this when multiple resort scenario is handled
        var resortSettings = function(ResortService, currentUser) {
            return ResortService.fetchSettings(currentUser.resorts[0].resort_id);
        };

//        // Global router
        $urlRouterProvider
            .otherwise('/map');

        // Without # in URL
        //$locationProvider.html5Mode(true);

        // Views
        var login = {
            templateUrl: '/app/auth/templates/login.html',
            controller: 'AuthCtrl'
        };

        var password_forgot = {
            templateUrl: '/app/auth/templates/password/forgot.html',
            controller: 'AuthCtrl',
            resolve: {currentUser: currentUser}
        };


        var password_reset = {
            templateUrl: '/app/auth/templates/password/reset.html',
            controller: 'AuthCtrl',
            resolve: {currentUser: currentUser}
        };

        var header = {
            templateUrl: '/app/base/templates/header.html',
            controller: 'HeaderCtrl',
            resolve: {currentUser: currentUser}
        };

        var user_list = {
            templateUrl: '/app/users/templates/index.html',
            controller: 'UserListCtrl',
            resolve: {currentUser: currentUser}
//            resolve: { allUsers: allUsers }
        };

        var user_edit = {
            templateUrl: '/app/users/templates/edit.html',
            controller: 'UserEditCtrl',
            resolve: {currentUser: currentUser}
        };

        var user_add = {
            templateUrl: '/app/users/templates/add.html',
            controller: 'UserAddCtrl',
            resolve: {currentUser: currentUser}
        };

        var resort_settings = {
            templateUrl: '/app/resorts/templates/settings.html',
            controller: 'ResortSettingsCtrl',
            resolve: {
                questions: questions,
                currentUser: currentUser
            }
        };

        var incidents = {
            templateUrl: '/app/incidents/templates/index.html',
            controller: 'IncidentCtrl',
            resolve: {
                currentUser: currentUser,
                questions: questions
            }
        };

        var incident_edit = {
            templateUrl: '/app/incidents/templates/edit.html',
            controller: 'IncidentUpdateCtrl',
            resolve: {
                questions: questions,
                currentUser: currentUser
            }
        };

        var dashboard = {
            templateUrl: '/app/analytics/templates/dashboard.html',
            controller: 'DashboardCtrl',
            resolve: {currentUser: currentUser}
        };

        var patrollers_report = {
            templateUrl: '/app/analytics/templates/patrollers_report.html',
            controller: 'PatrollersReportCtrl',
            resolve: {
                currentUser: currentUser,
                locations: locations
            }
        };

        var reporting = {
            templateUrl: '/app/analytics/templates/report.html',
            controller: 'ReportCtrl',
            resolve: {
                currentUser: currentUser,
                questions: questions
            }
        };

        var chart = {
            templateUrl: '/app/analytics/templates/chart.html',
            controller: 'ChartCtrl',
            resolve: {
                currentUser: currentUser,
                questions: questions
            }
        };

        var case_status = {
            templateUrl: '/app/analytics/templates/case_status.html',
            controller: 'CaseStatusCtrl',
            resolve: {
                currentUser: currentUser,
                incidentStatus: incidentStatus
            }
        };

        var geomap = {
            templateUrl: '/app/map/templates/map.html',
            controller: 'MapCtrl',
            resolve: {
                currentUser: currentUser,
                questions: questions,
                settings: resortSettings
            }
        };

        var heatmap = {
            templateUrl: '/app/map/templates/heatmap.html',
            controller: 'HeatmapCtrl',
            resolve: {
                currentUser: currentUser,
                settings: resortSettings
            }
        };

        var area_list = {
            templateUrl: '/app/areas/templates/index.html',
            controller: 'AreaListCtrl',
            resolve: {currentUser: currentUser}
        };

        var area_edit = {
            templateUrl: '/app/areas/templates/edit.html',
            controller: 'AreaEditCtrl',
            resolve: {currentUser: currentUser}
        };

        var area_add = {
            templateUrl: '/app/areas/templates/add.html',
            controller: 'AreaAddCtrl',
            resolve: {currentUser: currentUser}
        };

        var location_list = {
            templateUrl: '/app/locations/templates/index.html',
            controller: 'LocationListCtrl',
            resolve: {currentUser: currentUser}
        };

        var location_edit = {
            templateUrl: '/app/locations/templates/edit.html',
            controller: 'LocationEditCtrl',
            resolve: {currentUser: currentUser}
        };

        var location_add = {
            templateUrl: '/app/locations/templates/add.html',
            controller: 'LocationAddCtrl',
            resolve: {currentUser: currentUser}
        };

        var controlled_substances_list = {
            templateUrl: '/app/controlled_substances/templates/index.html',
            controller: 'ControlledSubstanceListCtrl',
            resolve: {currentUser: currentUser}
        };

        var controlled_substance_edit = {
            templateUrl: '/app/controlled_substances/templates/edit.html',
            controller: 'ControlledSubstanceEditCtrl',
            resolve: {currentUser: currentUser}
        };

        var controlled_substance_add = {
            templateUrl: '/app/controlled_substances/templates/add.html',
            controller: 'ControlledSubstanceAddCtrl',
            resolve: {currentUser: currentUser}
        };

        var asset_list = {
            templateUrl: '/app/assets/templates/index.html',
            controller: 'AssetListCtrl',
            resolve: {
                currentUser: currentUser,
                assetTypes: assetTypes
            }
        };

        var asset_edit = {
            templateUrl: '/app/assets/templates/edit.html',
            controller: 'AssetEditCtrl',
            resolve: {
                currentUser: currentUser,
                assetTypes: assetTypes,
                areas: areas,
                locations: locations
            }
        };

        var asset_add = {
            templateUrl: '/app/assets/templates/add.html',
            controller: 'AssetAddCtrl',
            resolve: {
                currentUser: currentUser,
                assetTypes: assetTypes,
                areas: areas,
                locations: locations
            }
        };

        var stock_add = {
            templateUrl: '/app/stocks/templates/add.html',
            controller: 'StockAddCtrl',
            resolve: {
                currentUser: currentUser,
                locations: locations,
                controlledSubstances:controlledSubstances
            }
        };

        var stock_checkout = {
            templateUrl: '/app/stocks/templates/checkout.html',
            controller: 'StockCheckoutCtrl',
            resolve: {
                currentUser: currentUser,
                locations: locations,
                controlledSubstances:controlledSubstances,
                questions: questions,
            }
        };

        var stock_report = {
            templateUrl: '/app/stocks/templates/report.html',
            controller: 'StockReportCtrl',
            resolve: {
                currentUser: currentUser,
                locations: locations,
                controlledSubstances:controlledSubstances
            }
        };

        var audit_log = {
            templateUrl: '/app/audit_log/templates/index.html',
            controller: 'AuditLogListCtrl',
            resolve: {currentUser: currentUser}
        };

        // States
        $stateProvider
            .state('login', {
                url: '/login',
                views: {
                    'content': login
                },
                authenticate: false
            })
            .state('password_forgot', {
                url: '/password/forgot',
                views: {
                    'content': password_forgot

                },
                authenticate: false
            })
            .state('password_reset', {
                url: '/password/reset',
                views: {
                    'content': password_reset
                },
                authenticate: false
            })
            .state('users', {
                url: '/users',
                views: {
                    'header': header,
                    'content': user_list

                },
                authenticate: true,
                allowedRoles: ['Manager']
            })
            .state('user_edit', {
                url: '/users/{userId:[0-9A-Za-z-]+}/edit',
                views: {
                    'header': header,
                    'content': user_edit

                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher']
            })

            .state('user_add', {
                url: '/users/add',
                views: {
                    'header': header,
                    'content': user_add

                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Manager']
            })

            .state('resort_settings', {
                url: '/resorts/{resortId:[0-9A-Za-z-]+}/settings',
                views: {
                    'header': header,
                    'content': resort_settings

                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Manager']
            })

            .state('incidents', {
                url: '/incidents',
                views: {
                    'header': header,
                    'content': incidents

                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher']
            })

            .state('incident_edit', {
                url: '/incidents/{incidentId:[0-9A-Za-z-]+}/edit',
                views: {
                    'header': header,
                    'content': incident_edit
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher']
            })

            .state('reporting', {
                url: '/reporting',
                views: {
                    'header': header,
                    'content': reporting

                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

            .state('report_edit', {
                url: '/reporting/{reportId:[0-9A-Za-z-]+}/',
                views: {
                    'header': header,
                    'content': reporting

                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

            .state('charts', {
                url: '/charts',
                views: {
                    'header': header,
                    'content': chart

                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

            .state('case-status', {
                url: '/case-status',
                views: {
                    'header': header,
                    'content': case_status

                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

            .state('chart_edit', {
                url: '/charts/{reportId:[0-9A-Za-z-]+}/',
                views: {
                    'header': header,
                    'content': chart

                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

            .state('map', {
                url: '/map',
                views: {
                    'header': header,
                    'content': geomap
                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

            .state('heatmap', {
                url: '/heatmap',
                views: {
                    'header': header,
                    'content': heatmap

                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })
            .state('areas', {
                url: '/areas',
                views: {
                    'header': header,
                    'content': area_list

                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })
            .state('area_edit', {
                url: '/areas/{areaId:[0-9A-Za-z-]+}/edit',
                views: {
                    'header': header,
                    'content': area_edit

                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('area_add', {
                url: '/areas/add',
                views: {
                    'header': header,
                    'content': area_add
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('locations', {
                url: '/locations?areaId',
                views: {
                    'header': header,
                    'content': location_list
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })
            .state('location_edit', {
                url: '/locations/{locationId:[0-9A-Za-z-]+}/edit',
                views: {
                    'header': header,
                    'content': location_edit
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('location_add', {
                url: '/locations/add',
                views: {
                    'header': header,
                    'content': location_add
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('controlled_substances', {
                url: '/controlled-substances',
                views: {
                    'header': header,
                    'content': controlled_substances_list
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })
            .state('controlled_substance_edit', {
                url: '/controlled-substances/{controlledSubstanceId:[0-9A-Za-z-]+}/edit',
                views: {
                    'header': header,
                    'content': controlled_substance_edit
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })

            .state('controlled_substance_add', {
                url: '/controlled-substances/add',
                views: {
                    'header': header,
                    'content': controlled_substance_add
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })

            .state('assets', {
                url: '/assets',
                views: {
                    'header': header,
                    'content': asset_list
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('asset_edit', {
                url: '/assets/{assetId:[0-9A-Za-z-]+}/edit',
                views: {
                    'header': header,
                    'content': asset_edit
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('asset_add', {
                url: '/assets/add',
                views: {
                    'header': header,
                    'content': asset_add
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_asset_management'
            })

            .state('stock_add', {
                url: '/stock/add',
                views: {
                    'header': header,
                    'content': stock_add
                },
                resolve: {
                    currentUser: currentUser,
                    controlledSubstances: controlledSubstances,
                    locations:locations
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })

            .state('stock_checkout', {
                url: '/stock/checkout?controlledSubstanceStockId&controlledSubstanceId&locationId',
                views: {
                    'header': header,
                    'content': stock_checkout
                },
                resolve: {
                    currentUser: currentUser,
                    controlledSubstances: controlledSubstances,
                    locations:locations
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })

            .state('stock_report', {
                url: '/stock/report',
                views: {
                    'header': header,
                    'content': stock_report
                },
                resolve: {
                    currentUser: currentUser
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })

            .state('audit_log', {
                url: '/audit',
                views: {
                    'header': header,
                    'content': audit_log
                },
                authenticate: true,
                allowedRoles: ['Patroller', 'Manager', 'Dispatcher'],
                allowedPermissions: 'user_controlled_substances'
            })

            .state('dashboard', {
                url: '/',
                views: {
                    'header': header,
                    'content': dashboard
                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })
            .state('patrollers_report', {
                url: '/reports/patrollers',
                views: {
                    'header': header,
                    'content': patrollers_report
                },
                resolve: {
                    currentUser: currentUser,
                    locations:locations
                },
                authenticate: true,
                allowedRoles: ['Manager', 'Dispatcher']
            })

        ;
    }])

    .run(["$rootScope", "$http", "$cookies", "$state", "$stateParams", "$window", "$sce", "$translate", "$log", "Idle", "growl", "UserService", "LS", "$modal", "hotkeys", "$intercom", function ($rootScope, $http, $cookies, $state, $stateParams, $window, $sce, $translate, $log, Idle, growl, UserService, LS, $modal, hotkeys, $intercom) {
        // start watching when the app runs. also starts the $keepalive service by default.
        $rootScope.$on('IdleStart', function () {
            if ($rootScope.warning) {
                $rootScope.warning.hide();
                $rootScope.warning = null;
            }

            $rootScope.warning = $modal({
                title: "Session Timeout",
                content: "You'll be logged out in 2 minutes."
            });
        });

        $rootScope.$on('IdleEnd', function () {
            if ($rootScope.warning) {
                $rootScope.warning.hide();
                $rootScope.warning = null;
            }
        });

        $rootScope.$on('IdleTimeout', function () {
            // the user has timed out (meaning idleDuration + warningDuration has passed without any activity)
            if ($rootScope.warning) {
                $rootScope.warning.hide();
                $rootScope.warning = null;
            }

            // this is where you'd log them
            $intercom.shutdown();
            UserService.logout(0)
                .then(function (data) {
                    LS.clear();
                    $state.transitionTo('login');
                }, function (error) {
                    $log.log(error);
                });
        });

        Idle.watch();

//        $rootScope.online = navigator.onLine;
//
//        $window.addEventListener("offline", function() {
//            $rootScope.$apply(function() {
//                $rootScope.online = false;
//            });
//        }, false);
//
//        $window.addEventListener("online", function() {
//            $rootScope.$apply(function() {
//                $rootScope.online = true;
//            });
//        }, false);

//    $http.defaults.headers.common['X-CSRFToken'] = $cookies.csrftoken;
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;


        $rootScope.$on("$stateChangeStart",
            function (event, toState, toParams, fromState, fromParams) {
                if (toState.authenticate && !UserService.is_authenticated) {
                    $state.transitionTo('login');
                    event.preventDefault();
                } else {
                    if (toState.hasOwnProperty('allowedRoles')) {
                        if (UserService.currentRole() && $.inArray(UserService.currentRole(), toState.allowedRoles) >= 0) {

                            //check permission
                            var user = UserService.currentUser();

                            if(toState.hasOwnProperty('allowedPermissions')){
                                if(user.hasOwnProperty(toState.allowedPermissions) && user[toState.allowedPermissions]){

                                }else{
                                    if (UserService.currentRole() == "Patroller") {
                                        $state.transitionTo('incidents');
                                    }
                                    else {
                                        $state.transitionTo('map');
                                    }
                                    $log.log("Permission denied");
                                    event.preventDefault();
                                }
                            }
                        } else {
                            if (UserService.currentRole() == "Patroller") {
                                $state.transitionTo('incidents');
                            }
                            else {
                                $state.transitionTo('map');
                            }
                            $log.log("Permission denied");
                            event.preventDefault();
                        }

                    }
                }
            });

        hotkeys.bindTo($rootScope).add({
            combo: 'shift+m',
            description: 'Toggle menu',
            callback: function () {
                $rootScope.siderbtn = !$rootScope.siderbtn;
            },
            persistent: true
        });

        $rootScope.stripurl = function (url) {
            // strips off the http:// and / off the end of urls
            var r = /https?\:\/\/(.+)\//;
            return r.test(url) ? r.exec(url)[1] : url;
        };

        $rootScope.safeHtml = function (val) {
            return $sce.trustAsHtml(val);
        };

        $rootScope.changeLanguage = function (key) {
            $translate.use(key);
        };

        //Unit conversion
        $rootScope.KM2M = function (value) {
            return Math.round(value * 0.621 * 10) / 10;
        };

        $rootScope.M2KM = function (value) {
            return Math.round(value * 1.609 * 10) / 10;
        };

        $rootScope.M2FT = function (value) {
            return Math.round(value * 3.2808 * 10) / 10;
        };

        $rootScope.FT2M = function (value) {
            return Math.round(value * 0.3048 * 10) / 10;
        };

        $rootScope.KM2FT = function (value) {
            var m = Math.round(value * 0.621 * 10) / 10;
            return $rootScope.M2FT(m);
        };

        $rootScope.FT2KM = function (value) {
            var m = Math.round(value * 0.3048 * 10) / 10;
            return $rootScope.M2KM(m);
        };

        $rootScope.C2F = function (value) {
            return Math.round((value * 1.8 + 32) * 10) / 10;
        };

        $rootScope.F2C = function (value) {
            return Math.round(((value - 32) / 1.8) * 10) / 10;
        };

        $rootScope.KG2LB = function (value) {
            return Math.round(value * 2.205 * 10) / 10;
        };

        $rootScope.LB2KG = function (value) {
            return Math.round(value * 0.453 * 10) / 10;
        };

        $rootScope.isAuthenticated = function () {
            return !($rootScope.user == null || $rootScope.user == undefined );
        };

        $rootScope.toUTC = function (value) {
            var tz = jstz.determine();
            return moment.tz(value, 'YYYY-MM-DD HH:mm:ss', tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        };

        $rootScope.toLocalTime = function (value) {
            var tz = jstz.determine();
            return moment.utc(value).tz(tz.name()).format('YYYY-MM-DD HH:mm:ss');
        };

        $rootScope.on_error = function (reason) {
            $log.log(reason);
//
//        if (reason.errors.Error.indexOf("expired") !== -1) {
//            $log.log('expired');
//            $state.transitionTo('login');
//        }
        };

//
//    $rootScope.hasRole = function (role) {
//        return ($rootScope.isAuthenticated() && $rootScope.user.Role[0] == role)
//    };

//    $state.errorGo = function (to, parms) {
//        return $state.transitionTo(to, parms, {location: false, inherit: true, relative: $state.$current, notify: true});
//    };
    }]);

angular.module('app.services', []);

/**
 * Directives
 * Author: Shirish Goyal
 */
(function () {
    'use strict';

    angular
        .module('app')
        .directive('backendError', backendError)
        .directive("passwordVerify", passwordVerify)
        .directive("confirmOnExit", confirmOnExit)
        .directive("preventMousewheel", preventMousewheel)
        .directive("ngConfirm", ngConfirm)
        .directive("fileMonitor", fileMonitor)
    ;

    function fileMonitor() {
        var dataURItoBlob = function (dataURI) {
            // convert base64/URLEncoded data component to raw binary data held in a string
            var byteString;

            if (dataURI.split(',')[0].indexOf('base64') >= 0) {
                byteString = dataURI.split(',')[1];
            } else {
                byteString = dataURI.split(',')[1];
            }

            return byteString;
        };

        var fileChanged = function (files, scope, ctrl, element) {
            var file = files[0],
                supportedFileType = [
                    '',
                    'image/gif',
                    'image/jpeg',
                    'image/jpg',
                    'image/png',
                    'application/json',
                    'text/html',
                    'audio/mp3',
                    'video/mp4',
                    'audio/mp4'
                ];

                        //console.log(file);
                        //console.log(file.type);

            if (supportedFileType.indexOf(file.type) != -1) {
                var fileSizeLimit = 1024 * 1024 * 10; //mb

//                            console.log(file.size);

                if (file.size > fileSizeLimit) {
                    alert('File size is too large and max size allowed is ' + (fileSizeLimit / (1024 * 1024)) + ' mb');
                } else {

                    var fileReader = new FileReader(),
                        imgChecker = new Image();

                    fileReader.readAsDataURL(file);

                    // Called when after readAsDataURL on fileReader
                    fileReader.onloadend = function (res) {
                        var data = (res.target.result);
                        scope.ngModel = data;
                    };
                }

            } else {
                // Throw file not supported error

                alert('File type not supported');
            }
        };

        return {
            // Declared as attribute to activate
            restrict: 'A',

            // Scope values
            scope: {
                ngModel: '=',
                onFileChange: '&'
            },

            link: function (scope, element, attr, ctrl) {
                element.on('change', function (event) {
                    onFileChange(event.target.files);
                });

                // Use native event ondrop instead of angularjs
                element[0].ondrop = function (event) {
                    event.preventDefault && event.preventDefault();
                    onFileChange(event.dataTransfer.files);
                };

                element[0].ondragenter = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                };

                element[0].ondragover = function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                };

                function onFileChange(files) {
                    if (files.length > 0) {
                        fileChanged(files, scope, ctrl, element);

                        // Clear value on the input field to allow re-upload file
                        element.val(undefined);
                        scope.$apply();
                    }
                }

                element.attr('type', 'file');
            }
        }
    }

    /**
     * @name backendError
     * @desc Clear backend error if input value has been modified.
     *       This helps in ensuring field is re-validated from backend
     */
    function backendError() {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, element, attrs, ctrl) {
                return element.on('change', function () {
                    return scope.$apply(function () {
                        return ctrl.$setValidity('backend', true);
                    });
                });
            }
        };
    }

    function passwordVerify() {
        return {
            require: "ngModel",
            scope: {
                passwordVerify: '='
            },
            link: function (scope, element, attrs, ctrl) {
                scope.$watch(function () {
                    var combined;

                    if (scope.passwordVerify || ctrl.$viewValue) {
                        combined = scope.passwordVerify + '_' + ctrl.$viewValue;
                    }
                    return combined;
                }, function (value) {
                    if (value) {
                        ctrl.$parsers.unshift(function (viewValue) {
                            var origin = scope.passwordVerify;
                            if (origin !== viewValue) {
                                ctrl.$setValidity("passwordVerify", false);
                                return undefined;
                            } else {
                                ctrl.$setValidity("passwordVerify", true);
                                return viewValue;
                            }
                        });
                    }
                });
            }
        };
    }

    function preventMousewheel() {
        return {
            restrict: 'A',
            link: function (scope, $element) {
                $element.on('focus', function () {
                    angular.element(this).on('mousewheel', function (e) {
                        e.preventDefault();
                    });
                });
                $element.on('blur', function () {
                    angular.element(this).off('mousewheel');
                });
            }
        };
    }

    function confirmOnExit() {

        return {
            scope: {
                confirmOnExit: '&',
                confirmMessageWindow: '@',
                confirmMessageRoute: '@',
                confirmMessage: '@'
            },
            link: function ($scope, elem, attrs) {
                window.onbeforeunload = function () {
                    if ($scope.confirmOnExit()) {
                        return $scope.confirmMessageWindow || $scope.confirmMessage;
                    }
                };

                var $locationChangeStartUnbind = $scope.$on('$stateChangeStart', function (event, next, current) {
                    if ($scope.confirmOnExit()) {
                        if (!confirm($scope.confirmMessageRoute || $scope.confirmMessage)) {
                            event.stopImmediatePropagation();
                            event.preventDefault();
                        }
                    }
                });

                $scope.$on('$destroy', function () {
                    window.onbeforeunload = null;
                    $locationChangeStartUnbind();
                });
            }
        };
    }

    function ngConfirm() {
        return {
            priority: 100,
            restrict: 'A',
            link: {
                pre: function (scope, element, attrs) {
                    var msg = attrs.ngConfirm || "Are you sure?";

                    element.bind('click', function (event) {
                        if (!confirm(msg)) {
                            event.stopImmediatePropagation();
                            event.preventDefault();
                        }
                    });
                }
            }
        };
    }

})();
'use strict';

angular.module('app')
    .filter('startFrom', function () {
        return function (input, start) {
            if (input) {
                start = 0 + start; //parse to int
                return input.slice(start);
            }
            return [];
        }
    })
    .filter('range', function () {
        return function (input, total) {
            total = parseInt(total);
            for (var i = 1; i <= total; i++)
                input.push(i);
            return input;
        };
    })
    .filter('toLocal', ["$filter", function ($filter) {
        return function (input) {
            if (input && input.indexOf('T')>0) {
                return moment.utc(input).local().format("hh:mm A");
            } else {
                return input;
            }
        };
    }])
    .filter('toLocalDateTime', ["$filter", "UserService", function ($filter,UserService) {
        return function (input) {
            var tz = jstz.determine();

            if (input) {
                return moment.utc(input).tz(tz.name()).format(UserService.currentUser().resorts[0].datetime_format.key);
            } else {
                return input;
            }
        };
    }])
    .filter('toElapsedTime', ["$filter", function ($filter) {
        return function (input, format) {
            if (input) {
                var from = moment.utc(input);
                var now = moment();
                return  moment.duration(now.diff(from, "seconds"), "seconds").format(format) ;
            } else {
                return input;
            }
        };
    }])
    .filter('toTitlecase', ["$filter", function ($filter) {

        String.prototype.toTitleCase = function () {
            return this.replace(/\w\S*/g, function(txt){
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
        };

        return function (input) {
            if (input && (typeof input == 'string' || input instanceof String)) {
                return (""+input).toTitleCase();
            } else {
                return input;
            }
        };
    }])
    .filter('keysOnly', ["$filter", function ($filter) {
        return function (input) {
            if (input) {
                //var data =  $.grep(input, function(v) {
                //    return v.selected === true;
                //});

                var keys = _.pluck(input, "key");
                return keys.join(", ");

            } else {
                return input;
            }
        };
    }])
    .filter('transformInjury', ["$filter", "$translate", function ($filter, $translate) {
        return function (input) {
            if (input) {
                var data = $.map( input, function( val, i ) {
                    return $translate.instant(val.injury_location) + " " + $translate.instant(val.body_part) + " " + $translate.instant(val.injury_type);
                });

                return data.join (", ");

            } else {
                return input;
            }
        };
    }])
    .filter('transformInjuryFirst', ["$filter", "$translate", function ($filter, $translate) {
        return function (input) {
            if (input) {
                var data = $.map( input, function( val, i ) {
                    return $translate.instant(val.injury_location) + " " + $translate.instant(val.body_part) + " " + $translate.instant(val.injury_type);
                });

                return data[0];

            } else {
                return input;
            }
        };
    }])
    .filter('transformInjuryLocationPart', ["$filter", "$translate", function ($filter, $translate) {
        return function (input) {
            if (input) {
                var data = $.map( input, function( val, i ) {
                    return $translate.instant(val.injury_location) + " " + $translate.instant(val.body_part);
                });

                return data.join (", ");

            } else {
                return input;
            }
        };
    }])
    .filter('transformInjuryType', ["$filter", "$translate", function ($filter, $translate) {
        return function (input) {
            if (input) {
                var data = $.map( input, function( val, i ) {
                    return $translate.instant(val.injury_type);
                });

                return data.join (", ");

            } else {
                return input;
            }
        };
    }])
    .filter('transformTreatment', ["$filter", "$translate", function ($filter, $translate) {
        return function (input) {
            if (input) {
                var data = $.map( input, function( val, i ) {
                    return $translate.instant(_.values(val)[0]);
                });

                return data.join (", ");

            } else {
                return input;
            }
        };
    }])
    .filter('transformPatient', ["$filter", function ($filter) {
        return function (input) {
            if (input) {
                return input.name;

            } else {
                return input;
            }
        };
    }])
;

'use strict';

angular.module('app')
    .controller('CaseStatusCtrl', ["$scope", "$location", "$state", "$stateParams", "$rootScope", "$timeout", "$log", "$q", "$window", "$intercom", "$translate", "IncidentService", "DateRangeService", "currentUser", "growl", "incidentStatus", "filterFilter", function ($scope, $location, $state, $stateParams, $rootScope, $timeout, $log, $q, $window, $intercom, $translate, IncidentService, DateRangeService, currentUser, growl, incidentStatus, filterFilter) {

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "CaseStatus"
        });

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        var resort = currentUser.resorts[0];
        $scope.datetime_format = resort.datetime_format.key;
        var date_format = $scope.datetime_format.slice(0, 10);
        $scope.date_format = date_format_mapping[date_format];
        var tz = jstz.determine();

        function toUTC(value) {
            if (typeof value === 'object') {
                try { value = value.format(); } catch (e){ value = JSON.stringify(value); }
            }
            return moment.tz(value, 'YYYY-MM-DD HH:mm:ss', tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format(date_format);
        }

        $scope.date_range_options = [
            {
                "name": $translate.instant("last_seven_days"),
                "value": "a"
            },
            {
                "name": $translate.instant("last_thirty_days"),
                "value": "b"
            },
            {
                "name": $translate.instant("last_six_months"),
                "value": "c"
            },
            {
                "name": $translate.instant("last_twelve_months"),
                "value": "d"
            },
            {
                "name": $translate.instant("custom_date_range"),
                "value": "e"
            }
        ];

        $scope.selected_date_range_option = "b";

        $scope.datefrom = moment().subtract(30, 'days'); // + 'T00:00:00.000Z';
        $scope.dateto = moment();//.tz(tz.name()).format('YYYY-MM-DD')+ 'T23:59:59.999Z';

        $scope.incidentStatus = [];

        $scope.incidentStatus = incidentStatus.map(function(currentValue, Index){
            if(currentValue.order == 9){

            }
            else if(currentValue.order == 8){
                currentValue["selected"] = false;
                return currentValue
            }
            else{
                currentValue["selected"] = true;
                return currentValue
            }
        });
        $scope.incidentStatus.pop();

        // selected fruits
        $scope.selectedStatus = [];

        // watch fruits for changes
        $scope.$watch('incidentStatus|filter:{selected:true}', function (nv) {
            $scope.selectedStatus = nv.map(function (status) {
                return status.order;
            });
        }, true);

        // Watch datefrom and dateto
        $scope.$watch('selected_date_range_option', function(nv) {
            switch(nv.value) {
                case 'a':
                    $scope.datefrom = moment().subtract(7, 'days');
                    break;
                case 'b':
                    $scope.datefrom = moment().subtract(30, 'days');
                    break;
                case 'c':
                    $scope.datefrom = moment().subtract(180, 'days');
                    break;
                case 'd':
                    $scope.datefrom = moment().subtract(1, 'year');
                    break;
                case 'e':
                    break;
            }
        }, true);

        $scope.list = {
            incidents: [],
            summary: [],
            currentPage: 1,
            itemsPerPage: 20,
            filteredItems: 0,
            totalItems: 0,
            totalPages: 0,
            loading: false,
            success: true,
            error: ''
        };

        $scope.search = function(){

            IncidentService.fetchStatusReport(toUTC($scope.datefrom), toUTC($scope.dateto), $scope.selectedStatus.toString(), $scope.list.itemsPerPage, $scope.list.currentPage, 'json').then(
                function (data) {
                    $scope.list.loading = false;

                    angular.forEach(data.results, function(elem, index) {
                        data.results[index]['dt_created'] = toLocalTime(moment(elem['dt_created'], 'YYYY-MM-DD HH:mm:ss'));
                    });

                    $scope.list.incidents = data.results;
                    $scope.list.summary = data.summary;
                    $scope.list.filteredItems = ($scope.list.incidents == null) ? 0 : $scope.list.incidents.length; //Initially for no filter
                    $scope.list.totalItems = data.count;
                    $scope.list.totalPages = Math.ceil(data.count / $scope.list.itemsPerPage);

                    var max_count = data.summary.reduce(function(a,b){
                        return a.count > b.count ? a : b
                    });

                    angular.forEach($scope.list.summary, function(elem, index) {
                        if(elem.count != max_count.count) {
                            $scope.list.summary[index]['width'] = max_count.count != 0 ? ((elem.count * 100) / max_count.count) + 25 : 25;
                            $scope.list.summary[index]['height'] = max_count.count != 0 ? ((elem.count * 100) / max_count.count) + 25 : 25;
                        }
                        else{
                            $scope.list.summary[index]['width'] = max_count.count != 0 ? ((elem.count * 100) / max_count.count) : 25;
                            $scope.list.summary[index]['height'] = max_count.count != 0 ? ((elem.count * 100) / max_count.count) : 25;
                        }
                    });
                }
            )};

        $scope.statusFilter = function(id){
            $scope.selectedStatus = id;
            $scope.incidentStatus = $scope.incidentStatus.map(function(currentValue, Index){
                if(currentValue.order == id){
                    currentValue["selected"] = true;
                    return currentValue
                }
                else{
                    currentValue["selected"] = false;
                    return currentValue
                }
            });
            $scope.search();
        };

        $scope.onPrint = function(){
            $window.print();
        };

        $scope.onDownload = function(){
            IncidentService.fetchStatusReport(toUTC($scope.datefrom), toUTC($scope.dateto), $scope.selectedStatus.toString(), $scope.list.itemsPerPage, $scope.list.currentPage, 'csv').then(
                function(data) {
                    var anchor = angular.element('<a/>');
                    anchor.attr({
                        href: 'data:attachment/csv;charset=utf-8,' + encodeURI(data),
                        target: '_blank',
                        download: 'status-report.csv'
                    })[0].click();
                })
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.search();
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.search();
                }
            }
        );

    }]);
'use strict';

angular.module('app')
    .controller('ChartCtrl', ["$scope", "$location", "$state", "$stateParams", "$rootScope", "$timeout", "$log", "$q", "$window", "$intercom", "$translate", "IncidentService", "DateRangeService", "questions", "currentUser", "growl", "ReportService", function ($scope, $location, $state, $stateParams, $rootScope, $timeout, $log, $q, $window, $intercom, $translate, IncidentService, DateRangeService, questions, currentUser, growl, ReportService) {

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Charts"
        });

        var current = new Date();
        var tz = jstz.determine();

        var resort = currentUser.resorts[0];
        var resort_id = resort.resort_id;

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = resort.datetime_format.key;
        var date_format = $scope.datetime_format.slice(0, 10);
        $scope.date_format = date_format_mapping[date_format];

        function toUTC(value) {
            return moment.tz(value, 'YYYY-MM-DD HH:mm:ss', tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format(date_format);
        }

        $scope.id = $stateParams.reportId;

        $scope.scales = [
            {key: 'date', value: 'Date'},
            {key: 'day', value: 'Day'},
            {key: 'hour', value: 'Hour'},
            {key: 'day_of_week', value: 'Weekday'},
            {key: 'week_of_year', value: 'Week of Year'},
            {key: 'month_of_year', value: 'Month'},
            {key: 'year', value: 'Year'},
            {key: 'hour_of_day_of_week', value: 'Hour of Day of Week'}
        ];

        $scope.scale = $scope.scales[0];

        $scope.schema = {
            type: "object",
            properties: [],
            properties_alter: []
        };

        $scope.schema.properties_alter.push({
            'title': 'Incidents - Total',
            'type': 'string',
            'order': 0,
            'fullkey': 'total_incident',
            'key': 'total_incident',
            'formtype': 'select',
            'placeholder': '',
            'titleMap': []
        });


//        Schema	Form type
//        "type": "string"	text
//        "type": "number"	number
//        "type": "integer"	number
//        "type": "boolean"	checkbox
//        "type": "object"	fieldset
//        "type": "string" and a "enum"	select
//        "type": "array" and a "enum" in array type	checkboxes
//        "type": "array"	array

        var schema_type = {
            'text': 'string',
            'textarea': 'string',
            'number': 'string',
            'range': 'string',
            'arrows': 'string',
            'select': 'string',
            'multi_select': 'string',
            'radio': 'string',
            'radio_button': 'string',
            'gender': 'string',
            'image': 'object',
            'date_picker': 'string',
            'date_time_picker': 'string',
            'google_map': 'object',
            'file': 'string'
        };

//        Form Type	Becomes
//        fieldset	a fieldset with legend
//        section	just a div
//        conditional	a section with a ng-if
//        actions	horizontal button list, can only submit and buttons as items
//        text	input with type text
//        textarea	a textarea
//        number	input type number
//        password	input type password
//        checkbox	a checkbox
//        checkboxes	list of checkboxes
//        select	a select (single value)
//        submit	a submit button
//        button	a button
//        radios	radio buttons
//        radios-inline	radio buttons in one line
//        radiobuttons	radio buttons with bootstrap buttons
//        help	insert arbitrary html
//        tab	tabs with content
//        array	a list you can add, remove and reorder
//        tabarray	a tabbed version of array

        var form_type = {
            'text': 'text',
            'range': 'text',
            'textarea': 'text',
            'number': 'number',
            'arrows': 'select',
            'select': 'select',
            'multi_select': 'select',
            'radio': 'select',
            'radio_button': 'select',
            'gender': 'select',
            'image': 'file_upload',
            'message': 'help',
            'date_picker': 'date_picker',
            'date_time_picker': 'date_time_picker',
            'google_map': 'googlemap',
            'file': 'text'
        };

        var chosenTypes = [
            'range',
            'arrows',
            'select',
            'multi_select',
            'radio',
            'radio_button',
            'gender'
        ];

        var tabs = questions.DashboardItems;

        var getChoiceMap = function (mapValues) {
            var _choices = [],
                _titlemap = [];

            // Loop and build choices and titlemap
            angular.forEach(mapValues, function (value) {
                for (var key in value) {
                    //console.log(value[key]);
                    if (key.indexOf("controlled") < 0) {
                        _choices.push({"id": key, "name": $translate.instant(value[key])});
                        _titlemap.push({"value": key, "name": $translate.instant(value[key])});
                    }
                }
            });

            return {
                "choices": _choices,
                "titlemap": _titlemap
            }
        };

        for (var key in tabs) {
            if (tabs.hasOwnProperty(key)) {


                for (var question in tabs[key]) {
                    if (tabs[key].hasOwnProperty(question) && (question == 'Questions' || question == 'RepeatingQuestions')) {
                        var temp_schema_properties_question = [];

                        for (var m in tabs[key][question]) {
                            if (tabs[key][question].hasOwnProperty(m)) {

                                var q = tabs[key][question][m];
                                var choices = [];
                                var titlemap = [];

                                if (q.Type == 'select' || q.Type == 'multi_select' || q.Type == 'arrows') {

                                    for (var key1 in q.Values) {

                                        if (q.Values.hasOwnProperty(key1)) {

                                            var choiceMap = getChoiceMap(q.Values);

                                            choices = choiceMap.choices;
                                            titlemap = choiceMap.titlemap;

                                        }

                                    }
                                }

                                if (q.Type == 'gender') {
                                    titlemap.push({
                                        value: "Male",
                                        name: "Male"
                                    });

                                    titlemap.push({
                                        value: "Female",
                                        name: "Female"
                                    });
                                }

                                if (q.Type == 'radio') {
                                    titlemap.push({
                                        value: "Yes",
                                        name: "Yes"
                                    });

                                    titlemap.push({
                                        value: "No",
                                        name: "No"
                                    });
                                }
                                if (q.Type == 'radio_button') {
                                    titlemap.push({
                                        value: "yes",
                                        name: "Yes"
                                    });

                                    titlemap.push({
                                        value: "no",
                                        name: "No"
                                    });

                                    titlemap.push({
                                        value: "unknown",
                                        name: "Unknown"
                                    });
                                }

                                if (chosenTypes.indexOf(q.Type) > -1) {
                                    if (!q.hasOwnProperty('ParentKey') || (q.hasOwnProperty('ParentKey') && tabs[key][question].hasOwnProperty(q['ParentKey']))) {
                                        if (q.hasOwnProperty('ParentKey')) {
                                            temp_schema_properties_question.forEach(function (current, index, array) {
                                                if (current.key == q['ParentKey']) {
                                                    var fullkey = m;

                                                    if (question == 'RepeatingQuestions') {
                                                        fullkey = key + '____' + m;
                                                    }

                                                    if (current.hasOwnProperty('childField')) {
                                                        titlemap.unshift({
                                                            value: "all",
                                                            name: "All"
                                                        });
                                                        temp_schema_properties_question[index]['childField'][q['ShowIf'][q['ParentKey']]] = {
                                                            'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                            'order': q.Order,
                                                            'fullkey': fullkey,
                                                            'key': m,
                                                            'placeholder': $translate.instant(q.Placeholder),
                                                            'titleMap': titlemap
                                                        };
                                                        temp_schema_properties_question[index]['childField'][q['ShowIf'][q['ParentKey']]]['select'] = [
                                                            {
                                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                                'fullkey': fullkey
                                                            }
                                                        ]
                                                    }
                                                    else {
                                                        var selection_name = q['ShowIf'][q['ParentKey']];
                                                        temp_schema_properties_question[index]['childField'] = {};
                                                        titlemap.unshift({
                                                            value: "all",
                                                            name: "All"
                                                        });
                                                        temp_schema_properties_question[index]['childField'][selection_name] = {
                                                            'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                            'order': q.Order,
                                                            'fullkey': fullkey,
                                                            'key': m,
                                                            'placeholder': $translate.instant(q.Placeholder),
                                                            'titleMap': titlemap
                                                        };
                                                        temp_schema_properties_question[index]['childField'][selection_name]['select'] = [
                                                            {
                                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                                'fullkey': fullkey
                                                            }
                                                        ];
                                                    }
                                                }
                                            })
                                        }
                                        else {
                                            var fullkey = m;

                                            if (question == 'RepeatingQuestions') {
                                                fullkey = key + '____' + m;
                                            }

                                            temp_schema_properties_question.push({
                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                'type': schema_type[q.Type],
                                                'order': q.Order,
                                                'fullkey': fullkey,
                                                'key': m,
                                                'formtype': form_type[q.Type],
                                                'placeholder': $translate.instant(q.Placeholder),
                                                'titleMap': titlemap
                                            });
                                        }
                                    }
                                }

                                else {
                                    if (q.Type == "repeater" && q.hasOwnProperty('RepeatingQuestions')) {
                                        for (var question1 in tabs[key][question][m]) {
                                            if (tabs[key][question][m].hasOwnProperty(question1) && (question1 == 'Questions' || question1 == 'RepeatingQuestions')) {
                                                var temp_schema_properties = [];
                                                for (var n in tabs[key][question][m][question1]) {
                                                    if (tabs[key][question][m][question1].hasOwnProperty(n)) {

                                                        var q1 = tabs[key][question][m][question1][n];

                                                        choices = [];
                                                        titlemap = [];

                                                        if (q1.Type == 'select' || q1.Type == 'multi_select' || q1.Type == 'arrows') {

                                                            for (var key11 in q1.Values) {

                                                                if (q1.Values.hasOwnProperty(key11)) {

                                                                    choiceMap = getChoiceMap(q1.Values);

                                                                    choices = choiceMap.choices;
                                                                    titlemap = choiceMap.titlemap;

                                                                }
                                                            }
                                                        }

                                                        if (q1.Type == 'gender') {
                                                            titlemap.push({
                                                                value: "Male",
                                                                name: "Male"
                                                            });

                                                            titlemap.push({
                                                                value: "Female",
                                                                name: "Female"
                                                            });
                                                        }

                                                        if (q1.Type == 'radio') {
                                                            titlemap.push({
                                                                value: "Yes",
                                                                name: "Yes"
                                                            });

                                                            titlemap.push({
                                                                value: "No",
                                                                name: "No"
                                                            });
                                                        }

                                                        if (q.Type == 'radio_button') {
                                                            titlemap.push({
                                                                value: "yes",
                                                                name: "Yes"
                                                            });

                                                            titlemap.push({
                                                                value: "no",
                                                                name: "No"
                                                            });

                                                            titlemap.push({
                                                                value: "unknown",
                                                                name: "Unknown"
                                                            });
                                                        }
                                                        if (!q1.hasOwnProperty('ParentKey') || (q1.hasOwnProperty('ParentKey') && tabs[key][question][m][question1].hasOwnProperty(q1['ParentKey']))) {
                                                            if (q1.hasOwnProperty('ParentKey')) {
                                                                if (chosenTypes.indexOf(q1.Type) > -1) {
                                                                    temp_schema_properties.forEach(function (current, index, array) {
                                                                        if (current.key == q['ParentKey']) {
                                                                            if (current.hasOwnProperty('childField')) {
                                                                                titlemap.unshift({
                                                                                    value: "all",
                                                                                    name: "All"
                                                                                });
                                                                                temp_schema_properties[index]['childField'][q['ShowIf'][q['ParentKey']]] = {
                                                                                    'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                    'fullkey': m + '____' + n,
                                                                                    'key': n,
                                                                                    'placeholder': $translate.instant(q1.Placeholder),
                                                                                    'titleMap': titlemap
                                                                                };
                                                                                temp_schema_properties[index]['childField'][q1['ShowIf'][q1['ParentKey']]]['select'] = [
                                                                                    {
                                                                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                        'fullkey': fullkey
                                                                                    }
                                                                                ]
                                                                            }
                                                                            else {
                                                                                var selection_name = q1['ShowIf'][q1['ParentKey']];
                                                                                temp_schema_properties[index]['childField'] = {};
                                                                                titlemap.unshift({
                                                                                    value: "all",
                                                                                    name: "All"
                                                                                });
                                                                                temp_schema_properties[index]['childField'][selection_name] = {
                                                                                    'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                    'fullkey': m + '____' + n,
                                                                                    'key': n,
                                                                                    'placeholder': $translate.instant(q1.Placeholder),
                                                                                    'titleMap': titlemap
                                                                                };
                                                                                temp_schema_properties[index]['childField'][selection_name]['select'] = [
                                                                                    {
                                                                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                        'fullkey': fullkey
                                                                                    }
                                                                                ]

                                                                            }
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                            else {
                                                                if (chosenTypes.indexOf(q1.Type) > -1) {
                                                                    temp_schema_properties.push({
                                                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                        'type': schema_type[q1.Type],
                                                                        'order': q1.Order,
                                                                        'fullkey': m + '____' + n,
                                                                        'key': n,
                                                                        'formtype': form_type[q1.Type],
                                                                        'placeholder': $translate.instant(q1.Placeholder),
                                                                        'titleMap': titlemap
                                                                    });
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                $scope.schema.properties = $scope.schema.properties.concat(temp_schema_properties);
                                                $scope.schema.properties_alter = $scope.schema.properties_alter.concat(temp_schema_properties);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        $scope.schema.properties = $scope.schema.properties.concat(temp_schema_properties_question);
                        $scope.schema.properties_alter = $scope.schema.properties_alter.concat(temp_schema_properties_question);
                    }
                }
            }
        }

        $scope.onSubmit = function (form) {
            $scope.list.get();
        };

        $scope.onDownload = function (form) {
            $scope.onProcess($scope.chart_type);

            //console.log($scope.finalmodel[0].data);

            if (angular.equals({}, $scope.finalmodel[0].data)) {
                growl.error("Atleast one filter must be selected to proceed");
            } else {

                IncidentService.fetchChartCSV($scope.finalmodel, $scope.chart_type, resort_id, 'csv').then(
                    function (data) {
                        //$log.log(data);

                        var anchor = angular.element('<a/>');
                        anchor.attr({
                            href: 'data:attachment/csv;charset=utf-8,' + encodeURI(data),
                            target: '_blank',
                            download: 'chart.csv'
                        })[0].click();
                    }
                );
            }
        };

        $scope.chart_type = 'timeline';

        $scope.model = [
            {
                compare: true,
                date: {
                    datefrom: DateRangeService.range.dateFrom,
                    dateto: DateRangeService.range.dateTo
                },
                data: [
                    {}
                ]
            },
            {
                compare: false,
                date: {
                    datefrom: DateRangeService.range.dateFrom,
                    dateto: DateRangeService.range.dateTo
                },
                data: [
                    {}
                ]
            }
        ];

        $scope.finalmodel = null;

        $scope.addField = function (filters) {
            filters.push({});
        };

        $scope.removeField = function (filters, index) {
            filters.splice(index, 1);
        };


        $scope.onReset = function () {
            $scope.model = [
                {
                    compare: true,
                    date: {
                        datefrom: DateRangeService.range.dateFrom,
                        dateto: DateRangeService.range.dateTo
                    },
                    data: [
                        {}
                    ]
                },
                {
                    compare: false,
                    date: {
                        datefrom: DateRangeService.range.dateFrom,
                        dateto: DateRangeService.range.dateTo
                    },
                    data: [
                        {}
                    ]
                }
            ];
        };


        $scope.onProcess = function (chart_type) {
            $scope.finalmodel = [];

            var diffDays = 0;

            angular.forEach($scope.model, function (model_filter, key) {

                if (model_filter.compare) {
                    var a = moment(model_filter.date.datefrom);
                    var b = moment(model_filter.date.dateto);

                    if (key == 0) {
                        diffDays = b.diff(a, 'days');
                    } else {
                        b = angular.copy(a);
                        b.add(diffDays, 'days');
                    }

                    var start_time = toUTC(a.format('YYYY-MM-DD 00:00:00'));
                    var end_time = toUTC(b.format('YYYY-MM-DD 23:59:59'));


                    var date = {
                        'datefrom': start_time,
                        'dateto': end_time
                    };

                    var filters = {};

                    console.log(model_filter.data);

                    if(chart_type != 'pie') {
                        angular.forEach(model_filter.data, function (value, key) {
                            if (value && value.field && value.field.fullkey) {
                                filters[value.field.fullkey] = filters[value.field.fullkey] || [];
                                filters[value.field.fullkey].push(value.value);

                                if (value.hasOwnProperty('childField') && value.childField.value && (value.childField.value != 'all')) {
                                    filters[value.childField.field.fullkey] = filters[value.childField.field.fullkey] || [];
                                    filters[value.childField.field.fullkey].push(value.childField.value);
                                }
                            }
                        });
                    }
                    else{
                        angular.forEach(model_filter.data, function (value, key) {
                            if (value && value.field && value.field.fullkey) {
                                if(value.field.hasOwnProperty('childField') && value.value && value.field.childField.hasOwnProperty(value.value)){
                                    filters[value.field.childField[value.value].fullkey] = filters[value.field.childField[value.value].fullkey] || [];
                                    filters[value.field.childField[value.value].fullkey].push("");
                                }
                                else{
                                    filters[value.field.fullkey] = filters[value.field.fullkey] || [];
                                    filters[value.field.fullkey].push("");

                                    value.value = "";
                                }
                            }
                        });
                    }

                    var model =
                        {
                            date: date,
                            data: filters,
                            scale: $scope.scale.key
                        }
                        ;

                    if (chart_type == 'pie') {
                        if ($scope.finalmodel.length < 1) {
                            $scope.finalmodel.push(model);
                        }
                    } else {
                        $scope.finalmodel.push(model);
                    }

                }
            });
        };

        $scope.$watch(
            'model',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.onProcess($scope.chart_type);
                }
            },
            true
        );

        $scope.css = "height:400px;background-color:transparent;";


        $scope.list = {
            range: DateRangeService.range,
            incidents: [],
            currentPage: 1,
            itemsPerPage: 20,
            filteredItems: 0,
            totalItems: 0,
            totalPages: 0,
            predicate: 'dt_created',
            loading: false,
            success: true,
            error: '',

            get: function () {
                $log.log('fetching incidents...');
                $scope.list.loading = true;

                $scope.onProcess($scope.chart_type);

                //console.log($scope.finalmodel[0].data);

                if (angular.equals({}, $scope.finalmodel[0].data)) {
                    growl.error("Atleast one filter must be selected to proceed");
                } else {

                    IncidentService.fetchChart($scope.finalmodel, $scope.chart_type, resort_id).then(
                        function (data) {

                            if ($scope.chart_type == 'timeline' || $scope.chart_type == 'bar') {

                                var columns = 1;

                                if (data.length > 0) {
                                    columns = data[0].length;
                                }


                                $scope.columns = [];
                                $scope.rows = [];

                                var cols = [
                                    {id: "date", label: $scope.scale.value, type: "string", 'role': 'domain'}
                                ];

                                for (var i = 0; i < columns; i++) {
                                    cols.push({id: "count", label: "Count", type: "number"});

                                    //tooltip
                                    cols.push({type: "string", 'role': 'tooltip', 'p': {'html': true}});

                                    $scope.columns.push($scope.scale.value);
                                    $scope.columns.push('Incident Count');
                                }

                                if (columns > 1) {
                                    $scope.columns.push('Deviation');
                                }

                                var rows = data.map(function (item, index) {
                                    var c = [];

                                    if ($scope.scale.key == 'date') {
                                        c.push({v: moment(item[0].columndetail, 'YYYY-MM-DD').format(date_format)});
                                    }
                                    else {
                                        c.push({v: item[0].columndetail});
                                    }

                                    //if ($scope.scale.key == 'date') {
                                    //    c.push({v: item[0].columndetail});
                                    //} else {
                                    //    c.push({v: item[0].columndetail});
                                    //}

                                    var tooltip = '';

                                    var row = [];
                                    for (var i = 0; i < columns; i++) {
                                        c.push({v: item[i].count});
                                        tooltip = '<p style="width:100px;padding:5px;"><strong> ' + item[i].columndetail + '</strong><br/><strong> Count:</strong> ' + item[i].count + '</p>';
                                        //tooltip
                                        c.push({v: tooltip});

                                        if ($scope.scale.key == 'date') {
                                            row.push(moment(item[i].columndetail, 'YYYY-MM-DD').format(date_format));
                                        }
                                        else {
                                            row.push(item[i].columndetail);
                                        }

                                        row.push(item[i].count);
                                    }

                                    if (columns > 1) {
                                        row.push(((row[3] - row[1]) * 100 / (row[3] == 0 ? 1 : row[3])).toFixed(0) + '%');
                                    }

                                    $scope.rows.push(row);

                                    return {
                                        c: c
                                    }
                                });

                                var chart_map = {
                                    'timeline': 'LineChart',
                                    'bar': 'ColumnChart',
                                    'pie': 'PieChart'
                                };

                                $scope.chart = {
                                    type: chart_map[$scope.chart_type],
                                    data: {
                                        "cols": cols,
                                        "rows": rows
                                    },

                                    options: {
//              "title": "Incidents",
//              "fill": 20,
                                        pieHole: 0.5,
                                        "displayExactValues": true,
                                        "vAxis": {
                                            "title": "Incidents", "gridlines": {"count": 6}
                                        },
//                                focusTarget: 'category',
                                        tooltip: {isHtml: true},
                                        "hAxis": {
                                            "title": $scope.scale.value
                                        },
                                        "colors": [
                                            '#35bfbf',
                                            '#fd423e',
                                            '#ffb648',
                                            '#949fb3',
                                            '#4c5261'
                                        ]
                                    },

                                    formatters: {}
                                };
                            } else {

                                // PIE chart

                                $scope.columns = [
                                    $scope.model[0].data[0].field.title,
                                    "Count"
                                ];

                                $scope.rows = data.map(function (item) {
                                    return [
                                        $translate.instant(item.name),
                                        item.count

                                    ]
                                });


                                var rows = data.map(function (item) {
                                    return {
                                        c: [
                                            {v: $translate.instant(item.name)},
                                            {v: item.count}
                                        ]
                                    }
                                });

                                //console.log($scope.model[0].data[0].field.title);
                                //console.log(rows);

                                $scope.chart = {
                                    type: "PieChart",
                                    data: {
                                        "cols": [
                                            {id: "name", label: $scope.model[0].data[0].field.title, type: "string"},
                                            {id: "count", label: "Count", type: "number"}
                                        ], "rows": rows
                                    },

                                    options: {
//                "title": "Incidents",
                                        pieHole: 0.5,
//                "fill": 20,
                                        "displayExactValues": true,
                                        "vAxis": {
                                            "title": "Count of Incidents"
                                        },
                                        "hAxis": {
                                            "title": $scope.model[0].data[0].field.title
                                        },
                                        "colors": [
                                            '#fd423e',
                                            '#35bfbf',
                                            '#ffb648',
                                            '#949fb3',
                                            '#4c5261'
                                        ]
                                    },

                                    formatters: {}
                                };
                            }


                            $scope.list.loading = false;

                            $scope.list.incidents = data;
                            $scope.list.filteredItems = ($scope.list.incidents == null) ? 0 : $scope.list.incidents.length; //Initially for no filter
                            $scope.list.totalItems = data.length;
                            $scope.list.totalPages = 1;
//                        $scope.list.sort_by('dt_created');
//                        $scope.list.reverse = true;

                        }, function (reason) {

                            $rootScope.on_error(reason);
                            $scope.list.incidents = [];
                            $scope.list.success = false;
                            $scope.list.error = reason.errors.Error;
                            $scope.list.loading = false;
                        });
                }
            },

            print: function (id) {
                $log.log('printing incident ' + id);

                if (id !== null || id !== undefined) {
                    IncidentService.print(id)
                        .then(function (data) {
//                            $log.log(data.data.URL);
                            $window.open(data.data.URL, '_blank', '');

                        }, function (error) {
                            $scope.error = error;
                        });
                }

            }
        };

//        $scope.$watch(
//            'list.itemsPerPage',
//            function (newValue, oldValue) {
//                if (newValue !== oldValue) {
//                    $scope.list.get();
//                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
//                }
//            }
//        );
//
//        $scope.$watch(
//            'list.currentPage',
//            function (newValue, oldValue) {
//                if (newValue !== oldValue) {
//                    $scope.list.get();
//                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
//                }
//            }
//        );

        //$scope.report = {
        //    "config": {
        //        "url": {
        //            "daterange": "-7d",
        //            "group_by": "field_52ca430462b9a",
        //            "group_by_2": "field_54b084fb2d255",
        //            "compare_with": "field_52ca3fcc59d29",
        //            "datecomparefrom": "2015-04-21 07:38:15",
        //            "datecompareto": "2015-04-22 07:38:15",
        //            "datecomparerange": "-7d",
        //            "display": "field_52d47a654d1fc",
        //            "compare_to": "field_52ca3fcc59d29",
        //            "show_count": 5
        //        },
        //        "body": {
        //            "name": ["Krish", "Shaun"],
        //            "occupation": ["Software Developer", "Painter"],
        //            "notes____field_52ca448dg94ja3": ["new note"],
        //            "field_52ca456962ba8____lat": ["-37.718244", "40.0000"],
        //            "field_52ca456962ba8____long": ["144.96191799999997"],
        //            "field_52ca445d62ba6": ["Good"],
        //            "field_52dd8c049b005": [50],
        //            "field_52ca445d62ba1": ["23"],
        //            "field_52d4798f6d227____preexisting_injury": ["817", "820"]
        //        }
        //    }
        //};

        $scope.report = {
            label: "",
            global: 0,
            type: 'timeline',
            config: {
                url: {},
                body: {}
            }
        };

        $scope.getReport = function (id) {
            ReportService.fetch(id).then(function (data) {
                $log.log(data);

                growl.success("chart_fetched_successfully");

                $scope.report = data;
                $scope.chart_type = $scope.report.type;
                $scope.report.global = $scope.report.global > 0;
                $scope.list.range.dateFrom = toLocalTime($scope.report.config.url.datefrom);
                $scope.list.range.dateTo = toLocalTime($scope.report.config.url.dateto);

                $scope.model = $scope.report.config.body;

                $scope.list.get();

            }, function (error) {
                $scope.error = error;
                growl.error(error);
            });
        };

        $scope.createReport = function () {
            var start_time = toUTC(moment($scope.list.range.dateFrom).format('YYYY-MM-DD 00:00:00'));
            var end_time = toUTC(moment($scope.list.range.dateTo).format('YYYY-MM-DD 23:59:59'));

            var report = angular.copy($scope.report);
            report.global = $scope.report.global ? 1 : 0;
            report.type = $scope.chart_type;
            report.config = {
                url: {
                    "datefrom": start_time,
                    "dateto": end_time
                },
                body: $scope.model
            };

            if ($scope.id != null) {
                ReportService.update($scope.id, report).then(function (data) {
                    $log.log(data);
                    growl.success("chart_updated_successfully");

                    $rootScope.$broadcast('reports-updated');

                }, function (error) {
                    $scope.error = error;
                    growl.error(error);
                });
            } else {
                ReportService.create(report).then(function (data) {
                    $log.log(data);
                    growl.success("chart_created_successfully");

                    $rootScope.$broadcast('reports-updated');

                }, function (error) {
                    $scope.error = error;
                    growl.error(error);
                });
            }
        };

        if ($scope.id != null) {
            $scope.getReport($scope.id);
        }

    }]);

'use strict';
angular.module('app')
    .controller('DashboardCtrl', ["$scope", "$rootScope", "$state", "$timeout", "$log", "$intercom", "AnalyticsService", "QuestionService", "growl", "DateRangeService", "currentUser", "$translate", function ($scope, $rootScope, $state, $timeout, $log, $intercom, AnalyticsService, QuestionService, growl, DateRangeService, currentUser, $translate) {

        function checkNested(obj /*, level1, level2, ... levelN*/) {
            var args = Array.prototype.slice.call(arguments, 1);

            for (var i = 0; i < args.length; i++) {
                if (!obj || !obj.hasOwnProperty(args[i])) {
                    return false;
                }
                obj = obj[args[i]];
            }

            return true;
        }

        function arrayToObj(array) {
            var map = {};
            var values = $.map(array, function (val, i) {
                for (var key in val) {
                    map[key] = val[key];
                }
            });
            map[""] = $translate.instant("Unknown");
            map["Unknown"] = $translate.instant("Unknown");
            return map;
        }

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Dashboard"
        });

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        var date_format = $scope.datetime_format.slice(0,10);
        $scope.date_format = date_format_mapping[date_format];

        var resort_id = currentUser.resorts[0].resort_id;

        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

        var timer = null;

        $scope.list = DateRangeService.range;

        $scope.init = function () {

            growl.info('SYNCING_DATA');

            QuestionService.fetch().then(function (questions) {

                var start_time = moment($scope.list.dateFrom).format('YYYY-MM-DD hh:mm:ss');
                var end_time = moment($scope.list.dateTo).format('YYYY-MM-DD hh:mm:ss');

                AnalyticsService.fetchSex(start_time, end_time, resort_id).then(function (result) {

                    var rows = result.data.map(function (item) {
                        return {
                            c: [
                                {v: months[item.month - 1] + ', ' + item.year},
                                {v: item.male},
                                {v: item.female},
                                {v: item.unknown}
                            ]
                        }
                    });

                    $scope.by_incidents = {
                        type: "LineChart",
                        data: {
                            "cols": [
                                {id: "month", label: "Month", type: "string"},
                                {id: "incidents-num-1", label: "Male", type: "number"},
                                {id: "incidents-num-2", label: "Female", type: "number"},
                                {id: "incidents-num-3", label: "Unknown", type: "number"}
                            ], "rows": rows
                        },

                        options: {
//                "title": "Incidents",
//                "fill": 20,
                            "displayExactValues": true,
                            "vAxis": {
                                "title": "Incidents", "gridlines": {"count": 6}
                            },
//                "hAxis": {
//                    "title": "Date"
//                },
                            "colors": [
                                '#35bfbf',
                                '#ffb547',
                                '#4c5261'
                            ]
                        },

                        formatters: {}
                    };
                });

                AnalyticsService.fetchActivity(start_time, end_time, resort_id).then(function (result) {

                    if (checkNested(questions, 'DashboardItems', 'field_52ca41790a16c', 'Questions', 'field_52ca3dc8ac437', 'Values')) {
                        var map = arrayToObj(questions.DashboardItems.field_52ca41790a16c.Questions.field_52ca3dc8ac437.Values);


                        var rows = result.data.map(function (item) {
                            return {
                                c: [
                                    {v: $translate.instant(map[item.activity])},
                                    {v: parseFloat(item.percent)}
                                ]
                            }
                        });

                        $scope.by_activities = {
                            type: "PieChart",
                            cssStyle: "height:450px; width:300px;background-color:transparent;",
                            data: {
                                "cols": [
                                    {id: "activity", label: "Activity", type: "string"},
                                    {id: "num", label: "Events", type: "number"}
                                ],
                                "rows": rows
                            },

                            options: {
//                "title": "Incidents",
                                pieHole: 0.5,
//                "fill": 20,
                                "displayExactValues": true,
                                "vAxis": {
                                    "title": "No. of Incidents", "gridlines": {"count": 6}
                                },
                                "hAxis": {
                                    "title": "Date"
                                },
                                "colors": [
                                    '#fd423e',
                                    '#35bfbf',
                                    '#ffb648',
                                    '#949fb3',
                                    '#4c5261'
                                ]
                            },

                            formatters: {}
                        };
                    }
                });

                AnalyticsService.fetchPatrollers(start_time, end_time).then(function (result) {
                    $scope.patrollers = result.data;
                });

                AnalyticsService.fetchInjury(start_time, end_time, resort_id).then(function (result) {

                    if (checkNested(questions, 'DashboardItems', 'field_52d4798f6d229', 'Questions', 'field_52d4798f6d227', 'RepeatingQuestions', 'injury_type', 'Values')) {
                        var map = arrayToObj(questions.DashboardItems.field_52d4798f6d229.Questions.field_52d4798f6d227.RepeatingQuestions.injury_type.Values);

                        var rows = result.data.map(function (item) {
                            return {
                                c: [
                                    {v: $translate.instant(map[(item.injury).replace(/"/g, '')]) },
                                    {v: item.num}
                                ]
                            }
                        });

                        $scope.by_injury_types = {
                            type: "ColumnChart",
                            cssStyle: "height:450px; width:300px;background-color:transparent;",
                            data: {
                                "cols": [
                                    {id: "injury", label: "Injury", type: "string"},
                                    {id: "num", label: "Injury", type: "number"}
//                        {role: "style", type: "string"}
                                ], "rows": rows
                            },

                            options: {
//                "title": "Incidents",
//                "fill": 20,
                                "displayExactValues": true,
                                "vAxis": {
                                    "title": "Count", "gridlines": {"count": 6}
                                },
//                "hAxis": {
//                    "title": "Date"
//                },
                                "colors": [
                                    '#fd423e',
                                    '#35bfbf',
                                    '#ffb648',
                                    '#949fb3',
                                    '#4c5261'
                                ]
                            },

                            formatters: {}
                        };
                    }
                });

                AnalyticsService.fetchReferred(start_time, end_time, resort_id).then(function (result) {

                    if (checkNested(questions, 'DashboardItems', 'field_52ca426c0a178', 'Questions', 'field_52d48077a16be', 'Values')) {
                        var map = arrayToObj(questions.DashboardItems.field_52ca426c0a178.Questions.field_52d48077a16be.Values);

                        var rows = result.data.map(function (item) {
                            return {
                                c: [
                                    {v: $translate.instant(map[item.referred_to])},
                                    {v: parseFloat(item.percent)}
                                ]
                            }
                        });

                        $scope.by_referred = {
                            type: "PieChart",
                            cssStyle: "height:400px; width:300px;background-color:transparent;",
                            data: {
                                "cols": [
                                    {id: "month", label: "Month", type: "string"},
                                    {id: "incidents-num-1", label: "Party1", type: "number"}
                                ], "rows": rows
                            },

                            options: {
//                "title": "Incidents",
                                pieHole: 0.5,
//                "fill": 20,
                                "displayExactValues": true,
                                "vAxis": {
                                    "title": "No. of Incidents", "gridlines": {"count": 6}
                                },
                                "hAxis": {
                                    "title": "Date"
                                },
                                "colors": [
                                    '#fd423e',
                                    '#35bfbf',
                                    '#ffb648',
                                    '#949fb3',
                                    '#4c5261'
                                ]
                            },

                            formatters: {}
                        };
                    }
                });

                AnalyticsService.fetchAge(start_time, end_time, resort_id).then(function (result) {
                    var data = result.data;
                    $scope.by_age = {
                        type: "ColumnChart",
                        cssStyle: "height:400px; width:300px;background-color:transparent;",
                        data: {
                            "cols": [
                                {id: "month", label: "Month", type: "string"},
                                {id: "incidents-num-1", label: "Age", type: "number"},
                                {role: "style", type: "string"}
                            ], "rows": [
                                {
                                    c: [
                                        {v: "0-10"},
                                        {v: data.g0_10},
                                        {v: '#fd423e'}
                                    ]
                                },
                                {
                                    c: [
                                        {v: "11-15"},
                                        {v: data.g11_15},
                                        {v: '#35bfbf'}
                                    ]
                                },
                                {
                                    c: [
                                        {v: "16-18"},
                                        {v: data.g16_18},
                                        {v: '#ffb648'}
                                    ]
                                },
                                {
                                    c: [
                                        {v: "19-21"},
                                        {v: data.g19_21},
                                        {v: '#949fb3'}
                                    ]
                                },
                                {
                                    c: [
                                        {v: "22-30"},
                                        {v: data.g22_30},
                                        {v: '#4c5261'}
                                    ]
                                },
                                {
                                    c: [
                                        {v: "31-"},
                                        {v: data.g31_},
                                        {v: '#000000'}
                                    ]
                                }
                            ]
                        },

                        options: {
//                "title": "Incidents",
//                "fill": 20,
                            "displayExactValues": true,
                            "vAxis": {
                                "title": "Count", "gridlines": {"count": 6}
                            },
//                "hAxis": {
//                    "title": "Date"
//                },
                            "colors": [
                                '#fd423e',
                                '#35bfbf',
                                '#ffb648',
                                '#949fb3',
                                '#4c5261',
                                '#000000'
                            ]
                        },

                        formatters: {}
                    };
                });

                AnalyticsService.fetchAlcohol(start_time, end_time, resort_id).then(function (result) {
                    var rows = result.data.map(function (item) {
                        return {
                            c: [
                                {v: months[item.month] + ', ' + item.year},
                                {v: item.alcohol},
                                {v: item.drugs}
                            ]
                        }
                    });

                    $scope.by_drugs = {
                        type: "ColumnChart",
                        cssStyle: "height:400px; width:300px;background-color:transparent;",
                        data: {
                            "cols": [
                                {id: "month", label: "Month", type: "string"},
                                {id: "count-alcohol", label: "Alcohol", type: "number"},
                                {id: "count-drugs", label: "Drugs", type: "number"}
                            ], "rows": rows
                        },

                        options: {
//                "title": "Incidents",
//                "fill": 20,
                            "displayExactValues": true,
                            "vAxis": {
                                "title": "Count", "gridlines": {"count": 6}
                            },
//                "hAxis": {
//                    "title": "Date"
//                },
                            "colors": [
                                '#fd423e',
                                '#35bfbf',
                                '#ffb648',
                                '#949fb3',
                                '#4c5261'
                            ]
                        }
                    };
                });


//            timer = $timeout($scope.init, 15000);
//
//            $scope.$on(
//                "$destroy",
//                function( event ) {
//
//                    $timeout.cancel( timer );
//
//                }
//            );

            }, function (reason) {
                $rootScope.on_error(reason);
            });


        };

        $scope.css = "height:270px;background-color:transparent;";

    }]);
/**
 * Created by rj on 13/9/16.
 */

'use strict';
angular.module('app')
    .controller('PatrollersReportCtrl', ['$scope', '$log', 'currentUser', 'growl', '$window', '$translate', 'ReportService',
        function ($scope, $log, currentUser, growl, $window, $translate, ReportService) {
        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        var date_format = $scope.datetime_format.slice(0,10);
        $scope.date_format = date_format_mapping[date_format];
        console.log($scope.date_format)
        $scope.css = "height:175px;background-color:transparent;";
        $scope.properties = {
            date_range:{
                select: {
                    options: [
                        { id: 0, text: $translate.instant('last_seven_days'), value: 'LAST_7_DAYS' },
                        { id: 1, text: $translate.instant('last_thirty_days'), value: 'LAST_30_DAYS' },
                        { id: 2, text: $translate.instant('last_six_months'), value: 'LAST_6_MONTHS' },
                        { id: 3, text: $translate.instant('last_twelve_months'), value: 'LAST_12_MONTHS' },
                        { id: 4, text: $translate.instant('custom_date_range'), value: 'CUSTOM' }
                    ],
                    model_value: { id: 0, text: $translate.instant('last_seven_days'), value: 'LAST_7_DAYS' },
                    onChange: function(text_range){
                        var from = moment();
                        var to = moment();
                        switch(text_range.value){
                            case 'LAST_7_DAYS': { from.subtract(7, 'days'); break; }
                            case 'LAST_30_DAYS': { from.subtract(30, 'days'); break; }
                            case 'LAST_6_MONTHS': { from.subtract(6, 'months'); break; }
                            case 'LAST_12_MONTHS': {from.subtract(12, 'months'); break; }
                            default: {
                                from = moment($scope.properties.date_range.from, false);
                                break;
                            }
                        }
                        $scope.properties.date_range.from = from.format();
                        $scope.properties.date_range.to = to.format();
                    }
                },
                format: date_format,
                from: moment().subtract(7, 'days').format(),
                to: moment().format(),
                pickers: {
                    frontHandled: false,
                    onChange: function(value){
                        $scope.properties.date_range.pickers.frontHandled = value == 'frontHandled';
                    }
                }
            }
        };
        $scope.report = {
            params : {
                output_format: 'json',
                datefrom: moment().subtract(7, 'days').utc().format('YYYY-MM-DD+00:00:00'),
                dateto: moment().utc().format('YYYY-MM-DD+23:59:59')
            }
        };

        $scope.$watch('properties.date_range.from', function(newValue, oldValue){
            if ($scope.properties && $scope.properties.date_range.pickers.frontHandled) {
                $scope.properties.date_range.select.model_value =
                    $scope.properties.date_range.select.options[($scope.properties.date_range.select.options.length - 1)];
                $scope.properties.date_range.pickers.frontHandled = false;
            }
            if (newValue !== oldValue){
                $scope.report.params.datefrom = moment(newValue).utc().format('YYYY-MM-DD+00:00:00');
                $scope.list.get();
            }
        });
        $scope.$watch('properties.date_range.to', function(newValue, oldValue){
            if ($scope.properties && $scope.properties.date_range.pickers.frontHandled) {
                $scope.properties.date_range.select.model_value =
                    $scope.properties.date_range.select.options[($scope.properties.date_range.select.options.length - 1)];
                $scope.properties.date_range.pickers.frontHandled = false;
            }
            if (newValue !== oldValue){
                $scope.report.params.dateto = moment(newValue).utc().format('YYYY-MM-DD+23:59:59');
                $scope.list.get();
            }
        });


        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'name',
            loading: false,
            reverse: false,

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            sortBy: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;
                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_PATROLLERS_REPORT");
                $scope.report.params.output_format = 'json';
                $scope.report.params.offset = ($scope.list.currentPage - 1) * $scope.list.itemsPerPage;
                $scope.report.params.chunk = $scope.list.itemsPerPage;
                $scope.report.params.order_by = $scope.list.predicate;
                $scope.report.params.order_by_direction = $scope.list.reverse? 'desc' : 'asc';
                ReportService.fetchPatrollers($scope.report.params)
                    .then(function(response){
                        console.log(response);
                        $scope.list.items = response.data;
                        $scope.list.totalItems = response.total_rows;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);

                    }, function(error){
                        growl.error(error.detail);
                    })
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },
            download: function(){
                growl.info("DOWNLOADING_PATROLLERS_REPORT");
                ReportService.fetchPatrollers({
                    datefrom: $scope.report.params.datefrom,
                    dateto: $scope.report.params.dateto,
                    output_format: 'csv'
                })
                    .then(function(data){
                        var anchor = angular.element('<a/>');
                        anchor.attr({
                            href: 'data:attachment/csv;charset=utf-8,' + encodeURI(data),
                            target: '_blank',
                            download: 'patrollers_report.csv'
                        })[0].click();
                    }, function(error){
                        growl.error(error.detail);
                    })
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },
            print: function(){
                $window.print();
            }
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                }
            }
        );
        $scope.$on('$viewContentLoaded', function(){
            $scope.list.get();
        });
    }]);
'use strict';

angular.module('app')
    .controller('ReportCtrl', ["$scope", "$location", "$state", "$stateParams", "$rootScope", "$timeout", "$log", "$q", "$window", "$intercom", "$translate", "IncidentService", "DateRangeService", "ReportService", "questions", "currentUser", "growl", function ($scope, $location, $state, $stateParams, $rootScope, $timeout, $log, $q, $window, $intercom, $translate, IncidentService, DateRangeService, ReportService, questions, currentUser, growl) {

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Reports"
        });

        var current = new Date();
        var tz = jstz.determine();

        var resort = currentUser.resorts[0];
        var resort_id = resort.resort_id;

        function toUTC(value) {
            return moment.tz(value, 'YYYY-MM-DD HH:mm:ss', tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format('YYYY-MM-DD HH:mm:ss');
        }

        $scope.id = $stateParams.reportId;

        $scope.schema = {
            type: "object",
            properties: []
        };

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        var date_format = $scope.datetime_format.slice(0,10);
        $scope.date_format = date_format_mapping[date_format];


//        Schema	Form type
//        "type": "string"	text
//        "type": "number"	number
//        "type": "integer"	number
//        "type": "boolean"	checkbox
//        "type": "object"	fieldset
//        "type": "string" and a "enum"	select
//        "type": "array" and a "enum" in array type	checkboxes
//        "type": "array"	array

        var schema_type = {
            'text': 'string',
            'textarea': 'string',
            'number': 'string',
            'range': 'string',
            'arrows': 'string',
            'select': 'string',
            'multi_select': 'string',
            'radio': 'string',
            'radio_button': 'string',
            'gender': 'string',
            'image': 'object',
            'date_picker': 'string',
            'date_time_picker': 'string',
            'google_map': 'object',
            'file': 'string'
        };

//        Form Type	Becomes
//        fieldset	a fieldset with legend
//        section	just a div
//        conditional	a section with a ng-if
//        actions	horizontal button list, can only submit and buttons as items
//        text	input with type text
//        textarea	a textarea
//        number	input type number
//        password	input type password
//        checkbox	a checkbox
//        checkboxes	list of checkboxes
//        select	a select (single value)
//        submit	a submit button
//        button	a button
//        radios	radio buttons
//        radios-inline	radio buttons in one line
//        radiobuttons	radio buttons with bootstrap buttons
//        help	insert arbitrary html
//        tab	tabs with content
//        array	a list you can add, remove and reorder
//        tabarray	a tabbed version of array

        var form_type = {
            'text': 'text',
            'range': 'text',
            'textarea': 'text',
            'number': 'number',
            'arrows': 'select',
            'select': 'select',
            'multi_select': 'select',
            'radio': 'select',
            'radio_button': 'select',
            'gender': 'select',
            'image': 'file_upload',
            'message': 'help',
            'date_picker': 'date_picker',
            'date_time_picker': 'date_time_picker',
            'google_map': 'googlemap',
            'file': 'text'
        };

        var chosenTypes = [
            'text',
            'range',
            'textarea',
            'number',
            'decimal',
            'arrows',
            'select',
            'multi_select',
            'radio',
            'radio_button',
            'gender',
            'date_picker',
            'date_time_picker'
        ];

        var tabs = questions.DashboardItems;

        var getChoiceMap = function (mapValues) {
            var _choices = [],
                _titlemap = [];

            // Loop and build choices and titlemap
            angular.forEach(mapValues, function (value) {
                for (var key in value) {
                    if (key.indexOf("controlled") < 0) {
                        _choices.push({"id": key, "name": $translate.instant(value[key])});
                        _titlemap.push({"value": key, "name": $translate.instant(value[key])});
                    }
                }
            });

            return {
                "choices": _choices,
                "titlemap": _titlemap
            }
        };

        for (var key in tabs) {
            if (tabs.hasOwnProperty(key)) {


                for (var question in tabs[key]) {
                    if (tabs[key].hasOwnProperty(question) && (question == 'Questions' || question == 'RepeatingQuestions')) {
                        var temp_schema_properties_question = [];

                        for (var m in tabs[key][question]) {
                            if (tabs[key][question].hasOwnProperty(m)) {


                                var q = tabs[key][question][m];

                                var choices = [];
                                var titlemap = [];

                                if (q.Type == 'select' || q.Type == 'multi_select' || q.Type == 'arrows') {

                                    for (var key1 in q.Values) {

                                        if (q.Values.hasOwnProperty(key1)) {

                                            var choiceMap = getChoiceMap(q.Values);

                                            choices = choiceMap.choices;
                                            titlemap = choiceMap.titlemap;

                                        }

                                    }
                                }

                                if (q.Type == 'gender') {
                                    titlemap.push({
                                        value: "Male",
                                        name: "Male"
                                    });

                                    titlemap.push({
                                        value: "Female",
                                        name: "Female"
                                    });
                                }

                                if (q.Type == 'radio') {
                                    titlemap.push({
                                        value: "Yes",
                                        name: "Yes"
                                    });

                                    titlemap.push({
                                        value: "No",
                                        name: "No"
                                    });
                                }

                                if (q.Type == 'radio_button') {
                                    titlemap.push({
                                        value: "yes",
                                        name: "Yes"
                                    });

                                    titlemap.push({
                                        value: "no",
                                        name: "No"
                                    });

                                    titlemap.push({
                                        value: "unknown",
                                        name: "Unknown"
                                    });
                                }

                                if (chosenTypes.indexOf(q.Type) > -1) {
                                    if(!q.hasOwnProperty('ParentKey') || (q.hasOwnProperty('ParentKey') && tabs[key][question].hasOwnProperty(q['ParentKey']))) {
                                        if(q.hasOwnProperty('ParentKey')){
                                            temp_schema_properties_question.forEach(function(current, index, array){
                                                if(current.key == q['ParentKey']){
                                                    var fullkey = m;

                                                    if (question == 'RepeatingQuestions') {
                                                        fullkey = key + '____' + m;
                                                    }

                                                    if(current.hasOwnProperty('childField')){
                                                        titlemap.unshift({
                                                            value: "all",
                                                            name: "All"
                                                        });
                                                        temp_schema_properties_question[index]['childField'][q['ShowIf'][q['ParentKey']]] = {
                                                            'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                            'order': q.Order,
                                                            'fullkey': fullkey,
                                                            'key': m,
                                                            'placeholder': $translate.instant(q.Placeholder),
                                                            'titleMap': titlemap
                                                        };
                                                        temp_schema_properties_question[index]['childField'][q['ShowIf'][q['ParentKey']]]['select'] = [
                                                            {
                                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                                'fullkey': fullkey
                                                            }
                                                        ]
                                                    }
                                                    else{
                                                        var selection_name = q['ShowIf'][q['ParentKey']];
                                                        temp_schema_properties_question[index]['childField'] = {};
                                                        titlemap.unshift({
                                                            value: "all",
                                                            name: "All"
                                                        });
                                                        temp_schema_properties_question[index]['childField'][selection_name] = {
                                                            'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                            'order': q.Order,
                                                            'fullkey': fullkey,
                                                            'key': m,
                                                            'placeholder': $translate.instant(q.Placeholder),
                                                            'titleMap': titlemap
                                                        };
                                                        temp_schema_properties_question[index]['childField'][selection_name]['select'] = [
                                                            {
                                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                                'fullkey': fullkey
                                                            }
                                                        ];
                                                    }
                                                }
                                            })
                                        }
                                        else{
                                            var fullkey = m;

                                            if (question == 'RepeatingQuestions') {
                                                fullkey = key + '____' + m;
                                            }

                                            temp_schema_properties_question.push({
                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                                'type': schema_type[q.Type],
                                                'order': q.Order,
                                                'fullkey': fullkey,
                                                'key': m,
                                                'formtype': form_type[q.Type],
                                                'placeholder': $translate.instant(q.Placeholder),
                                                'titleMap': titlemap
                                            });
                                        }
                                    }
                                } else {
                                    if (q.Type == "repeater" && q.hasOwnProperty('RepeatingQuestions')) {
                                        for (var question1 in tabs[key][question][m]) {
                                            if (tabs[key][question][m].hasOwnProperty(question1) && (question1 == 'Questions' || question1 == 'RepeatingQuestions')) {
                                                var temp_schema_properties = [];
                                                for (var n in tabs[key][question][m][question1]) {
                                                    if (tabs[key][question][m][question1].hasOwnProperty(n)) {
                                                        var q1 = tabs[key][question][m][question1][n];

                                                        var choices = [];
                                                        var titlemap = [];

                                                        if (q1.Type == 'select' || q1.Type == 'multi_select' || q1.Type == 'arrows') {

                                                            for (var key11 in q1.Values) {

                                                                if (q1.Values.hasOwnProperty(key11)) {

                                                                    var choiceMap = getChoiceMap(q1.Values);

                                                                    choices = choiceMap.choices;
                                                                    titlemap = choiceMap.titlemap;

                                                                }
                                                            }
                                                        }

                                                        if (q1.Type == 'gender') {
                                                            titlemap.push({
                                                                value: "Male",
                                                                name: "Male"
                                                            });

                                                            titlemap.push({
                                                                value: "Female",
                                                                name: "Female"
                                                            });
                                                        }

                                                        if (q1.Type == 'radio') {
                                                            titlemap.push({
                                                                value: "Yes",
                                                                name: "Yes"
                                                            });

                                                            titlemap.push({
                                                                value: "No",
                                                                name: "No"
                                                            });
                                                        }


                                                        if (q.Type == 'radio_button') {
                                                            titlemap.push({
                                                                value: "yes",
                                                                name: "Yes"
                                                            });
                                                            titlemap.push({
                                                                value: "no",
                                                                name: "No"
                                                            });

                                                            titlemap.push({
                                                                value: "unknown",
                                                                name: "Unknown"
                                                            });
                                                        }

                                                        if (!q1.hasOwnProperty('ParentKey') || (q1.hasOwnProperty('ParentKey') && tabs[key][question][m][question1].hasOwnProperty(q1['ParentKey']))) {
                                                            if (q1.hasOwnProperty('ParentKey')) {
                                                                if (chosenTypes.indexOf(q1.Type) > -1) {
                                                                    temp_schema_properties.forEach(function (current, index, array) {
                                                                        if (current.key == q['ParentKey']) {
                                                                            if (current.hasOwnProperty('childField')) {
                                                                                titlemap.unshift({
                                                                                    value: "all",
                                                                                    name: "All"
                                                                                });
                                                                                temp_schema_properties[index]['childField'][q['ShowIf'][q['ParentKey']]] = {
                                                                                    'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                    'fullkey': m + '____' + n,
                                                                                    'key': n,
                                                                                    'placeholder': $translate.instant(q1.Placeholder),
                                                                                    'titleMap': titlemap
                                                                                };
                                                                                temp_schema_properties[index]['childField'][q1['ShowIf'][q1['ParentKey']]]['select'] = [
                                                                                    {
                                                                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                        'fullkey': fullkey
                                                                                    }
                                                                                ]
                                                                            }
                                                                            else {
                                                                                var selection_name = q1['ShowIf'][q1['ParentKey']];
                                                                                temp_schema_properties[index]['childField'] = {};
                                                                                titlemap.unshift({
                                                                                    value: "all",
                                                                                    name: "All"
                                                                                });
                                                                                temp_schema_properties[index]['childField'][selection_name] = {
                                                                                    'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                    'fullkey': m + '____' + n,
                                                                                    'key': n,
                                                                                    'placeholder': $translate.instant(q1.Placeholder),
                                                                                    'titleMap': titlemap
                                                                                };
                                                                                temp_schema_properties[index]['childField'][selection_name]['select'] = [
                                                                                    {
                                                                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                                        'fullkey': fullkey
                                                                                    }
                                                                                ]

                                                                            }
                                                                        }
                                                                    })
                                                                }
                                                            }
                                                            else {
                                                                if (chosenTypes.indexOf(q1.Type) > -1) {
                                                                    temp_schema_properties.push({
                                                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                        'type': schema_type[q1.Type],
                                                                        'order': q1.Order,
                                                                        'fullkey': m + '____' + n ,
                                                                        'key': n,
                                                                        'formtype': form_type[q1.Type],
                                                                        'placeholder': $translate.instant(q1.Placeholder),
                                                                        'titleMap': titlemap
                                                                    });
                                                                }
                                                            }


                                                            //if(!q1.hasOwnProperty('ParentKey') || (q1.hasOwnProperty('ParentKey') && tabs[key][question][m][question1].hasOwnProperty(q1['ParentKey']))) {
                                                            //    if(q1.hasOwnProperty('ParentKey')){
                                                            //        if (chosenTypes.indexOf(q1.Type) > -1) {
                                                            //        }
                                                            //    }
                                                            //    else{
                                                            //        if (chosenTypes.indexOf(q1.Type) > -1) {
                                                            //            temp_schema_properties.push({
                                                            //                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                            //                'type': schema_type[q1.Type],
                                                            //                'order': q1.Order,
                                                            //                'fullkey': m + '____' + n,
                                                            //                'key': n,
                                                            //                'formtype': form_type[q1.Type],
                                                            //                'placeholder': $translate.instant(q1.Placeholder),
                                                            //                'titleMap': titlemap
                                                            //            });
                                                            //        }
                                                            //    }
                                                            //}
                                                        }
                                                    }
                                                }
                                                $scope.schema.properties = $scope.schema.properties.concat(temp_schema_properties);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        $scope.schema.properties = $scope.schema.properties.concat(temp_schema_properties_question);
                    }
                }
            }
        }

        $scope.model = {
            filters: [
                {}
            ]
        };

        $scope.onSubmit = function (form) {
            $log.log($scope.model);

            $scope.list.get();
        };

        $scope.onReset = function () {
            $scope.model.filters = [
                {}
            ];
        };

        $scope.onDownload = function (form) {
            var start_time = toUTC(moment($scope.list.range.dateFrom).format('YYYY-MM-DD 00:00:00'));
            var end_time = toUTC(moment($scope.list.range.dateTo).format('YYYY-MM-DD 23:59:59'));
            IncidentService.fetchReport(start_time, end_time, $scope.list.itemsPerPage, $scope.list.currentPage, $scope.model.filters, resort_id, 'csv').then(
                function (data) {
                    $log.log(data);

                    var anchor = angular.element('<a/>');
                    anchor.attr({
                        href: 'data:attachment/csv;charset=utf-8,' + encodeURI(data),
                        target: '_blank',
                        download: 'report.csv'
                    })[0].click();
                }
            );

        };

//        function lazyLoadExportData() {
//            var deferred = $q.defer();
//
//            IncidentService.fetchReport($scope.model.dateFrom, $scope.model.dateTo, tz.name(), $scope.model)
//                .then(function (data) {
//                    $log.log(data);
//
//                    deferred.resolve(
//                        data.map(function (incident) {
//                            return {
//                                id: incident.id,
//                                datetime: incident.datetime,
//                                casualty: incident.casualty,
//                                injury: incident.injury,
//                                type: incident.type,
//                                activity: incident.activity,
//                                status: incident.status
//                            };
//                        })
//                    );
//
//                }, function (errorData) {
//                    deferred.reject(errorData);
//                });
//
//
//            return deferred.promise;
//        }


        $scope.addField = function (filters) {
            filters.push({});
        };

        $scope.removeField = function (index) {
            $scope.model.filters.splice(index, 1);
        };

        $scope.list = {
            range: DateRangeService.range,
            incidents: [],
            currentPage: 1,
            itemsPerPage: 20,
            filteredItems: 0,
            totalItems: 0,
            totalPages: 0,
            predicate: 'dt_created',
            loading: false,
            success: true,
            error: '',

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;
            },

            get: function () {
                $log.log('fetching incidents...');
                $scope.list.loading = true;

                var start_time = toUTC(moment($scope.list.range.dateFrom).format('YYYY-MM-DD 00:00:00'));
                var end_time = toUTC(moment($scope.list.range.dateTo).format('YYYY-MM-DD 23:59:59'));

                IncidentService.fetchReport(start_time, end_time, $scope.list.itemsPerPage, $scope.list.currentPage, $scope.model.filters, resort_id, 'json').then(
                    function (data) {
                        $log.log(data);

                        $scope.list.loading = false;

                        angular.forEach(data.results, function(elem, index) {
                            data.results[index]['dt_created'] = moment(elem['dt_created'], 'YYYY-MM-DD HH:mm:ss').format($scope.datetime_format);
                        });

                        $scope.list.incidents = data.results;
                        $scope.list.filteredItems = ($scope.list.incidents == null) ? 0 : $scope.list.incidents.length; //Initially for no filter
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                        $scope.list.sort_by('dt_created');
                        $scope.list.reverse = true;

                    }, function (reason) {
                        growl.error(reason.detail);

                        $scope.list.incidents = [];
                        $scope.list.success = false;
                        $scope.list.error = reason.detail;
                        $scope.list.loading = false;
                    });
            },

            print: function (id) {
                $log.log('printing incident ' + id);

                if (id !== null || id !== undefined) {
                    IncidentService.print(id)
                        .then(function (data) {
//                            $log.log(data.data.URL);
                            $window.open(data.data.URL, '_blank', '');

                        }, function (error) {
                            $scope.error = error;
                        });
                }

            }
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.report = {
            label: "",
            global: 0,
            config: {
                url: {},
                body: {}
            }
        };

        $scope.getReport = function (id) {
            ReportService.fetch(id).then(function (data) {
                $log.log(data);

                growl.success("report_fetched_successfully");

                $scope.report = data;
                $scope.report.global = $scope.report.global > 0;
                $scope.list.range.dateFrom = toLocalTime($scope.report.config.url.datefrom);
                $scope.list.range.dateTo = toLocalTime($scope.report.config.url.dateto);

                $scope.model.filters = $scope.report.config.body;

                $scope.list.get();

            }, function (error) {
                $scope.error = error;
                growl.error(error);
            });
        };

        $scope.createReport = function () {
            var start_time = toUTC(moment($scope.list.range.dateFrom).format('YYYY-MM-DD 00:00:00'));
            var end_time = toUTC(moment($scope.list.range.dateTo).format('YYYY-MM-DD 23:59:59'));

            var report = angular.copy($scope.report);
            report.global = $scope.report.global ? 1 : 0;
            report.config = {
                url: {
                    "datefrom": start_time,
                    "dateto": end_time
                },
                body: $scope.model.filters
            };

            if ($scope.id != null) {
                ReportService.update($scope.id, report).then(function (data) {
                    $log.log(data);
                    growl.success("report_updated_successfully");

                    $rootScope.$broadcast('reports-updated');

                }, function (error) {
                    $scope.error = error;
                    growl.error(error);
                });
            } else {
                ReportService.create(report).then(function (data) {
                    $log.log(data);
                    growl.success("report_created_successfully");

                    $rootScope.$broadcast('reports-updated');

                }, function (error) {
                    $scope.error = error;
                    growl.error(error);
                });
            }
        };

        if ($scope.id != null) {
            $scope.getReport($scope.id);
        }

    }]);

angular.module('app.services')
    .service('AnalyticsService', ['$http', '$q', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $log, LS, CONFIG, ApiService) {


        var API = {
            base: CONFIG.API_URL + '/analytics',
            getUrl: function (id) {
                return '/' + id;
            }
        };

        var REPORT_API = {
            base: CONFIG.API_URL + '/reports'
        };


        var service = {
            fetchSex: function (dateFrom, dateTo, resort_id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + '/gender', {
                    params: {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchActivity: function (dateFrom, dateTo, resort_id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + '/activity', {
                    params: {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchInjury: function (dateFrom, dateTo, resort_id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + '/injury_types', {
                    params: {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchReferred: function (dateFrom, dateTo, resort_id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + '/referred_to', {
                    params: {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchAge: function (dateFrom, dateTo, resort_id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + '/age', {
                    params: {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchAlcohol: function (dateFrom, dateTo, resort_id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + '/alcohol', {
                    params: {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchPatrollers: function (dateFrom, dateTo) {
                var d = $q.defer();

                $http.get(ApiService.base() + REPORT_API.base + '/patrollers/', {
                    params: {
                        output_format: 'json',
                        datefrom: dateFrom,
                        dateto: dateTo,
                        offset: 0,
                        chunk: 20,
                        order_by: "name",
                        order_by_direction: "asc"
                    }
                })
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            }


        };

        return service;
    }]);

angular.module('app.services')
    .service('ReportService', ['$http', '$q', '$log', 'UserService', 'LS',  'CONFIG', 'ApiService', function ($http, $q, $log, UserService, LS, CONFIG, ApiService) {

        var API = {
            base:  CONFIG.API_URL + '/reports/',
            getUrl: function (id) {
                return '/' + id;
            }
        };

        return {
            fetchAll: function (dateFrom, dateTo, resort_id, chunk, page) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base)
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchPatrollers: function (params) {
                var d = $q.defer();
                var query = [];
                for(var key in params){
                    if (params.hasOwnProperty(key))
                        query.push(key + '=' + params[key]);
                }
                $http.get(ApiService.base() + API.base + 'patrollers/?' + query.join('&'))
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            create: function (data) {
                var params = data || {};

                var d = $q.defer();

                $http.post(ApiService.base() + API.base, params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            update: function (id, data) {

                var params = data || {};

                var d = $q.defer();

                $http.put(ApiService.base() + API.base + id + '/', params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            }
        };
    }]);



'use strict';


angular.module('app')
    .controller('AreaAddCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "AreaService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AreaService, currentUser, growl) {
        $scope.addArea = function () {
            growl.info("ADD_AREA");

            AreaService.add($scope.area_name).then(function (data) {
                    growl.success("area_created_successfully");
                    $state.go("areas");
                },
                function (error) {
                    growl.info(error.detail);

                    //Global errors
                    //if (error.hasOwnProperty('detail')) {
                    //    $scope.error = error.detail;
                    //    $scope.form.$setPristine();
                    //    growl.error(error.detail);
                    //}
                    //
                    //$scope.errors = [];
                    //angular.forEach(error, function (errors, field) {
                    //
                    //    if (field == 'non_field_errors') {
                    //        // Global errors
                    //        $scope.error = errors.join(', ');
                    //        $scope.form.$setPristine();
                    //    } else {
                    //        //Field level errors
                    //        $scope.form[field].$setValidity('backend', false);
                    //        $scope.form[field].$dirty = true;
                    //        $scope.errors[field] = errors.join(', ');
                    //    }
                    //});
                });
        };
    }]);

'use strict';


angular.module('app')
    .controller('AreaEditCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "AreaService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AreaService, currentUser, growl) {
        var id = $stateParams.areaId;

        $scope.get = function () {
            if (id) {
                growl.info("LOADING_AREA");
                AreaService.fetch(id).then(function (data) {
                        $scope.area = data;
                    },
                    function (error) {
                        growl.info(error.detail);
                    }
                );
            }
        };

        $scope.updateArea = function () {
            if (id) {
                growl.info("UPDATE_AREA");
                AreaService.update(id, $scope.area.area_name).then(function (data) {
//                        $log.log(data);
                        growl.success("area_updated_successfully");
                    },
                    function (error) {
                        growl.info(error.detail);
                    });
            }
        };

    }]);

'use strict';


angular.module('app')
    .controller('AreaListCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'AreaService', 'currentUser', 'growl', '$uimodal', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AreaService, currentUser, growl, $modal) {

        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'area_name',
            loading: false,

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_AREA");
                AreaService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '', $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            archive: function(area_id) {
                console.log("removing");

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/areas/templates/confirm.html',
                    controller: 'ConfirmModalCtrl',
                    size: 'md'
                });

                modalInstance.result.then(function () {
                    AreaService.remove(area_id).then(function (response) {
                        $scope.list.get();
                    }, function (error) {
                        growl.error(error.detail);
                    });

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_AREA");

                AreaService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            }
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );
    }]);

angular.module('app.services')
    .service('AreaService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'area_name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/areas/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search:text,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            update: function (id, name) {
                var d = $q.defer();

                var params = {
                    'area_name': name
                };

                $http.put(ApiService.base() + CONFIG.API_URL + '/areas/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            add: function (name) {
                var d = $q.defer();
                var params = {
                    'area_name': name
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/areas/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },


            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/areas/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            remove: function (id) {
                var d = $q.defer();

                var params = {
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/areas/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        return service;
    }]);



'use strict';


angular.module('app')
    .controller('AssetAddCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "AssetService", "currentUser", "assetTypes", "areas", "locations", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AssetService, currentUser, assetTypes, areas, locations, growl) {

        $scope.assetTypes = assetTypes.results;
        $scope.asset_type_id = $scope.assetTypes[0].asset_type_id;

        $scope.areas = areas.results;
        $scope.area_id = $scope.areas[0].area_id;

        var allLocations = locations.results;

        refreshLocations($scope.area_id);

        function refreshLocations(area_id) {
            $scope.locations = _.filter(allLocations, function (location) {
                return location.area.area_id == area_id;
            });

            var location = _.find(allLocations, function (location) {
                return location.area.area_id == $scope.area_id;
            });

            if (location) {
                $scope.location_id = location.location_id;
            }else{
                $scope.location_id = null;
            }
        }

        $scope.$watch('area_id', function (newValue, oldValue) {
            if (newValue && newValue != oldValue) {
                refreshLocations($scope.area_id);
            }
        });

        $scope.add = function () {
            growl.info("ADD_ASSET");

            AssetService.add($scope.asset_name, $scope.asset_type_id, $scope.area_id, $scope.location_id).then(function (data) {
                    growl.success("asset_created_successfully");
                    $state.go("assets");
                },
                function (error) {
                    growl.info(error.detail);

                    //Global errors
                    //if (error.hasOwnProperty('detail')) {
                    //    $scope.error = error.detail;
                    //    $scope.form.$setPristine();
                    //    growl.error(error.detail);
                    //}
                    //
                    //$scope.errors = [];
                    //angular.forEach(error, function (errors, field) {
                    //
                    //    if (field == 'non_field_errors') {
                    //        // Global errors
                    //        $scope.error = errors.join(', ');
                    //        $scope.form.$setPristine();
                    //    } else {
                    //        //Field level errors
                    //        $scope.form[field].$setValidity('backend', false);
                    //        $scope.form[field].$dirty = true;
                    //        $scope.errors[field] = errors.join(', ');
                    //    }
                    //});
                });
        };
    }]);

'use strict';


angular.module('app')
    .controller('AssetEditCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "AssetService", "currentUser", "assetTypes", "areas", "locations", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AssetService, currentUser, assetTypes, areas, locations, growl) {
        var id = $stateParams.assetId;

        $scope.assetTypes = assetTypes.results;
        //$scope.asset_type_id = $scope.assetTypes[0].asset_type_id;

        $scope.areas = areas.results;
        //$scope.area_id = $scope.areas[0].area_id;

        var allLocations = locations.results;

        function refreshLocations(area_id, location_id) {
            $scope.locations = _.filter(allLocations, function (location) {
                return location.area.area_id == area_id;
            });

            var location = _.find(allLocations, function (location) {
                return location.area.area_id == $scope.area_id;
            });

            if(location_id){
                $scope.asset.location_id = location_id;
            }else {
                if (location) {
                    $scope.asset.location_id = location.location_id;
                } else {
                    $scope.asset.location_id = null;
                }
            }
        }

        $scope.$watch('asset.area_id', function (newValue, oldValue) {
            if (newValue && newValue != oldValue) {
                refreshLocations(newValue, $scope.asset.location_id);
            }
        });

        $scope.get = function () {
            if (id) {
                growl.info("LOADING_ASSET");
                AssetService.fetch(id).then(function (data) {
                        $scope.asset = data;

                        if($scope.asset.asset_type) {
                            $scope.asset.asset_type_id = data.asset_type.asset_type_id;
                        }

                        if($scope.asset.location) {
                            $scope.asset.area_id = data.location.area.area_id;
                            $scope.asset.location_id = data.location.location_id;

                            refreshLocations($scope.asset.area_id, $scope.asset.location_id);
                        }
                    },
                    function (error) {
                        growl.info(error.detail);
                    }
                );
            }
        };

        $scope.update = function () {
            if (id) {
                growl.info("UPDATE_ASSET");
                AssetService.update(id, $scope.asset.asset_name, $scope.asset.asset_type_id, $scope.asset.location_id).then(function (data) {
//                        $log.log(data);
                        growl.success("asset_updated_successfully");
                    },
                    function (error) {
                        growl.info(error.detail);
                    });
            }
        };

    }]);

'use strict';


angular.module('app')
    .controller('AssetListCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'AssetService', 'currentUser', 'growl', '$uimodal', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AssetService, currentUser, growl, $modal) {

        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'asset_name',
            loading: false,

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_ASSET");
                AssetService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '', $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_ASSET");

                AssetService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            archive: function(id) {
                console.log("removing");

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/assets/templates/confirm.html',
                    controller: 'ConfirmModalCtrl',
                    size: 'md'
                });

                modalInstance.result.then(function () {
                    AssetService.remove(id).then(function (response) {
                        $scope.list.get();
                    }, function (error) {
                        growl.error(error.detail);
                    });

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            }
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );
    }]);

angular.module('app.services')
    .service('AssetTypeService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'asset_type_name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/assets/types/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search:text,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            update: function (id, name) {
                var d = $q.defer();

                var params = {
                    'asset_type_name': name
                };

                $http.put(ApiService.base() + CONFIG.API_URL + '/assets/types/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            add: function (name) {
                var d = $q.defer();
                var params = {
                    'asset_type_name': name
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/assets/types/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },


            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/assets/types/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            remove: function (id) {
                var d = $q.defer();

                var params = {
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/assets/types/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        return service;
    }]);



angular.module('app.services')
    .service('AssetService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'asset_name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/assets/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search:text,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            update: function (id, name, asset_type_id, location_id) {
                var d = $q.defer();

                var params = {
                    'asset_name': name,
                    'asset_type_id': asset_type_id,
                    'location_id': location_id
                };

                $http.put(ApiService.base() + CONFIG.API_URL + '/assets/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            add: function (name, asset_type_id, area_id, location_id) {
                var d = $q.defer();
                var params = {
                    'asset_name': name,
                    'asset_type_id': asset_type_id,
                    'location_id': location_id
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/assets/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },


            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/assets/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            remove: function (id, first_name, last_name, email) {
                var d = $q.defer();

                var params = {
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/assets/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        return service;
    }]);



'use strict';


angular.module('app')
    .controller('AuditLogListCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'AuditLogService', 'currentUser', 'growl', '$uimodal', 'DateRangeService', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, AuditLogService, currentUser, growl, $modal, DateRangeService) {

        var current = new Date();
        var tz = jstz.determine();

        function toUTC(value) {
            return moment.tz(value, 'YYYY-MM-DD HH:mm:ss', tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format('YYYY-MM-DD HH:mm:ss');
        }

        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'dt_added',
            loading: false,
            dateFrom: moment(DateRangeService.range.dateFrom).format('YYYY-MM-DD'),
            dateTo: moment(DateRangeService.range.dateTo).format('YYYY-MM-DD'),

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_AREA");

                var start_time = toUTC(moment($scope.list.dateFrom).format('YYYY-MM-DD 00:00:00'));
                var end_time = toUTC(moment($scope.list.dateTo).format('YYYY-MM-DD 23:59:59'));

                AuditLogService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '', $scope.list.predicate, $scope.list.reverse, start_time, end_time)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_AREA");

                AuditLogService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            archive: function(areaId) {
                console.log("removing");

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/areas/templates/confirm.html',
                    controller: 'ConfirmModalCtrl',
                    size: 'md'
                });

                modalInstance.result.then(function () {
                    AuditLogService.remove(areaId).then(function (response) {
                        $scope.list.get();
                    }, function (error) {
                        growl.error(error.detail);
                    });

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            }
        };

        $scope.$watch(
            'list.dateFrom',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.dateTo',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );
    }]);

angular.module('app.services')
    .service('AuditLogService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, predicate, direction, date_from, date_to) {
                var d = $q.defer();

                predicate = predicate || 'dt_added';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/controlled_substances/auditlog/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search: text,
                            order_by: predicate,
                            order_by_direction: direction ? 'desc' : 'asc',
                            date_from: date_from,
                            date_to: date_to
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            //update: function (id, name) {
            //    var d = $q.defer();
            //
            //    var params = {
            //        'area_name': name
            //    };
            //
            //    $http.put(ApiService.base() + CONFIG.API_URL + '/areas/' + id + '/', params)
            //        .success(function (response, status, headers) {
            //            d.resolve(response.data);
            //        })
            //        .error(function (response, status, headers, config, errors) {
            //            d.reject(response);
            //        });
            //
            //    return d.promise;
            //},
            //
            //add: function (name) {
            //    var d = $q.defer();
            //    var params = {
            //        'area_name': name
            //    };
            //
            //    $http.post(ApiService.base() + CONFIG.API_URL + '/areas/', params)
            //        .success(function (response, status, headers) {
            //            d.resolve(response.data);
            //        })
            //        .error(function (response, status, headers, config, errors) {
            //            d.reject(response);
            //        });
            //
            //    return d.promise;
            //},
            //
            //
            //fetch: function (id) {
            //    var d = $q.defer();
            //
            //    $http.get(ApiService.base() + CONFIG.API_URL + '/areas/' + id + '/')
            //        .success(function (response, status, headers) {
            //            d.resolve(response);
            //        })
            //        .error(function (response, status, headers, config, errors) {
            //            d.reject(response);
            //        });
            //
            //    return d.promise;
            //},
            //
            //remove: function (id) {
            //    var d = $q.defer();
            //
            //    var params = {
            //    };
            //
            //    $http.delete(ApiService.base() + CONFIG.API_URL + '/areas/' + id + '/', params)
            //        .success(function (response, status, headers) {
            //            d.resolve(response.data);
            //        })
            //        .error(function (response, status, headers, config, errors) {
            //            d.reject(response);
            //        });
            //
            //    return d.promise;
            //}
        };

        return service;
    }]);



'use strict';

angular.module('app')
    .controller('AuthCtrl', ['$scope', '$location', '$state', '$timeout', '$rootScope', '$log', 'UserService', 'LS', 'CONFIG', '$http', 'ApiService', function ($scope, $location, $state, $timeout, $rootScope, $log, UserService, LS, CONFIG, $http, ApiService) {

        $scope.form = {
            errors: null
        };

        var ENV_MAPPING = {
            'X': '-',
            'Y': '-dev-',
            'Z': '-staging-'
        };

        var COUNTRY_MAPPING = {
            1: 'us',
            2: 'au',
            3: 'ca'
        };

        if ($location.path().split('/')[2] == "reset") {
            var token = $location.search().token;
            if (token) {
                $scope.message = "";
                var server_id = token.split('-')[3];
                $scope.uid = token.split('-')[0];
                $scope.token = token.split('-')[1] + "-" + token.split('-')[2];
                $scope.url = "https://api" + ENV_MAPPING[server_id[0]] + COUNTRY_MAPPING[server_id[1]] + ".medic52.com/reset/" + $scope.uid + "/" + $scope.token + "/";
            }
            else {
                $state.transitionTo('login');
            }
        }

        $scope.init = function () {
            var email = '';
            var remember_me = false;

            if (LS.get('remember_me') == 'true') {
                email = LS.get('user_email');
                remember_me = true;
            }

            $scope.user = {
                email: email,
                password: '',
                remember_me: remember_me
            };
        };

        $scope.login = function () {
            if (UserService.is_authenticated) {

                //Transition to List incident if patroller else go to map
                if (UserService.currentRole() == "Patroller") {
                    $state.transitionTo('incidents');
                }
                else {
                    $state.transitionTo('map');
                }


            } else {

                LS.set('remember_me', $scope.user.remember_me);

                if ($scope.user.remember_me == true) {
                    LS.set('user_email', $scope.user.email);
                }
                else {
                    LS.set('user_email', '');
                }

                UserService.discover($scope.user.email)
                    .then(function (response) {

                        UserService.login($scope.user.email, $scope.user.password)
                            .then(function (data) {

                                $http({
                                    method: 'GET',
                                    url: ApiService.laravel() +
                                        '/laracors?authorization=' + data.user.token +
                                        '&token=' + LS.get('token'),
                                    data: {
                                        authorization: data.user.token,
                                        token: LS.get('token')
                                    }
                                });
                                $log.log(data.user.role);

                                //Transition to List incident if patroller else go to map
                                if (data.user.role == "Patroller") {
                                    $state.transitionTo('incidents');
                                }
                                else {
                                    $state.transitionTo('map');
                                }

                            }, function (error) {
                                $scope.form.errors = error.detail;
                                $scope.init();
                            });
                    });
            }
        };

        $scope.show_forgot_password = function () {
            $state.transitionTo('password_forgot');
        };

        $scope.send_reset_password = function () {

            if ($scope.user.email) {
                UserService.forgotPassword($scope.user.email)
                    .then(function (data) {
//                        $log.log(data);
                        $scope.form.success = data.detail;
                        //$state.transitionTo('login');
                    }, function (error) {
                        $scope.form.errors = error.detail;

                        $scope.init();
                    });
            }

        };

        $scope.submit = function () {

            if ($scope.password1 != $scope.password2) {
                $scope.message = "Password and repeat password do not match";
                $scope.password1 = "";
                $scope.password2 = "";
            }
            else {
                $http({
                    method: 'POST',
                    url: $scope.url,
                    data: $.param({"new_password1": $scope.password1, "new_password2": $scope.password2}),  // pass in data as strings
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
                })
                    .success(function (data) {
                        $scope.message = "Password Reset Successful. You can now login";
                        $scope.password1 = "";
                        $scope.password2 = "";
                        $timeout(function () {
                            $state.transitionTo('login');
                        }, 3000);
                    }).error(function (data) {
                        $scope.message = "Password reset link has expired (or) invalid";
                        $scope.password1 = "";
                        $scope.password2 = "";
                    });
            }
        };

    }]);



'use strict';

angular.module('app')
    .controller('HeaderCtrl', ["$scope", "$location", "$state", "$log", "$sce", "$intercom", "hotkeys", "UserService", "LS", "ReportService", function ($scope, $location, $state, $log, $sce, $intercom, hotkeys, UserService, LS, ReportService) {
        //state-title mapping

        var states = {
            dashboard: 'Dashboard',

            map: 'Map',
            heatmap: 'Heatmap',
            patrollers_report: 'Patrollers',
            incidents: 'Incidents',
            incident_edit: 'Incidents',

            users: 'Users',
            user_edit: 'Users',
            user_add: 'Users',
            reporting: 'Reports',
            charts: 'Charts'
        };
        var laravelHost = LS.get('LARAVEL_CORS');
        var access_token = LS.get('Authorization') && LS.get('Authorization').split(' ').length > 1?
            LS.get('Authorization').split(' ')[1] : ''
        var query = '?authorization=' + LS.get('token').split(' ')[1] + '&bearer=' + access_token;
        var laravel = {
            home: laravelHost + query,
            due_today: laravelHost + '/assets/due-today' + query,
            assets: laravelHost + '/assets' + query,
            controlled_substances: laravelHost + '/controlled-substances' + query,
            areas: laravelHost + '/areas' + query,
            locations: laravelHost + '/locations' + query,
        };
        $scope.goTo = function(route){
            console.log(laravel[route]);
            window.location = laravel[route];
        };
//        $scope.$watch('online', function(isOnline) {
//            $log.log(isOnline);
//
//            if(!isOnline){
//                growl.info('we_are_trying_to_connect');
//            }
//        });

        $scope.page_title = states[$state.current.name];
        $scope.currentUser = UserService.currentUser();
        $scope.roles = ['', 'Patroller', 'Dispatcher', 'Manager'];
        $scope.currentUser.role = $scope.roles[$scope.currentUser.role_id[0].value];
        $scope.currentUser.role_id.forEach(function (entry) {
            if (entry.value == 3) {
                $scope.currentUser.isManager = true;
            }
        });

        $scope.resort_logo = $sce.trustAsResourceUrl($scope.currentUser.resorts[0].resort_logo);
//        $log.log(currentUser);

        $scope.menu = [
//            {
//                'title': 'Home',
//                'link': '/'
//            }
        ];

        $scope.isCollapsed = true;

        $scope.isActive = function (route) {
            return route === $location.path();
        };

        $scope.isDesktop = (window.screen.width >= 992 );
        $scope.isPhone = (window.screen.width <= 992);

        $scope.logout = function () {
            $intercom.shutdown();
            UserService.logout(0)
                .then(function (data) {
                    LS.clear();
                    $state.transitionTo('login');
                }, function (error) {
                    $log.log(error);
                });
        };


        $intercom.boot({
            email: $scope.currentUser.email,
            name: $scope.currentUser.name,
            created_at: new Date(),
            user_id: $scope.currentUser.user_id,
            company: {
                id: $scope.currentUser.resorts[0].resort_id,
                name: $scope.currentUser.resorts[0].resort_name
            },
            role: $scope.currentUser.role_id[0].key,
            custom_launcher_selector: ".intercom-icon"
        });

        $scope.intercom_toggle = function () {
            $intercom.show();
//             if ($scope.intercom_open == undefined || $scope.intercom_open == null || !$scope.intercom_open) {
//
//             } else {
//                 $intercom.hide();
//             }
        };

        $scope.$on('reports-updated', function (event, args) {
            getReports();
        });

        getReports();

        function getReports() {
            ReportService.fetchAll().then(function (data) {
                $scope.reports = _.filter(data.results, function (result) {
                    return result.type == null;
                });
                $scope.charts = _.filter(data.results, function (result) {
                    return result.type != null;
                });
            }, function (error) {
                $log.log(error);
            });
        }

    }]);

angular.module('app.services')
    .service('ApiService', ['$http', '$q', '$window', '$log', 'LS', 'CONFIG', function ($http, $q, $window, $log, LS, CONFIG) {

        var service = {

            base: function () {

                var api_base = LS.get('API', '');

                if (!api_base) {
                    api_base = CONFIG.BASE_URL;
                }
                return api_base;
            },
            laravel: function(){
                var laravel_base = LS.get('LARAVEL_CORS', '');

                if (laravel_base == null || laravel_base == '') {
                    laravel_base = CONFIG.LARAVEL_URL;
                }

                return laravel_base;
            }


        };

        return service;
    }]);



angular.module('app.services')
    .service('DateRangeService', ['$http', '$q', 'UserService', function ($http, $q, UserService) {
        var current = new Date();
        var tz = jstz.determine();

        var datetime_format = UserService.currentUser().resorts[0].datetime_format.key;

        function toUTC(value) {
            return moment.tz(value, datetime_format, tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format(datetime_format);
        }

        var diff = new Date(current.getTime() - (7 * 24 * 60 * 60 * 1000));

        var start = moment(diff); // + 'T00:00:00.000Z';
        var end = moment(current);//.tz(tz.name()).format('YYYY-MM-DD')+ 'T23:59:59.999Z';

        var range = {
            dateFrom: start,
            dateTo: end
        };

        var service = {

            setStart: function (date) {
                range.dateFrom = date;
            },

            setEnd: function (date) {
                range.dateTo = date;
            },

            getStart: function (date) {
                return range.dateFrom;
            },

            getEnd: function (date) {
                return range.dateTo;
            },

            range: range
        };

        return service;
    }]);


angular.module('app').factory('langLoader', ["$http", "$q", "ApiService", "CONFIG", "LS", function ($http, $q, ApiService, CONFIG, LS) {
    return function (options) {
        var deferred = $q.defer();

        var data = LS.get(options.key, false);

        if (data) {
            data = JSON.parse(data);
            LS.set(options.key, JSON.stringify(data));

            deferred.resolve(data);
        } else {
            $http.get(ApiService.base() + CONFIG.API_URL + '/language/', {
                params: {
                    lang: options.key
                }
            })
                .success(function (data) {
                    LS.set(options.key, JSON.stringify(data));

                    deferred.resolve(data);
                }).error(function () {
                    deferred.reject(options.key);
                });
        }


        return deferred.promise;
    }
}]);
angular.module('app').factory("LS", ["$window", "$rootScope", function ($window, $rootScope) {
    angular.element($window).on('storage', function (event) {
        if (event.key === 'use') {
            $rootScope.$apply();
        }
    });
    return {
        set: function (key, val) {
            $window.localStorage && $window.localStorage.setItem(key, val);
            return this;
        },
        get: function (key) {
            return $window.localStorage && $window.localStorage.getItem(key);
        },
        clear: function() {
            $window.localStorage.clear();
            return true
        }
    };
}]);
'use strict';


angular.module('app')
    .controller('ControlledSubstanceAddCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "ControlledSubstanceService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, ControlledSubstanceService, currentUser, growl) {
        $scope.add = function () {
            growl.info("ADD_CONTROLLED_SUBSTANCE");

            ControlledSubstanceService.add($scope.controlled_substance_name, $scope.units).then(function (data) {
                    growl.success("controlled_substance_created_successfully");
                    $state.go("controlled_substances");
                },
                function (error) {
                    growl.info(error.detail);

                    //Global errors
                    //if (error.hasOwnProperty('detail')) {
                    //    $scope.error = error.detail;
                    //    $scope.form.$setPristine();
                    //    growl.error(error.detail);
                    //}
                    //
                    //$scope.errors = [];
                    //angular.forEach(error, function (errors, field) {
                    //
                    //    if (field == 'non_field_errors') {
                    //        // Global errors
                    //        $scope.error = errors.join(', ');
                    //        $scope.form.$setPristine();
                    //    } else {
                    //        //Field level errors
                    //        $scope.form[field].$setValidity('backend', false);
                    //        $scope.form[field].$dirty = true;
                    //        $scope.errors[field] = errors.join(', ');
                    //    }
                    //});
                });
        };
    }]);

'use strict';


angular.module('app')
    .controller('ControlledSubstanceEditCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "ControlledSubstanceService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, ControlledSubstanceService, currentUser, growl) {
        var id = $stateParams.controlledSubstanceId;

        $scope.get = function () {
            if (id) {
                growl.info("LOADING_CONTROLLED_SUBSTANCE");

                ControlledSubstanceService.fetch(id).then(function (data) {
                        $scope.controlled_substance = data;
                    },
                    function (error) {
                        growl.info(error.detail);
                    }
                );
            }
        };

        $scope.update = function () {
            if (id) {
                growl.info("UPDATE_CONTROLLED_SUBSTANCE");
                ControlledSubstanceService.update(
                    id, $scope.controlled_substance.controlled_substance_name, $scope.controlled_substance.units)
                    .then(function (data) {
//                        $log.log(data);
                        growl.success("controlled_substance_updated_successfully");
                    },
                    function (error) {
                        growl.info(error.detail);
                    });
            }
        };

    }]);

'use strict';


angular.module('app')
    .controller('ControlledSubstanceListCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'ControlledSubstanceService', 'currentUser', 'growl', '$uimodal', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, ControlledSubstanceService, currentUser, growl, $modal) {



        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'controlled_substance_name',
            loading: false,

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_CONTROLLED_SUBSTANCE");
                ControlledSubstanceService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '', $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_CONTROLLED_SUBSTANCE");

                ControlledSubstanceService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            archive: function(controlled_substance_id) {
                console.log("removing");

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/controlled_substances/templates/confirm.html',
                    controller: 'ConfirmModalCtrl',
                    size: 'md'
                });

                modalInstance.result.then(function () {
                    ControlledSubstanceService.remove(controlled_substance_id).then(function (response) {
                        $scope.list.get();
                    }, function (error) {
                        growl.error(error.detail);
                    });

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            }
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );
    }]);

angular.module('app.services')
    .service('ControlledSubstanceService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'controlled_substance_name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/controlled_substances/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search:text,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/controlled_substances/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            add: function (name, units) {
                var d = $q.defer();
                var params = {
                    'controlled_substance_name': name,
                    'units': units
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/controlled_substances/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            update: function (id, name, units) {
                var d = $q.defer();

                var params = {
                    'controlled_substance_name': name,
                    'units': units
                };

                $http.put(ApiService.base() + CONFIG.API_URL + '/controlled_substances/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            remove: function (id) {
                var d = $q.defer();

                var params = {
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/controlled_substances/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        return service;
    }]);



'use strict';

angular.module('app')
    .controller('ConfirmModalCtrl', ['$scope', '$modalInstance', function ($scope, $modalInstance) {

        $scope.ok = function () {
            $modalInstance.close(true);
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }])
    .controller('IncidentUpdateCtrl',
    ['$scope',
        '$location', '$state', '$rootScope', '$timeout', '$stateParams', '$log', '$filter', 'IncidentService',
        'questions', 'growl', 'UploadService', '$http', '$translate', '$intercom', 'currentUser', '$sce',
        'ApiService', 'CONFIG', 'LS', '$uimodal',
        function ($scope, $location, $state, $rootScope, $timeout, $stateParams, $log, $filter, IncidentService, questions, growl, UploadService, $http, $translate, $intercom, currentUser, $sce, ApiService, CONFIG, LS, $modal) {

            jQuery(':input[type=number]').on('mousewheel', function (e) {
                e.preventDefault();
            });


            $intercom.update({
                email: currentUser.email,
                name: currentUser.name,
                created_at: new Date(),
                user_id: currentUser.user_id,
                company: {
                    id: currentUser.resorts[0].resort_id,
                    name: currentUser.resorts[0].resort_name
                },
                role: currentUser.role_id[0].key,
                dashboard_feature_last_used: "Incidents"
            });

            var id = $stateParams.incidentId;
            var tz = jstz.determine();

            var datetimeFormat = currentUser.resorts[0].datetime_format.key;
            $scope.datetimeFormat = datetimeFormat;
            LS.set('datetimeFormat', datetimeFormat);
            var dateFormat = datetimeFormat.slice(0,10);

            $scope.model = {'dateTimeFormat': datetimeFormat};
            $scope.userRole = currentUser.role;
            $scope.userConnected = currentUser.user_connected.key;

            function setDirty() {
                //$scope.clean = false;
            }

            function setClean() {
                //$scope.clean = true;
                $scope.orig = angular.copy($scope.model);
            }

            function isDirty() {
                var origCopy = angular.copy($scope.orig);
                var newCopy = angular.copy($scope.model);
                removeNulls(origCopy);
                removeNulls(newCopy);

                var difference = diff.getDiff(origCopy, newCopy);

                return !_.isEmpty(difference);

                //return !angular.equals(origCopy, newCopy);
            }

            //var questions = QuestionService.fetch();

            // Pass this function to be used for imagemodal and
            // file plugin to perform upload function.
            var uploadFn = function (formData, type) {
                return UploadService.upload(id, formData, type);
            };

            function toUTC(value) {
                return moment.tz(value, tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
            }

            function formatDate(value) {
                return moment(value).format('YYYY-MM-DD');
            }

            function toLocalTime(value) {
                return moment.utc(value, 'YYYY-MM-DD HH:mm:ss').tz(tz.name()).toDate();
            }

            function toLocalDate(value) {
                return moment(value, 'YYYY-MM-DD').toDate();
            }

            $scope.print = function () {
                $log.log('printing incident ' + id);
                growl.info('PRINTING');

                if (id !== null || id !== undefined) {
                    var xhr = new XMLHttpRequest();

                    xhr.open("GET", ApiService.base() + CONFIG.API_URL + '/incidents/' + id + '/print/?timestamp=' + new Date().getTime(), true);

                    var authorization = LS.get('Authorization');
                    var token = LS.get('token');

                    xhr.setRequestHeader('Authorization', authorization);
                    xhr.setRequestHeader('token', token);

                    // Ask for the result as an ArrayBuffer.
                    xhr.responseType = "arraybuffer";

                    xhr.onload = function (e) {
                        // Obtain a blob: URL for the image data.
                        var arrayBufferView = new Uint8Array(this.response);
                        var blob = new Blob([arrayBufferView], {type: 'application/pdf'});
                        var urlCreator = window.URL || window.webkitURL;
                        var fileURL = urlCreator.createObjectURL(blob);
                        fileURL = $sce.trustAsResourceUrl(fileURL);
                        var downloadfilename = id + ".pdf";

                        var anchor = angular.element('<a/>');
                        anchor.attr({
                            href: fileURL,
                            target: '_blank',
                            download: downloadfilename
                        })[0].click();
                    };

                    xhr.send();
                }
            };

            $scope.schema = {
                type: "object",
                properties: {}
            };

            //$scope.model = {
            //    photos: []
            //};

            // Schema Form type
            // "type": "string"	text
            // "type": "number"	number
            // "type": "integer"	number
            // "type": "boolean"	checkbox
            // "type": "object"	fieldset
            // "type": "string" and a "enum"	select
            // "type": "array" and a "enum" in array type	checkboxes
            // "type": "array"	array

            var schema_type = {
                'email': 'string',
                'text': 'string',
                'textarea': 'string',
                'number': 'number',
                'decimal': 'number',
                'range': 'number',
                'patient_age': 'number',
                'arrows': 'string',
                'select': 'string',
                'multi_select': 'object',
                'radio': 'string',
                'gender': 'string',
                'image': 'string',
                'date_picker': 'object',
                'date_time_picker': 'object',
                'google_map': 'object',
                'file': 'string',
                'hidden': 'hidden',
                'timer': 'hidden',
                'message': 'string',
                'signature': 'string',
                'repeater': 'object',
                'distance': 'number',
                'temperature': 'number',
                'weight': 'number',
                'altitude': 'number',
                'length': 'number',
                'height': 'number',
                'radio_button': 'string'
            };

            // Form Type	Becomes
            // fieldset	a fieldset with legend
            // section	just a div
            // conditional	a section with a ng-if
            // actions	horizontal button list, can only submit and buttons as items
            // text	input with type text
            // textarea	a textarea
            // number	input type number
            // password	input type password
            // checkbox	a checkbox
            // checkboxes	list of checkboxes
            // select	a select (single value)
            // submit	a submit button
            // button	a button
            // radios	radio buttons
            // radios-inline	radio buttons in one line
            // radiobuttons	radio buttons with bootstrap buttons
            // help	insert arbitrary html
            // tab	tabs with content
            // array	a list you can add, remove and reorder
            // tabarray	a tabbed version of array

            var form_type = {
                'email': 'email',
                //'email': 'string',
                'text': 'text',
                'range': 'number',
                'patient_age': 'number',
                'textarea': 'textarea',
                'number': 'number',
                'decimal': 'decimal',
                'arrows': 'select',
                'select': 'select',
                'multi_select': 'multiselect',
                'radio': 'radios-inline',
                'gender': 'radios-inline',
                'radio_button': 'radiobuttons',
                'image': 'image',
                //'message': 'help',
                'date_picker': 'datepicker',
                //'date_picker': 'string',
                'date_time_picker': 'datepicker',
                'google_map': 'googlemap',
                'file': 'file',
                'hidden': 'hidden',
                'timer': 'hidden',
                'message': 'message',
                'signature': 'signature',
                'repeater': 'repeater',
                'distance': 'distance',
                'temperature': 'temperature',
                'weight': 'weight',
                'altitude': 'altitude',
                'length': 'length',
                'height': 'heightsf'
            };

            var getChoiceMap = function (mapValues) {
                var _choices = [],
                    _titlemap = [];

                // Loop and build choices and titlemap
                angular.forEach(mapValues, function (value) {
                    for (var key in value) {
                        //console.log(value[key]);
                        if(key.indexOf("controlled") < 0) {
                            _choices.push({"id": key, "name": $translate.instant(value[key])});
                            _titlemap.push({"value": key, "name": $translate.instant(value[key])});
                        }
                    }
                });

                return {
                    "choices": _choices,
                    "titlemap": _titlemap
                }
            };

            var integers = [];
            var floats = [];
            var selects = [];
            var repeaters = [];

            var datetimes = [];
            var dates = [];

            var errorMap = {};

            var validateNumber = function (modelValue, form, isInteger) {
//                console.log("form is", form);
//                console.log("model is", modelValue);
//                console.log("isInteger ", isInteger);

//                var integer = /^(\-)?\d+$/;
//                var decimal = /^(\-)?\d+(\.\d)?$/;
//
//                if (!isInteger) {
//                    if (modelValue == undefined || !decimal.test(modelValue)) {
//                        var description = 'Invalid decimal value. Decimal value with only 1 decimal point allowed.';
//
//                        $scope.$broadcast('schemaForm.error.'+form.key,'not_valid_decimal', false);
//
//                        growl.error(description);
//                    }
//                } else {
//                    if (modelValue == undefined || !integer.test(modelValue)) {
//                        var description = 'Only integer values allowed';
//
//
////                        $scope.$broadcast('schemaFormValidate');
//                        $scope.$broadcast('schemaForm.error.'+form.key,0, false);
//                        growl.error(description);
//                    }
//                }
            };

            //var identify_variant = function (item, append) {
            //    //if (append == undefined || append == null || append == "") {
            //    //
            //    //} else {
            //    //
            //    //}
            //
            //};

            $scope.has_dob = false;
            $scope.has_age = false;
            var defaults = {};

            var process_tabs = function (tabs) {
                var tab_items = [];

                for (var key in tabs) {
                    if (tabs.hasOwnProperty(key)) {

                        var question_items = [];
                        var repeating_question_items = [];

                        var form_items = [];

                        for (var question in tabs[key]) {
                            // Check if if single schema object
                            if (tabs[key].hasOwnProperty(question)
                                && (question == 'Questions')) {

                                for (var m in tabs[key][question]) {
                                    if (tabs[key][question].hasOwnProperty(m)) {

                                        var q = tabs[key][question][m];

                                        if (q.hasOwnProperty("Default")) {
                                            defaults[m] = tabs[key][question][m]["Default"];
                                        }

                                        var choices = [];
                                        var titlemap = [];

                                        if (m == 'dob') {
                                            $scope.has_dob = true;
                                        }

                                        if (q.Type == 'patient_age') {
                                            $scope.has_age = true;
                                        }

                                        if (q.Type == 'select'
                                            || q.Type == 'arrows'
                                            || q.Type == 'multi_select') {

                                            var choiceMap = getChoiceMap(q.Values);

                                            choices = choiceMap.choices;
                                            titlemap = choiceMap.titlemap;
                                        }

                                        if (q.Type == 'gender') {
                                            titlemap.push({
                                                value: "male",
                                                name: "Male"
                                            });

                                            titlemap.push({
                                                value: "female",
                                                name: "Female"
                                            });
                                        }

                                        if (q.Type == 'radio') {
                                            titlemap.push({
                                                value: "yes",
                                                name: "Yes"
                                            });

                                            titlemap.push({
                                                value: "no",
                                                name: "No"
                                            });
                                        }

                                        if(q.Type == 'radio_button'){
                                            for (var i = 0; i < q.Values.length; i++) {
                                                titlemap.push({
                                                    value: Object.keys(q.Values[i])[0],
                                                    name: q.Values[i][Object.keys(q.Values[i])[0]]
                                                });
                                            }
                                        }

                                        var item = {
                                            'field': m,
                                            'label': $translate.instant(q.Label),
                                            'type': form_type[q.Type],
                                            'required': q.Required,
                                            'placeholder': $translate.instant(q.Placeholder),
                                            'choices': choices,
                                            'order': q.Order,
                                            'fieldAddonRight': q.Append
                                        };

                                        errorMap[m] = $translate.instant(q.Label);

//                                        identify_variant(item, q.Append);

                                        // If type == image, enable image plugin
//                                        if (q.Type == 'image') {
//                                            item['format'] = 'image';
//                                            item['enableUpload'] = true;
//                                            item['enableRemove'] = true;
//                                            item['enableZoom'] = true;
//                                        }


//                                        if (q.Type != 'message') {

                                        var qForm = {
                                            'field': m,
                                            "key": m,
                                            "type": form_type[q.Type],
                                            "placeholder": $translate.instant(q.Placeholder),
                                            "order": q.Order,
                                            "fieldAddonRight": q.Append,
                                            "tab": $translate.instant(tabs[key].Label)
                                        };

                                        //identify_variant(qForm, q.Append);

                                        if (q.hasOwnProperty('ShowIf')) {
                                            var condition = '';
                                            jQuery.each(q.ShowIf, function (key, value) {
                                                condition += key + "=='" + value + "'";
                                            });
                                            qForm['condition'] = 'model.' + condition;
                                        }

                                        qForm['unit'] = currentUser.resorts[0].unit_format.value;

                                        if (q.Type == 'number' || q.Type == 'range' || q.Type == 'decimal' || q.Type == 'patient_age') {


                                            if (q.hasOwnProperty('Min')) {
                                                qForm['min'] = q.Min;
                                            }

                                            if (q.hasOwnProperty('Max')) {
                                                qForm['max'] = q.Max;
                                            }


                                            var range_message = '';
                                            if (q.hasOwnProperty('Min') && q.hasOwnProperty('Max')) {
                                                range_message = 'in range ' + qForm['min'] + ' - ' + qForm['max'] + ' ';
                                            }


                                            if (q.Type == 'decimal') {
//                                                if (q.hasOwnProperty('Increment')) {
                                                qForm['step'] = 0.1;
                                                qForm['pattern'] = /(\-)?[0-9]+(\.[0-9])?/;
                                                qForm['description'] = 'Decimal value ' + range_message + 'with only 1 decimal point allowed.';
                                                qForm['onChange'] = function (modelValue, form) {
                                                    validateNumber(modelValue, form, false);
                                                    //setDirty();
                                                };
//                                                }
                                            } else {
//                                                if (q.hasOwnProperty('Increment')) {
                                                qForm['step'] = 1;
                                                qForm['pattern'] = /(\-)?[0-9]+/;
                                                qForm['description'] = 'Only integer values ' + range_message + 'allowed.';
                                                qForm['validationMessage'] = {
                                                    0: "Not a valid integer",
                                                    105: "Not a valid integer"
                                                };
                                                qForm['onChange'] = function (modelValue, form) {
                                                    validateNumber(modelValue, form, false);
                                                    //setDirty();
                                                };
//                                                }
                                            }
                                        } else {
                                            qForm['onChange'] = function (modelValue, form) {
                                                //setDirty();
                                            };
                                        }

                                        if (q.Type == 'number' || q.Type == 'range' || q.Type == 'patient_age') {
                                            integers.push(m);
                                        }

                                        if (q.Type == 'decimal') {
                                            floats.push(m);
                                        }
                                        //
                                        //if (q.Type == 'select' || q.Type == 'arrows') {
                                        //    selects.push(m);
                                        //}

                                        if (q.Type == 'multi_select') {
                                            qForm["choices"] = choices;
                                        } else {
                                            qForm["titleMap"] = titlemap;
                                        }

                                        if (q.Type == 'date_picker') {
                                            qForm["dateFormat"] = dateFormat;
                                            qForm["placeholder"] = dateFormat;
                                            qForm["description"] = "Date should be of the format " + dateFormat + " and/or invalid date";
                                            qForm["picker_type"] = "date";
                                            dates.push(m);
                                        }

                                        if (q.Type == 'date_time_picker') {
                                            qForm["dateFormat"] = datetimeFormat;
                                            qForm["placeholder"] = datetimeFormat;
                                            qForm["description"] = "Datetime should be of the format " + datetimeFormat + " and/or invalid datetime";
                                            qForm["picker_type"] = "datetime";
                                            datetimes.push(m);
                                        }

                                        $scope.schema.properties[m] = {
                                            'title': $translate.instant(q.Label),
                                            'type': schema_type[q.Type],
                                            'order': q.Order,
                                        };

                                        // If type == image, assign format image
                                        // to use imagemodal plugin
                                        if (q.Type == 'image' || q.Type == 'signature') {
//                                                qForm['format'] = 'image';
                                            qForm['enableUpload'] = true;
                                            qForm['enableRemove'] = true;
                                            qForm['enableZoom'] = true;
                                        }

                                        // Handles the repeater type forms
                                        if (q.Type == 'repeater'
                                            && q.hasOwnProperty('RepeatingQuestions')) {

                                            repeaters.push(m);

                                            var repeaterForm = [];
                                            var repeaterSchema = {
                                                type: 'object',
                                                properties: {},
                                                required: []
                                            };

                                            // Loop through the repeating question
                                            // for the repeater model property
                                            var tabkey = key;
                                            angular.forEach(q.RepeatingQuestions,
                                                function (value, key) {
                                                    var repForm = {
                                                        'field': key,
                                                        "key": key,
                                                        "title": $translate.instant(value.Label),
                                                        "type": form_type[value.Type],
                                                        "placeholder": $translate.instant(value.Placeholder),
                                                        "order": value.Order,
                                                        "fieldAddonRight": value.Append,
                                                        "ngModelOptions": {
                                                            "updateOn": 'blur'
                                                        },
                                                        "tab": $translate.instant(tabs[tabkey].Label)
                                                    };

                                                    errorMap[key] = $translate.instant(value.Label);

                                                    //identify_variant(repForm, value.Append);

                                                    if (value.hasOwnProperty('ShowIf')) {
                                                        var condition = '';
                                                        jQuery.each(value.ShowIf, function (k, v) {
                                                            condition += k + "=='" + v + "'";
                                                        });
                                                        repForm['condition'] = 'model.' + condition;
                                                    }

                                                    //if (q.Type == 'number') {
                                                    //    floats.push(key);
                                                    //}
                                                    //
                                                    //if (q.Type == 'select' || q.Type == 'arrows') {
                                                    //    selects.push(key);
                                                    //}

                                                    if (value.Type == 'patient_age') {
                                                        $scope.has_age = true;
                                                    }

                                                    // Setup form to handle other field types
                                                    if (value.Type == 'select'
                                                        || value.Type == 'arrows'
                                                        || value.Type == 'multi_select') {
                                                        var repChoiceMap =
                                                            getChoiceMap(value.Values);

                                                        repForm.choices
                                                            = repChoiceMap.choices;
                                                        repForm.titleMap
                                                            = repChoiceMap.titlemap;
                                                    }

                                                    if (value.Type == 'date_picker') {
                                                        repForm["dateFormat"] =
                                                            dateFormat;
                                                        repForm["placeholder"] = dateFormat;
                                                        qForm["description"] = "Date should be of the format " + dateFormat + " and/or invalid date";
                                                        qForm["picker_type"] = "date";
                                                        dates.push(key);
                                                    }

                                                    if (value.Type == 'date_time_picker') {
                                                        repForm["dateFormat"] =
                                                            datetimeFormat;
                                                        repForm["placeholder"] = datetimeFormat;
                                                        qForm["description"] = "Datetime should be of the format " + datetimeFormat + " and/or invalid datetime";
                                                        qForm["picker_type"] = "datetime";
                                                        datetimes.push(key);
                                                    }

                                                    repForm['unit'] = currentUser.resorts[0].unit_format.value;

                                                    if (value.Type == 'number' || value.Type == 'range' || value.Type == 'decimal' || value.Type == 'patient_age') {
                                                        if (value.hasOwnProperty('Min')) {
                                                            repForm['min'] = value.Min;
                                                        }

                                                        if (value.hasOwnProperty('Max')) {
                                                            repForm['max'] = value.Max;
                                                        }

                                                        var range_message = '';
                                                        if (value.hasOwnProperty('Min') && value.hasOwnProperty('Max')) {
                                                            range_message = 'in range ' + repForm['min'] + ' - ' + repForm['max'] + ' ';
                                                        }


                                                        if (value.Type == 'decimal') {
                                                            //                                                if (q.hasOwnProperty('Increment')) {
                                                            repForm['step'] = 0.1;
                                                            repForm['pattern'] = /(\-)?[0-9]+(\.[0-9])?/;
                                                            repForm.description = 'Decimal value ' + range_message + 'with only 1 decimal point allowed.';
                                                            repForm['onChange'] = function (modelValue, form) {
                                                                validateNumber(modelValue, form, false);
                                                                //setDirty();
                                                            };

                                                            //                                                }
                                                        } else {
                                                            //                                                if (q.hasOwnProperty('Increment')) {
                                                            repForm['step'] = 1;
                                                            repForm['pattern'] = /(\-)?[0-9]+/;
                                                            qForm.description = 'Only integer values ' + range_message + 'allowed.';
                                                            repForm['validationMessage'] = {
                                                                0: "Not a valid integer",
                                                                105: "Not a valid integer"
                                                            };
                                                            repForm['onChange'] = function (modelValue, form) {
                                                                validateNumber(modelValue, form, true);
                                                                //setDirty();
                                                            };
                                                            //                                                }
                                                        }

                                                    } else {
                                                        repForm['onChange'] = function (modelValue, form) {
                                                            //setDirty();
                                                        };
                                                    }

                                                    if (value.Type == 'number' || value.Type == 'range' || value.Type == 'patient_age') {
                                                        integers.push(key);
                                                    }

                                                    if (q.Type == 'decimal') {
                                                        floats.push(key);
                                                    }

                                                    // Initialize repeater schema
                                                    // properties
                                                    repeaterSchema.properties[key] = {
                                                        "type": schema_type[value.Type]
                                                    };

                                                    // Add to repeater schema if such
                                                    // model property is required
                                                    if (value.Required == 'true') {
                                                        repeaterSchema
                                                            .required.push(key);
                                                    }

                                                    // Store repeater form config
                                                    repeaterForm.push(repForm);
                                                });

                                            // Assign to repeater form
                                            qForm.form = repeaterForm;
                                            qForm.schema = repeaterSchema;

                                            //console.log(qForm.schema);
                                        }

                                        form_items.push(qForm);
//                                        }

                                        // $log.info(item);

                                        question_items.push(item);
                                    }
                                }
                            }

                            // Check if array of schema objects
                            if (tabs[key].hasOwnProperty(question)
                                && (question == 'RepeatingQuestions')) {

                                repeaters.push(key);

                                $scope.schema.properties[key] = {
                                    type: "array",
                                    items: {
                                        type: "object",
                                        properties: {}
                                    }
                                };

                                var l = {
                                    key: key,
                                    title: '',
                                    add: "Add",
                                    style: {
                                        add: "btn-success"
                                    },
                                    items: []
                                };

//                                if ($scope.userRole == 'Patroller') {
//                                    l['readonly'] = true;
//                                }

                                for (var m in tabs[key][question]) {
                                    if (tabs[key][question].hasOwnProperty(m)) {

                                        // $log.log("key: " + m);

                                        var q = tabs[key][question][m];

//                                console.log(q.Type);

                                        if (m == 'dob') {
                                            $scope.has_dob = true;
                                        }

                                        if (m.indexOf("&") > -1) {
                                            // $log.log("has & inside");
                                            m = m.replace(' ', '_');
                                            m = m.replace(' ', '_');
                                            m = m.replace('&', '');
                                        }

                                        var choices = [];
                                        var titlemap = [];

                                        //if (q.Type == 'number') {
                                        //    floats.push(m);
                                        //}
                                        //
                                        //if (q.Type == 'select' || q.Type == 'arrows') {
                                        //    selects.push(m);
                                        //}

                                        if (q.Type == 'patient_age') {
                                            $scope.has_age = true;
                                        }

                                        if (q.Type == 'select'
                                            || q.Type == 'arrows'
                                            || q.Type == 'multi_select') {

                                            var choiceMap = getChoiceMap(q.Values);

                                            choices = choiceMap.choices;
                                            titlemap = choiceMap.titlemap;
                                        }

                                        if (q.Type == 'gender') {
                                            titlemap.push({
                                                value: "male",
                                                name: "Male"
                                            });

                                            titlemap.push({
                                                value: "female",
                                                name: "Female"
                                            });
                                        }

                                        if (q.Type == 'radio') {
                                            titlemap.push({
                                                value: "yes",
                                                name: "Yes"
                                            });

                                            titlemap.push({
                                                value: "no",
                                                name: "No"
                                            });
                                        }

                                        if(q.Type == 'radio_button'){
                                            for (var i = 0; i < q.Values.length; i++) {
                                                titlemap.push({
                                                    value: Object.keys(q.Values[i])[0],
                                                    name: q.Values[i][Object.keys(q.Values[i])[0]]
                                                });
                                            }
                                        }

//                                        if (q.Type != 'message') {
                                        $scope.schema.properties[key].items.properties[m] = {
                                            'title': $translate.instant(q.Label),
                                            'type': schema_type[q.Type],
                                            'order': q.Order
                                        };

                                        var qForm = {
                                            'field': key + '[].' + m,
                                            "key": key + '[].' + m,
                                            "type": form_type[q.Type],
                                            "placeholder": $translate.instant(q.Placeholder),
                                            "order": q.Order,
                                            "tab": $translate.instant(tabs[key].Label)
                                        };


                                        if (q.hasOwnProperty('ShowIf')) {
                                            var condition = '';
                                            jQuery.each(q.ShowIf, function (key, value) {
                                                condition += key + "=='" + value + "'";
                                            });
                                            qForm['condition'] = 'model.' + condition;
                                        }

                                        if (q.Type == 'multi_select') {
                                            qForm["choices"] = choices;
                                        } else {
                                            qForm["titleMap"] = titlemap;
                                        }

                                        if (q.Type == 'date_picker') {
                                            qForm["dateFormat"] = dateFormat;
                                            qForm["placeholder"] = dateFormat;
                                            qForm["description"] = "Date should be of the format " + dateFormat + " and/or invalid date";
                                            qForm["picker_type"] = "date";
                                            dates.push(m);
                                        }

                                        if (q.Type == 'date_time_picker') {
                                            qForm["dateFormat"] = datetimeFormat;
                                            qForm["placeholder"] = datetimeFormat;
                                            qForm["description"] = "Datetime should be of the format " + datetimeFormat + " and/or invalid datetime";
                                            qForm["picker_type"] = "datetime";
                                            datetimes.push(m);
                                        }

                                        // modify qForm for imagemodal plugin
                                        if (q.Type == 'image' || q.Type == 'signature') {
//                                                qForm['format'] = 'image';
                                            qForm['enableUpload'] = true;
                                            qForm['enableRemove'] = true;
                                            qForm['enableZoom'] = true;
                                        }

                                        qForm['unit'] = currentUser.resorts[0].unit_format.value;

                                        if (q.Type == 'number' || q.Type == 'range' || q.Type == 'decimal' || q.Type == 'patient_age') {

                                            if (q.hasOwnProperty('Min')) {
                                                qForm['min'] = q.Min;
                                            }

                                            if (q.hasOwnProperty('Max')) {
                                                qForm['max'] = q.Max;
                                            }

                                            var range_message = '';
                                            if (q.hasOwnProperty('Min') && q.hasOwnProperty('Max')) {
                                                range_message = 'in range ' + qForm['min'] + ' - ' + qForm['max'] + ' ';
                                            }


                                            if (q.Type == 'decimal') {
//                                                if (q.hasOwnProperty('Increment')) {
                                                qForm['step'] = 0.1;
                                                qForm['pattern'] = /(\-)?[0-9]+(\.[0-9])?/;
                                                qForm['description'] = 'Decimal value ' + range_message + 'with only 1 decimal point allowed.';
                                                qForm['onChange'] = function (modelValue, form) {
                                                    validateNumber(modelValue, form, false);
                                                    //setDirty();
                                                };
//                                                }
                                            } else {
//                                                if (q.hasOwnProperty('Increment')) {
                                                qForm['step'] = 1;
                                                qForm['pattern'] = /(\-)?[0-9]+/;
                                                qForm['description'] = 'Only integer values ' + range_message + 'allowed.';
                                                qForm['validationMessage'] = {
                                                    0: "Not a valid integer",
                                                    105: "Not a valid integer"
                                                };
                                                qForm['onChange'] = function (modelValue, form) {
                                                    validateNumber(modelValue, form, true);
                                                    //setDirty();
                                                };
//                                                }
                                            }


                                            if (q.Type == 'number' || q.Type == 'range' || q.Type == 'patient_age') {
                                                integers.push(key + '[].' + m);
                                            }

                                            if (q.Type == 'decimal') {
                                                floats.push(key + '[].' + m);
                                            }
                                        } else {
                                            qForm['onChange'] = function (modelValue, form) {
                                                //setDirty();
                                            };
                                        }

                                        // Add to array of items needed for
                                        // schema form
                                        l.items.push(qForm);
//                                        }

                                        var item = {
                                            'field': m,
                                            'label': $translate.instant(q.Label),
                                            'type': form_type[q.Type],
                                            'required': q.Required,
                                            'placeholder': $translate.instant(q.Placeholder),
                                            'choices': choices,
                                            'order': q.Order
                                        };

                                        errorMap[m] = $translate.instant(q.Label);

                                        repeating_question_items.push(item);
                                    }
                                }

                                l.items.sort(function (a, b) {
                                    return (a.order < b.order) ? -1 : (a.order > b.order) ? 1 : 0;
                                });

                                form_items.push(l);

                                //console.log(form_items);
                                //console.log(repeating_question_items);
                            }
                        }

                        if (tabs[key].Label.indexOf("print") > -1) {

                        } else {
                            tab_items.push({
                                'title': $translate.instant(tabs[key].Label),
                                'order': tabs[key].Order,
                                'items': form_items.sort(function (a, b) {
                                    return (a.order < b.order) ? -1 : (a.order > b.order) ? 1 : 0;
                                }),
                                'questions': question_items.sort(function (a, b) {
                                    return (a.order < b.order) ? -1 : (a.order > b.order) ? 1 : 0;
                                }),
                                'repeating_questions': repeating_question_items.sort(function (a, b) {
                                    return (a.order < b.order) ? -1 : (a.order > b.order) ? 1 : 0;
                                })
                            });
                        }
                    }
                }

                $scope.datetimes = datetimes;
                $scope.dates = dates;

                return tab_items.sort(function (a, b) {
                    return (a.order < b.order) ? -1 : (a.order > b.order) ? 1 : 0;
                })
            };

            $scope.get = function () {
                if (id) {

                    growl.info("LOADING_INCIDENT");

                    var tabs = questions.DashboardItems;

                    IncidentService.getStatuses()
                        .then(function (data) {
                            $scope.status_list = data.map(function (item) {
                                return {
                                    key: $translate.instant(item.key),
                                    incident_status_id: item.incident_status_id
                                };
                            });
                        });


                    if (tabs && tabs.hasOwnProperty('field_52d47aac9bd13') && tabs.field_52d47aac9bd13 && tabs.field_52d47aac9bd13.hasOwnProperty('RepeatingQuestions') && tabs.field_52d47aac9bd13.RepeatingQuestions && tabs.field_52d47aac9bd13.RepeatingQuestions.hasOwnProperty('patroller') && tabs.field_52d47aac9bd13.RepeatingQuestions.patroller) {
                        $scope.assignees = questions.DashboardItems.field_52d47aac9bd13.RepeatingQuestions.patroller.Values.map(function (item) {
                            for (var i in item) {
                                return {
                                    key: i,
                                    name: item[i]
                                };
                            }
                        });
                    } else {
                        $scope.assignees = null;
                    }

                    $scope.tabs = process_tabs(tabs);

                    // Initialize schema form to render tabs in pane
                    $scope.form = [
                        {
                            htmlClass: 'col-xs-12',
                            type: "tabs",
                            tabs: $scope.tabs
                        }
                    ];

                    growl.info("LOADING_INCIDENT");

                    // Fetches incident data base on incident ID found in url
                    IncidentService.fetch(id)
                        .then(function (data) {

                            data = JSON.parse(JSON.stringify(data), function (k, v) {
                                if (jQuery.inArray(k, floats) >= 0) {
                                    v = parseFloat(v);
                                }
                                if (jQuery.inArray(k, selects) >= 0) {
                                    v = '' + v;
                                }
                                if (jQuery.inArray(k, datetimes) >= 0) {
                                    if(v) {
                                        v = toLocalTime(v);
                                    }
                                }
                                if (jQuery.inArray(k, dates) >= 0) {
                                    if(v) {
                                        v = toLocalDate(v);
                                    }
                                }

                                return v;
                            });

                            $.each(defaults, function (k,v) {
                                if(data.hasOwnProperty(k) && (data[k] == "" || data[k] == undefined || data[k] == null)){
                                    data[k] = v;
                                }
                                else if(data.hasOwnProperty(k) && data[k] != "" && data[k] != undefined && data[k] != null){

                                }
                                else{
                                    data[k] = v;
                                }
                            });

                            $scope.incident = data;

                            if (data && data.hasOwnProperty('incident_status') && data.incident_status && data.incident_status.hasOwnProperty('incident_status_id')) {
                                $scope.incident_status = data.incident_status.incident_status_id;
                            }

                            $scope.assigned_to = data.assigned_to;

                            data.dt_created = toLocalTime(data.dt_created);

                            //will be changed to UTC when saved
                            datetimes.push("dt_created");

                            // data.photos = data.photos || [];
                            //
                            $scope.model = data;

                            $rootScope.$broadcast('schemaFormRedraw');
                            //
                            // if ($scope.has_dob) {
                            //     $scope.$watch('model.dob', function (value) {
                            //         //console.log($scope.has_age);
                            //         if (value && $scope.has_age) {
                            //             $scope.model.patient_age = calcAge(value);
                            //             //console.log("age updated");
                            //         }
                            //     });
                            // }
                        }
                        , $rootScope.on_error)
                        .finally(function () {
                            setClean();
                        });
                }
            };


            function calcAge(dateString) {
                var birthday = moment(dateString, dateFormat);
                return moment().diff(birthday, 'years');
            }

            function isEmpty(map) {
                for (var key in map) {
                    if (map.hasOwnProperty(key) && map[key] != null && map[key] !== undefined && map[key] !== "") {
                        return false;
                    }
                }
                return true;
            }

            function removeNulls(obj) {
                for (var key in obj) {

                    // value is empty string
                    if (obj[key] === '') {
                        delete obj[key];
                    }

                    // value is array with only empty strings
                    if (obj[key] instanceof Array) {
                        var empty = true;
                        for (var i = 0; i < obj[key].length; i++) {
                            if (obj[key][i] !== '') {
                                empty = false;
                                break;
                            }
                        }

                        if (empty) {
                            delete obj[key];
                        }
                    }

                    // value is object with only empty strings or arrays of empty strings
                    if (typeof obj[key] === "object") {
                        obj[key] = removeNulls(obj[key]);

                        var hasKeys = false;
                        for (var objKey in obj[key]) {
                            hasKeys = true;
                            break;
                        }

                        if (!hasKeys)
                            delete obj[key];
                    }
                }

                return obj;


                //var isArray = $.isArray(obj);
                //
                //for (var k in obj) {
                //    console.log(k);
                //    console.log(obj[k]);
                //
                //    if (obj[k] === null || obj[k] === undefined || obj[k] == "") {
                //        console.log(true);
                //        delete obj[k];
                //    }else{
                //        console.log(false);
                //    }
                //
                //    if (obj[k] && isEmpty(obj[k])) {
                //        if (isArray) {
                //            //console.log(" ==> remove from array " + k);
                //            obj.splice(k, 1)
                //        } else {
                //            //delete obj[k];
                //        }
                //    }
                //    else {
                //        if (obj[k] && typeof obj[k] == "object" && jQuery.inArray(k, repeaters) >= 0) {
                //            //console.log(k + " is repeater");
                //            removeNulls(obj[k]);
                //        }
                //    }
                //}
            }

            var transformRepeater = function (obj) {
                for (var key in obj) {

                    // value is object with only empty strings or arrays of empty strings
                    if ((jQuery.inArray(key, repeaters) >= 0) && !jQuery.isArray(obj[key])) {
                        //console.log(key + " =====" + typeof obj[key] + "======" + jQuery.isArray(obj[key]));
                        var mapValues = [];
                        angular.forEach(obj[key], function (value) {
                            mapValues.push(value);
                        });

                        obj[key] = mapValues;

                        //console.log(mapValues);
                        //console.log(obj[key]);
                    }
                }

                return obj;
            };


            $scope.save = function (form) {

                transformRepeater($scope.model);
                //console.log($scope.model);

                // First we broadcast an event so all fields validate themselves
//                $scope.$broadcast('schemaFormValidate');

                //console.log(form.$valid);

//                if (form.$valid) {

                var incident_data = JSON.parse(JSON.stringify($scope.model), function (k, v) {
//                                if (jQuery.inArray(k, floats) >= 0) {
//                                    return parseFloat(v);
//                                }
//                                if (jQuery.inArray(k, selects) >= 0) {
//                                    return '' + v;
//                                }
                    if (jQuery.inArray(k, datetimes) >= 0 && v !== '') {
                        return toUTC(v);
                    }
                    if (jQuery.inArray(k, dates) >= 0 && v !== '') {
                        return formatDate(v);
                    }


                    return v;
                });

                removeNulls(incident_data);



                var before = $scope.model;

                if (incident_data.dt_created > moment.utc().format('YYYY-MM-DD HH:mm:ss')) {
                    growl.error('INVALID_START_DATE');
                } else {

                    IncidentService
                        .saveIncident($scope.incident.incident_id, incident_data)
                        .then(function (data) {
                            growl.success("incident_updated_successfully");

                            setClean();

                            if ($scope.incident_status) {

                                if ($scope.assigned_to) {
                                    IncidentService.updateIncident(id, {
                                            "assigned_to": $scope.assigned_to + ''
                                        }
                                    ).then(function (data) {
                                            growl.info("Assignee updated");
                                        });
                                }

                                // if deleted, get confirmation
                                if ($scope.incident_status == 9) {

                                    var modalInstance = $modal.open({
                                        animation: true,
                                        templateUrl: '/app/incidents/templates/confirm.html',
                                        controller: 'ConfirmModalCtrl',
                                        size: 'md'
                                    });

                                    modalInstance.result.then(function (is_allowed) {

                                        IncidentService.updateStatus(id, {
                                                "status_type_id": $scope.incident_status + '',
                                                "status_date": toUTC(moment().format('YYYY-MM-DD HH:mm:ss')),
                                                "updated_by": currentUser.user_id
                                            }
                                        ).then(function (data) {
                                                growl.info("Status updated");
                                                $state.go('incidents');
                                            });


                                    }, function () {
                                        $log.info('Modal dismissed at: ' + new Date());
                                    });
                                } else {

                                    // else update status directly
                                    IncidentService.updateStatus(id, {
                                            "status_type_id": $scope.incident_status + '',
                                            "status_date": toUTC(moment().format('YYYY-MM-DD HH:mm:ss')),
                                            "updated_by": currentUser.user_id
                                        }
                                    ).then(function (data) {
                                            growl.info("Status updated");
                                            $state.go('incident_edit', {incidentId: $stateParams.incidentId});
                                        });
                                }
                            } else {
                                $state.go('incident_edit', {incidentId: $stateParams.incidentId});
                            }

                        }, function (error) {
                            for (var key in error) {
                                if (key in errorMap) {
                                    growl.error(errorMap[key] + " " + error[key]);
                                } else {
                                    growl.error(key + " " + error[key]);
                                }

                            }
                        });
                }
//                } else {
//                    growl.error("data_validation_error_please_correct_red_fields");
//                }
            };

            var unsavedmessage = 'All your unsaved changes will be lost. Are you sure you want to continue?';

            window.onbeforeunload = function (event) {
                if (isDirty()) {
                    var message = unsavedmessage;

                    var event = event || window.event;

                    if (event) {
                        event.returnValue = message;
                    }
                    else {
                        return message;
                    }
                }
            };

            $scope.$on('$destroy', function () {
                //console.log($scope.incidentform.$dirty);
//                console.log('$destroy');
                window.onbeforeunload = null;
            });

            $scope.$on('$stateChangeStart', function (event, next, current) {
//                console.log('$stateChangeStart');
//                console.log($scope.incidentform.$dirty);

                if (isDirty()) {
                    if (!confirm(unsavedmessage)) {
                        event.preventDefault();
                    }
                }
            });

            $scope.gotoNextTab = function () {
                var scope = jQuery('.schema-form-tabs').scope();

                if (scope && scope.hasOwnProperty('selected')) {
                    var currentTab = scope.selected.tab;
                    if (currentTab == ($scope.tabs.length - 1)) {
                        scope.selected.tab = 0;
                    } else {
                        scope.selected.tab++;
                    }

                    $("html, body").animate({scrollTop: 0}, 200);
                }
            };

        }]);

'use strict';

angular.module('app')
    .controller('IncidentCtrl', ["$scope", "$location", "$state", "$rootScope", "$sce", "$timeout", "$log", "$window", "$intercom", "$filter", "IncidentService", "DateRangeService", "currentUser", "growl", "ApiService", "CONFIG", "LS", "questions", function ($scope, $location, $state, $rootScope, $sce, $timeout, $log, $window, $intercom, $filter,  IncidentService, DateRangeService, currentUser, growl, ApiService, CONFIG, LS, questions) {


        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Incidents"
        });

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        var date_format = $scope.datetime_format.slice(0,10);
        $scope.date_format = date_format_mapping[date_format];

        var current = new Date();
        var tz = jstz.determine();

        var tabs = questions.DashboardItems;
        var defaults = {};
        for (var key in tabs) {
            if (tabs.hasOwnProperty(key)) {
                for (var question in tabs[key]) {
                    if (tabs[key].hasOwnProperty(question)
                        && (question == 'Questions')) {
                        for (var m in tabs[key][question]) {
                            if (tabs[key][question].hasOwnProperty(m)) {
                                var q = tabs[key][question][m];
                                if (q.hasOwnProperty("Default")) {
                                    defaults[m] = tabs[key][question][m]["Default"];
                                }
                            }
                        }
                    }
                }
            }
        }

        function toUTC(value) {
            return moment.tz(value, $scope.datetime_format, tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format($scope.datetime_format);
        }

        var resort = currentUser.resorts[0];
        var resort_id = resort.resort_id;

        DateRangeService.range = {
             dateFrom: DateRangeService.range.dateFrom,
             dateTo: DateRangeService.range.dateTo
        };

        $scope.list = {
            range: DateRangeService.range,
            incidents: [],
            currentPage: 1,
            itemsPerPage: 100,
            totalItems: 0,
            totalPages: 0,
            predicate: 'dt_created',
            reverse: true,
            loading: false,
            success: true,
            error: '',

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching incidents...');

                $scope.list.loading = true;

                var start_time = toUTC(moment($scope.list.range.dateFrom).format(date_format + ' 00:00:00'));
                var end_time = toUTC(moment($scope.list.range.dateTo).format(date_format + ' 23:59:59'));


                IncidentService.fetchList(start_time, end_time, resort_id, $scope.list.itemsPerPage, $scope.list.currentPage, $scope.list.predicate, $scope.list.reverse).then(function (data) {

//                    $log.log(data.results);

                    $scope.list.loading = false;

                    var incidents = data.results.map(function (incident) {
                        incident.dt_created = toLocalTime(incident.dt_created);
                        incident.patient_name = incident.patient.name;
                        incident.injury_name = $filter('transformInjury')(incident.injury);
                        incident.assigned_to_name = incident.assigned_to.name;
                        incident.status = incident.incident_status[0].key;
                        return incident;
                    });

//                    $log.log(incidents);

                    $scope.list.incidents = incidents;
                    $scope.list.totalItems = data.count;
                    $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);

                }, function (reason) {

                    $rootScope.on_error(reason);
                    $scope.list.incidents = [];
                    $scope.list.success = false;
                    $scope.list.error = reason.errors.Error;
                    $scope.list.loading = false;
                });
            },

            add: function () {
                growl.info('ADDING_INCIDENT');
                var default_data = {"field_52ca456962ba8": {
                    "lat": resort.map_lat,
                    "long": resort.map_lng,
                    "accuracy": 16
                }};

                $.extend(default_data, defaults);
                IncidentService.createIncident(default_data).then(function (data) {
                    growl.info('INCIDENT_ADDED');
                    $scope.list.get();
                }, function (reason) {
                });
            },

            print: function (id) {
                $log.log('printing incident ' + id);
                growl.info('PRINTING');

                if (id !== null || id !== undefined) {
                    var xhr = new XMLHttpRequest();

                    // Use JSFiddle logo as a sample image to avoid complicating
                    // this example with cross-domain issues.
                    xhr.open("GET", ApiService.base() + CONFIG.API_URL + '/incidents/' + id + '/print/?timestamp=' + new Date().getTime(), true);

                    var authorization = LS.get('Authorization');
                    var token = LS.get('token');

                    xhr.setRequestHeader('Authorization', authorization);
                    xhr.setRequestHeader('token', token);

                    // Ask for the result as an ArrayBuffer.
                    xhr.responseType = "arraybuffer";

                    xhr.onload = function (e) {
                        // Obtain a blob: URL for the image data.
                        var arrayBufferView = new Uint8Array(this.response);
                        var blob = new Blob([ arrayBufferView ], { type: 'application/pdf' });
                        var urlCreator = window.URL || window.webkitURL;
                        var fileURL = urlCreator.createObjectURL(blob);
                        fileURL = $sce.trustAsResourceUrl(fileURL);
                        var downloadfilename = id+".pdf";

                        var anchor = angular.element('<a/>');
                        anchor.attr({
                            href: fileURL,
                            target: '_blank',
                            download: downloadfilename
                        })[0].click();
                    };

                    xhr.send();


//                    IncidentService.print(id)
//                        .then(function (data) {
//                            var arrayBufferView = new Uint8Array(data);
//                            var blob = new Blob([ arrayBufferView ], { type: 'application/pdf' });
//                            var urlCreator = window.URL || window.webkitURL;
//                            var fileURL = urlCreator.createObjectURL(blob);
//                            fileURL = $sce.trustAsResourceUrl(fileURL);
//                            var downloadfilename = id+".pdf";
//
//                            var anchor = angular.element('<a/>');
//                            anchor.attr({
//                                href: fileURL,
//                                target: '_blank',
//                                download: downloadfilename
//                            })[0].click();
//
//                        }, function (error) {
//                            $scope.error = error;
//                        });
                }

            }
        };

        console.log($scope.list);

        $scope.$watch(
            'list.range.dateFrom',
            function (newValue, oldValue) {
                if (newValue !== oldValue && newValue != undefined) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.range.dateTo',
            function (newValue, oldValue) {
                if (newValue !== oldValue && newValue != undefined) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );
    }]);
angular.module('app.services')
    .service('IncidentService', ['$http', '$q', '$log', 'UserService', 'LS',  'CONFIG', 'ApiService', function ($http, $q, $log, UserService, LS, CONFIG, ApiService) {

        var API = {
            base:  CONFIG.API_URL + '/incidents/',
            getUrl: function (id) {
                return '/' + id;
            }
        };

        return {
//            _user : null,

            fetchAll: function (dateFrom, dateTo, resort_id, chunk, page) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base, {
                    params: {
                        resort_id: resort_id,
                        date_from: dateFrom,
                        date_to: dateTo,
                        chunk: chunk,
                        offset: (page - 1) * chunk
                    }
                })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchList: function (dateFrom, dateTo, resort_id, chunk, page, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'dt_created';

                $http.get(ApiService.base() + API.base, {
                    params: {
                        resort_id: resort_id,
                        date_from: dateFrom,
                        date_to: dateTo,
                        chunk: chunk,
                        offset: (page - 1) * chunk,
                        order_by:predicate,
                        order_by_direction: direction ? 'desc':'asc'
                    }
                })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchReport: function (dateFrom, dateTo, chunk, page, model, resort_id, format) {
                var d = $q.defer();

                var params = {
                        datefrom: dateFrom,
                        dateto: dateTo,
                        resort_id: resort_id,
                        chunk: chunk,
                        offset:(page - 1) * chunk,
                        output_format: format
                    };

                var filters = {};

                angular.forEach(model, function(value, key) {
                    if(value && value.field && value.field.fullkey) {
                        filters[value.field.fullkey] = filters[value.field.fullkey] || [];
                        filters[value.field.fullkey].push(value.value);

                        if(value.hasOwnProperty('childField') && value.childField.value && (value.childField.value != 'all')){
                            filters[value.childField.field.fullkey] = filters[value.childField.field.fullkey] || [];
                            filters[value.childField.field.fullkey].push(value.childField.value);
                        }
                    }
                });

                $http({
                    method: 'POST',
                    url: ApiService.base() + CONFIG.API_URL + '/reports/table/',
                    params: params,
                    data:filters
                })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchChart: function (model, chart, resort_id) {
                var d = $q.defer();

                var params = {
                        resort_id: resort_id
                    };

                $http({
                    method: 'POST',
                    url: ApiService.base() + CONFIG.API_URL + '/reports/'+chart+'/',
                    params: params,
                    data:model
                })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchChartCSV: function (model, chart, resort_id, format) {
                var d = $q.defer();

                var params = {
                        resort_id: resort_id,
                        output_format: format
                    };

                $http({
                    method: 'POST',
                    url: ApiService.base() + CONFIG.API_URL + '/reports/'+chart+'/',
                    params: params,
                    data:model
                })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchStatusReport: function (dateFrom, dateTo, status_list, chunk, page, output_format) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/reports/status/', {
                        params: {
                            datefrom: dateFrom,
                            dateto: dateTo,
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            status: status_list,
                            output_format: output_format
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchMap: function (dateFrom, dateTo, resort_id, chunk, page) {
                var d = $q.defer();

                $http.get(ApiService.base() + API.base, {
                    params: {
                        resort_id: resort_id,
                        date_from: dateFrom,
                        date_to: dateTo,
                        chunk: chunk,
                        offset: (page - 1) * chunk,
                        include_status: "1,2,3,4,5,6,7"
                    }
                })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            print: function (id) {
                var data = {
                    'id': id || ''
                };

                var d = $q.defer();

                $http.get(ApiService.base() + API.base + API.getUrl(data.id) + '/print/')
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            fetchNotes: function (id) {
                var data = {
                    'id': id || ''
                };

                var d = $q.defer();

                $http.get(ApiService.base() + API.base + id + '/notes/')
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            addNote: function (incident_id, note, time) {
                //var data = {
                //    'id': id || ''
                //};

                var params = {
                    //'note_id': '',
                    'field_52ca448dg94ja3': note,
                    'field_52ca448dg94ja4': time
                };

                var d = $q.defer();

                $http.post(ApiService.base() + API.base + incident_id + '/notes/', params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            getStatuses: function () {
                //var data = {
                //    'id': id || ''
                //};

//                var params = {
//                };

                var d = $q.defer();

                $http.get(ApiService.base() + API.base + 'status/')
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },


            saveNote: function (id, note_id, note) {
                //var data = {
                //    'id': id || ''
                //};

                var params = {
                    //'note_id': '',
                    'content': note,
                    'note_date': new Date()
                };

                var d = $q.defer();

                $http.post(ApiService.base() + API.base + id + '/notes/', params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            saveIncident: function (id, incidentData) {
                var data = {
                    'id': id || ''
                };

                var params = {
                    'data': incidentData
                };

                var d = $q.defer();

                $http.put(ApiService.base() + API.base + id + '/', incidentData)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            createIncident: function (incidentData) {
                //var data = {
                //    'id': id || ''
                //};
                //
                //var params = {
                //    'data': incidentData
                //};

                var params = incidentData || {};

                var d = $q.defer();

                $http.post(ApiService.base() + API.base, params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            updateStatus: function (id, incidentData) {

                var params = incidentData || {};

                var d = $q.defer();

                $http.post(ApiService.base() + API.base + id + '/status/', params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            },

            updateIncident: function (id, incidentData) {

                var params = incidentData || {};

                var d = $q.defer();

                $http.put(ApiService.base() + API.base + id + '/', params)
                    .success(function (data, status, headers) {
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        d.reject(data);
                    });

                return d.promise;
            }

            //updateLocation: function (id, incidentData) {
            //
            //    var params = incidentData || {};
            //
            //    var d = $q.defer();
            //
            //    $http.put(ApiService.base() + API.base + id + '/', params)
            //        .success(function (data, status, headers) {
            //            d.resolve(data);
            //        })
            //        .error(function (data, status, headers, config, errors) {
            //            d.reject(data);
            //        });
            //
            //    return d.promise;
            //}
        };

//        return service;
    }]);


angular.module('app.services')
    .service('QuestionService', ['$http', '$q', '$log', '$rootScope', '$window', 'LS', 'CONFIG','ApiService', function ($http, $q, $log, $rootScope, $window, LS, CONFIG, ApiService) {

        var currentUser = JSON.parse(LS.get('user'));
//        $log.log(currentUser);

        var resort_id= currentUser.resorts[0].resort_id;
//        $log.log(resort_id);


        var service = {
            fetch: function () {
                var d = $q.defer();

                    $http.get(ApiService.base() + CONFIG.API_URL + '/incidents/config/', {
                        params:{
                            resort_id: resort_id
                        }
                    })
                        .success(function (response, status, headers) {

                            d.resolve(response);
                        })
                        .error(function (response, status, headers, config, errors) {
                            d.reject(response);
                        });

                    return d.promise;
//                }


            }
        };

        return service;
    }]);


// Call parent module reference
angular.module('app.services')

    .service('UploadService',
    ['$http',
        '$q',
        'CONFIG',
        'LS',
        'ApiService',
        function ($http, $q, CONFIG, LS, ApiService) {


            var API_UPLOAD = CONFIG.API_URL + '/incidents/{id}/media/';

            return {
                /*
                 @params incidentId - The incident Id
                 @params type - The file type to upload (image || file)
                 */
                upload: function (incidentId, formData, type) {
                    var dfd = $q.defer(),
                        xhr = new XMLHttpRequest(),

                        onProgress = function (event) {
                            dfd.notify(event);
                        },

                        onFinish = function (event) {
                            var responseText = event.target.responseText,
                                source;

                            if (event.target.status == '200' && responseText) {
                                try {
                                    source = JSON.parse(responseText);

                                    dfd.resolve(source);
                                } catch (error) {
                                    dfd.reject(event.target);
                                }
                            } else {
                                onError(event.target);
                            }
                        },

                        onError = function (error) {
                            dfd.reject(error);
                        },

                        url = ApiService.base() + API_UPLOAD.replace('{id}', incidentId);

                    xhr.upload.onprogress = onProgress;
                    xhr.addEventListener('loadend', onFinish, false);

                    // Set up request
                    xhr.open('POST', url, true);

                    var authorization = LS.get('Authorization');
                    var token = LS.get('token');

                    if (authorization != null) {
                        xhr.setRequestHeader('Authorization', authorization);
                    }

                    if (token != null) {
                        xhr.setRequestHeader('token', token);
                    }

                    xhr.setRequestHeader('Accept', 'application/json');

                    // Fire!
                    xhr.send(formData);

                    return dfd.promise;
                }
            }
        }]);
'use strict';


angular.module('app')
    .controller('LocationAddCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "LocationService", "AreaService", "currentUser", "growl", "leafletData", "$http", "hotkeys", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, LocationService, AreaService, currentUser, growl, leafletData, $http, hotkeys) {

        var style_lifts = {
            "color": "#ff0000",
            "dashArray": "15,5",
            "weight": "3"
        };
        var style_buildings = {
            "color": "#0000ff",
            "weight": "1"
        };

        var style_green = {
            "color": "#00ff00",
            "weight": "3"
        };
        var style_blue = {
            "color": "#0000ff",
            "weight": "3"
        };
        var style_doubleblue = {
            "color": "#0000ff",
            "dashArray": "15,10,1,10,1,10",
            "weight": "3"
        };
        var style_black = {
            "color": "#000000",
            "weight": "3"
        };
        var style_doubleblack = {
            "color": "#000000",
            "dashArray": "15,10,1,10,1,10",
            "weight": "3"
        };

        var resort_id = currentUser.resorts[0].resort_id;

        $scope.map = {
            initialized: false,
            defaults: {
                //scrollWheelZoom: false,
                //doubleClickZoom:false,
                trackResize: true,
                pan: {
                    animate: true,
                    duration: 0.85,
                    easeLinearity: 0.3
                }
            },
            center: {
                lat: 70.00,
                lng: 35.00,
                zoom: 3
            },
            markers: [],
            layers: {
                baselayers: {
                    googleRoadmap: {
                        name: 'Map',
                        layerType: 'ROADMAP',
                        type: 'google'
                    },
                    googleTerrain: {
                        name: 'Terrain',
                        layerType: 'TERRAIN',
                        type: 'google'
                    },
                    googleHybrid: {
                        name: 'Satellite',
                        layerType: 'HYBRID',
                        type: 'google'
                    }
                }
            }
        };

        //{"resort_count":1,"user_id":"397db175-1c28-4385-86f9-bcdc5bbf03ff","name":"Mr Manager","phone":"0138562894","role_id":[{"value":3,"key":"manager"}],"resorts":[{"resort_logo":"","map_kml":"http://api.medic52.local/static/content/cf597e6b-25f9-4fa9-8def-2790e1ef2dac/perisher.kml_shUkArB.json","report_form":"","resort_id":"cf597e6b-25f9-4fa9-8def-2790e1ef2dac","resort_name":"Perisher","map_type":{"value":1,"key":"Google Map"},"map_lat":-36.404471,"map_lng":148.413887,"unit_format":{"value":1,"key":"Metric"},"timezone":"Australia/Sydney","datetime_format":{"value":1,"key":"dd/mm/yyyy hh:mm:ss"},"resort_controlled_substances":true,"resort_asset_management":true}],"token":"9984026d011949e045b2a1ff3138ac698674e7c0","user_connected":{"value":1,"key":"network"},"user_controlled_substances":true,"user_asset_management":true,"email":"manager@perisherski.com","role":"Manager","isManager":true}

        $scope.map.markers = [{
            // group: '',
            lat: parseFloat(currentUser.resorts[0].map_lat),
            lng: parseFloat(currentUser.resorts[0].map_lng),
            //icon: divIcon(icon, incident.incident_pk, incident.incident_status[0].color),
            draggable: true
//                        icon: divIcon(icon, $filter('toElapsedTime')(incident.dt_created, "mm:ss"))
        }];

        if (!($scope.map.initialized)) {
            if (currentUser && currentUser.resorts.length > 0 && currentUser.resorts[0].map_kml) {
                leafletData.getMap().then(function (map) {
                    
                    $http.get(currentUser.resorts[0].map_kml).success(function (data) {
                        function onEachFeature(feature, layer) {
                            var popupContent = feature.properties.description;
                            var popupTitle = feature.properties.name;

                            if (feature.properties && feature.properties.popupContent) {
                                popupContent += feature.properties.popupContent;
                            }
                            layer.bindPopup(popupContent);
                        }

                        // add buildings
                        L.geoJson(data.buildings, {
                            style: function (feature) {
                                if (data.hasOwnProperty('style_buildings')) {
                                    return data.style_buildings;
                                } else {
                                    return style_buildings;
                                }
                            },
                            onEachFeature: onEachFeature
                        }).addTo(map);


                        // add runs
                        L.geoJson(data.runs, {
                            style: function (feature) {
                                switch (feature.properties.rating) {
                                    case 'green':
                                        if (data.hasOwnProperty('style_green')) {
                                            return data.style_green;
                                        } else {
                                            return style_green; // Easiest / Green
                                        }
                                    case 'blue':
                                        if (data.hasOwnProperty('style_blue')) {
                                            return data.style_blue;
                                        } else {
                                            return style_blue; // Difficult / Blue
                                        }
                                    case 'doubleblue':
                                        if (data.hasOwnProperty('style_doubleblue')) {
                                            return data.style_doubleblue;
                                        } else {
                                            return style_doubleblue; // More Difficult / Double Blue
                                        }
                                    case 'black':
                                        if (data.hasOwnProperty('style_black')) {
                                            return data.style_black;
                                        } else {
                                            return style_black; // Most Difficult / Black
                                        }
                                    case 'doubleblack':
                                        if (data.hasOwnProperty('style_doubleblack')) {
                                            return data.style_doubleblack;
                                        } else {
                                            return style_doubleblack;
                                        }
                                }
                            },
                            onEachFeature: onEachFeature
                        }).addTo(map);

                        // add lifts
                        L.geoJson(data.lifts, {
                            style: function (feature) {
                                if (data.hasOwnProperty('style_lifts')) {
                                    return data.style_lifts;
                                } else {
                                    return style_lifts;
                                }
                            },
                            onEachFeature: onEachFeature
                        }).addTo(map);
                    });
                });
            }

            if (currentUser.resorts[0].map_lat && currentUser.resorts[0].map_lng) {
                $scope.map.center.lat = parseFloat(currentUser.resorts[0].map_lat);
                $scope.map.center.lng = parseFloat(currentUser.resorts[0].map_lng);

                $scope.map_lat = $scope.map.center.lat;
                $scope.map_long = $scope.map.center.lng;
            }

            $scope.map.center.zoom = 18;
            $scope.map.initialized = true;
        }

        hotkeys.bindTo($scope).add({
            combo: '+',
            description: 'Zoom in',
            callback: function () {
                $log.log('zooming in');

                if ($scope.map.center.zoom < 18) {
                    $scope.map.center.zoom += 1;

                    leafletData.getMap().then(function (map) {
                        map.setZoom($scope.map.center.zoom);
                    });

                }
            },
            persistent: false
        });

        hotkeys.bindTo($scope).add({
            combo: '-',
            description: 'Zoom out',
            callback: function () {
                $log.log('zooming out');

                if ($scope.map.center.zoom > 1) {
                    $scope.map.center.zoom -= 1;

                    leafletData.getMap().then(function (map) {
                        map.setZoom($scope.map.center.zoom);
                    });
                }
            },
            persistent: false
        });

        $scope.$on('leafletDirectiveMarker.dragend', function (e, args) {
            $scope.map_lat = Math.round(parseFloat(args.leafletEvent.target._latlng.lat) * 10000) / 10000;
            $scope.map_long = Math.round(parseFloat(args.leafletEvent.target._latlng.lng) * 10000) / 10000;
        });

        $scope.$watch('map_lat', function (newValue, oldValue) {
            var map_lat = Math.round(parseFloat(newValue) * 10000) / 10000;
            $scope.map.markers[0].lat = map_lat;
            $scope.map.center.lat= map_lat;
        });

        $scope.$watch('map_long', function (newValue, oldValue) {
            var map_long = Math.round(parseFloat(newValue) * 10000) / 10000;
            $scope.map.markers[0].lng = map_long;
            $scope.map.center.lng= map_long;
        });

        AreaService.fetchAll(1000, 0, '', 'area_name', 'asc')
            .then(function (data) {
                $scope.areas = data.results;
            },
            function (error) {
                growl.error(error.detail);
            }
        )
            .finally(function () {
                $scope.area_id = $scope.areas[0].area_id;
            });

        $scope.addLocation = function () {
            growl.info("ADD_LOCATION");


            LocationService.add($scope.location_name, $scope.area_id, $scope.map_lat, $scope.map_long).then(function (data) {
                    growl.success("location_created_successfully");
                    $state.go("locations", {areaId:$scope.area_id});
                },
                function (error) {
                    growl.info(error.detail);

                    //Global errors
                    //if (error.hasOwnProperty('detail')) {
                    //    $scope.error = error.detail;
                    //    $scope.form.$setPristine();
                    //    growl.error(error.detail);
                    //}
                    //
                    //$scope.errors = [];
                    //angular.forEach(error, function (errors, field) {
                    //
                    //    if (field == 'non_field_errors') {
                    //        // Global errors
                    //        $scope.error = errors.join(', ');
                    //        $scope.form.$setPristine();
                    //    } else {
                    //        //Field level errors
                    //        $scope.form[field].$setValidity('backend', false);
                    //        $scope.form[field].$dirty = true;
                    //        $scope.errors[field] = errors.join(', ');
                    //    }
                    //});
                });
        };
    }]);

'use strict';


angular.module('app')
    .controller('LocationEditCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "LocationService", "AreaService", "currentUser", "growl", "leafletData", "$http", "hotkeys", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, LocationService, AreaService, currentUser, growl, leafletData, $http, hotkeys) {
        var id = $stateParams.locationId;

        var style_lifts = {
            "color": "#ff0000",
            "dashArray": "15,5",
            "weight": "3"
        };
        var style_buildings = {
            "color": "#0000ff",
            "weight": "1"
        };

        var style_green = {
            "color": "#00ff00",
            "weight": "3"
        };
        var style_blue = {
            "color": "#0000ff",
            "weight": "3"
        };
        var style_doubleblue = {
            "color": "#0000ff",
            "dashArray": "15,10,1,10,1,10",
            "weight": "3"
        };
        var style_black = {
            "color": "#000000",
            "weight": "3"
        };
        var style_doubleblack = {
            "color": "#000000",
            "dashArray": "15,10,1,10,1,10",
            "weight": "3"
        };

        var resort_id = currentUser.resorts[0].resort_id;

        $scope.map = {
            initialized: false,
            defaults: {
                //scrollWheelZoom: false,
                //doubleClickZoom:false,
                trackResize: true,
                pan: {
                    animate: true,
                    duration: 0.85,
                    easeLinearity: 0.3
                }
            },
            center: {
                lat: 70.00,
                lng: 35.00,
                zoom: 3
            },
            markers: [],
            layers: {
                baselayers: {
                    googleRoadmap: {
                        name: 'Map',
                        layerType: 'ROADMAP',
                        type: 'google'
                    },
                    googleTerrain: {
                        name: 'Terrain',
                        layerType: 'TERRAIN',
                        type: 'google'
                    },
                    googleHybrid: {
                        name: 'Satellite',
                        layerType: 'HYBRID',
                        type: 'google'
                    }
                }
            }
        };

        //{"resort_count":1,"user_id":"397db175-1c28-4385-86f9-bcdc5bbf03ff","name":"Mr Manager","phone":"0138562894","role_id":[{"value":3,"key":"manager"}],"resorts":[{"resort_logo":"","map_kml":"http://api.medic52.local/static/content/cf597e6b-25f9-4fa9-8def-2790e1ef2dac/perisher.kml_shUkArB.json","report_form":"","resort_id":"cf597e6b-25f9-4fa9-8def-2790e1ef2dac","resort_name":"Perisher","map_type":{"value":1,"key":"Google Map"},"map_lat":-36.404471,"map_lng":148.413887,"unit_format":{"value":1,"key":"Metric"},"timezone":"Australia/Sydney","datetime_format":{"value":1,"key":"dd/mm/yyyy hh:mm:ss"},"resort_controlled_substances":true,"resort_asset_management":true}],"token":"9984026d011949e045b2a1ff3138ac698674e7c0","user_connected":{"value":1,"key":"network"},"user_controlled_substances":true,"user_asset_management":true,"email":"manager@perisherski.com","role":"Manager","isManager":true}

        if (!($scope.map.initialized)) {
            if (currentUser && currentUser.resorts.length > 0 && currentUser.resorts[0].map_kml) {
                leafletData.getMap().then(function (map) {

                    $http.get(currentUser.resorts[0].map_kml).success(function (data) {

                        function onEachFeature(feature, layer) {
                            var popupContent = feature.properties.description;
                            var popupTitle = feature.properties.name;

                            if (feature.properties && feature.properties.popupContent) {
                                popupContent += feature.properties.popupContent;
                            }
                            layer.bindPopup(popupContent);
                        }

                        // add buildings
                        L.geoJson(data.buildings, {
                            style: function (feature) {
                                if (data.hasOwnProperty('style_buildings')) {
                                    return data.style_buildings;
                                } else {
                                    return style_buildings;
                                }
                            },
                            onEachFeature: onEachFeature
                        }).addTo(map);


                        // add runs
                        L.geoJson(data.runs, {
                            style: function (feature) {
                                switch (feature.properties.rating) {
                                    case 'green':
                                        if (data.hasOwnProperty('style_green')) {
                                            return data.style_green;
                                        } else {
                                            return style_green; // Easiest / Green
                                        }
                                    case 'blue':
                                        if (data.hasOwnProperty('style_blue')) {
                                            return data.style_blue;
                                        } else {
                                            return style_blue; // Difficult / Blue
                                        }
                                    case 'doubleblue':
                                        if (data.hasOwnProperty('style_doubleblue')) {
                                            return data.style_doubleblue;
                                        } else {
                                            return style_doubleblue; // More Difficult / Double Blue
                                        }
                                    case 'black':
                                        if (data.hasOwnProperty('style_black')) {
                                            return data.style_black;
                                        } else {
                                            return style_black; // Most Difficult / Black
                                        }
                                    case 'doubleblack':
                                        if (data.hasOwnProperty('style_doubleblack')) {
                                            return data.style_doubleblack;
                                        } else {
                                            return style_doubleblack;
                                        }
                                }
                            },
                            onEachFeature: onEachFeature
                        }).addTo(map);

                        // add lifts
                        L.geoJson(data.lifts, {
                            style: function (feature) {
                                if (data.hasOwnProperty('style_lifts')) {
                                    return data.style_lifts;
                                } else {
                                    return style_lifts;
                                }
                            },
                            onEachFeature: onEachFeature
                        }).addTo(map);
                    });
                });
            }

            $scope.map.center.zoom = 18;
            $scope.map.initialized = true;
        }

        hotkeys.bindTo($scope).add({
            combo: '+',
            description: 'Zoom in',
            callback: function () {
                $log.log('zooming in');

                if ($scope.map.center.zoom < 18) {
                    $scope.map.center.zoom += 1;

                    leafletData.getMap().then(function (map) {
                        map.setZoom($scope.map.center.zoom);
                    });

                }
            },
            persistent: false
        });

        hotkeys.bindTo($scope).add({
            combo: '-',
            description: 'Zoom out',
            callback: function () {
                $log.log('zooming out');

                if ($scope.map.center.zoom > 1) {
                    $scope.map.center.zoom -= 1;

                    leafletData.getMap().then(function (map) {
                        map.setZoom($scope.map.center.zoom);
                    });
                }
            },
            persistent: false
        });

        AreaService.fetchAll(1000, 0, '', 'area_name', 'asc')
            .then(function (data) {
                $scope.areas = data.results;
            },
            function (error) {
                growl.error(error.detail);
            }
        )
            .finally(function () {
                //$scope.location.area_id = $scope.areas[0].area_id;
            });


        $scope.get = function () {
            if (id) {
                growl.info("LOADING_LOCATION");
                LocationService.fetch(id).then(function (data) {
                        $scope.location = data;

                        if ($scope.location.area) {
                            $scope.location.area_id = $scope.location.area.area_id;
                        }

                        if (data.map_lat && data.map_long) {
                            $scope.map.center.lat = data.map_lat;
                            $scope.map.center.lng = data.map_long;

                            $scope.map.markers = [{
                                lat: $scope.map.center.lat,
                                lng: $scope.map.center.lng,
                                draggable: true
                            }];
                        }

                        $scope.$on('leafletDirectiveMarker.dragend', function (e, args) {
                            $scope.location.map_lat = Math.round(parseFloat(args.leafletEvent.target._latlng.lat) * 10000) / 10000;
                            $scope.location.map_long = Math.round(parseFloat(args.leafletEvent.target._latlng.lng) * 10000) / 10000;

                            $scope.map.center.lat = $scope.location.map_lat;
                            $scope.map.center.lng = $scope.location.map_long;
                        });

                        $scope.$watch('location.map_lat', function (newValue, oldValue) {
                            if (newValue && newValue != oldValue) {
                                var map_lat = Math.round(parseFloat(newValue) * 10000) / 10000;
                                $scope.map.markers[0].lat = map_lat;
                                $scope.map.center.lat = map_lat;
                            }
                        });

                        $scope.$watch('location.map_long', function (newValue, oldValue) {
                            if (newValue && newValue != oldValue) {
                                var map_long = Math.round(parseFloat(newValue) * 10000) / 10000;
                                $scope.map.markers[0].lng = map_long;
                                $scope.map.center.lng = map_long;
                            }
                        });

                    },
                    function (error) {
                        growl.info(error.detail);
                    }
                );
            }
        };

        $scope.update = function () {
            if (id) {
                growl.info("UPDATE_LOCATION");
                LocationService.update(id, $scope.location.location_name, $scope.location.area_id, $scope.location.map_lat, $scope.location.map_long).then(function (data) {
//                        $log.log(data);
                        growl.success("location_updated_successfully");
                    },
                    function (error) {
                        growl.info(error.detail);
                    });
            }
        };

    }]);

'use strict';


angular.module('app')
    .controller('LocationListCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'LocationService', 'AreaService', 'currentUser', 'growl', '$uimodal', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, LocationService, AreaService, currentUser, growl, $modal) {


        var areaId='';

        if($stateParams.hasOwnProperty('areaId') && $stateParams.areaId) {
            areaId = $stateParams.areaId;
        }

        AreaService.fetchAll(1000, 0, '', 'area_name', 'asc')
            .then(function (data) {
                $scope.areas = data.results;
            },
            function (error) {
                growl.error(error.detail);
            }
        )
            .finally(function () {
                $scope.areas.unshift({
                    area_id:'__empty__',
                    area_name:'All Areas'
                });

                $scope.area_id=areaId;

                $scope.list.get();
            });

        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'location_name',
            loading: false,

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_AREA");

                var area_id = $scope.area_id;
                if($scope.area_id == '__empty__'){
                    area_id = '';
                }

                LocationService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '',area_id, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_AREA");

                LocationService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            archive: function(id) {
                console.log("removing");

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/locations/templates/confirm.html',
                    controller: 'ConfirmModalCtrl',
                    size: 'md'
                });

                modalInstance.result.then(function () {
                    LocationService.remove(id).then(function (response) {
                        $scope.list.get();
                    }, function (error) {
                        growl.error(error.detail);
                    });

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            }
        };

        $scope.add = function () {
            $state.go("user_add");
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'area_id',
            function (newValue, oldValue) {
                if (newValue && newValue !== oldValue) {
                    $state.go('locations', {areaId:newValue});
                }
            }
        );

        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );
    }]);

angular.module('app.services')
    .service('LocationService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, areaId, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'location_name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/locations/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search: text,
                            area_id: areaId,
                            order_by: predicate,
                            order_by_direction: direction ? 'desc' : 'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            update: function (id, name, area_id, map_lat, map_long) {
                var d = $q.defer();

                var params = {
                    'location_name': name,
                    'area_id': area_id,
                    'map_lat': map_lat,
                    'map_long': map_long
                };

                $http.put(ApiService.base() + CONFIG.API_URL + '/locations/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            add: function (name, area_id, map_lat, map_long) {
                var d = $q.defer();
                var params = {
                    'location_name': name,
                    'area_id': area_id,
                    'map_lat': map_lat,
                    'map_long': map_long
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/locations/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },


            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/locations/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            remove: function (id, first_name, last_name, email) {
                var d = $q.defer();

                var params = {
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': email
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/locations/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        return service;
    }]);



'use strict';

angular.module('app')
    .controller('HeatmapCtrl', ["$scope", "$rootScope", "$state", "$location", "$timeout", "$log", "$filter", "$intercom", "UserService", "currentUser", "IncidentService", "growl", "leafletData", "DateRangeService", "$http", "settings", function ($scope, $rootScope, $state, $location, $timeout, $log, $filter, $intercom, UserService, currentUser, IncidentService, growl, leafletData, DateRangeService, $http, settings) {

        var style_lifts = {
            "color": "#ff0000",
            "dashArray": "15,5",
            "weight": "3"
        };
        var style_buildings = {
            "color": "#0000ff",
            "weight": "1"
        };
        var style_red = {
            "color": "#ff0000",
            "weight": "3"
        };
        var style_green = {
            "color": "#00ff00",
            "weight": "3"
        };
        var style_blue = {
            "color": "#0000ff",
            "weight": "3"
        };
        var style_doubleblue = {
            "color": "#0000ff",
            "dashArray": "15,10,1,10,1,10",
            "weight": "3"
        };
        var style_black = {
            "color": "#000000",
            "weight": "3"
        };
        var style_doubleblack = {
            "color": "#000000",
            "dashArray": "15,10,1,10,1,10",
            "weight": "3"
        };

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Heatmap"
        });

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        var date_format = $scope.datetime_format.slice(0,10);
        $scope.date_format = date_format_mapping[date_format];

        var current = new Date();
        var tz = jstz.determine();

        function toUTC(value) {
            return moment(value, 'YYYY-MM-DD HH:mm:ss').tz(tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format($scope.datetime_format);
        }

        var diff = new Date(current.getTime() - (7 * 24 * 60 * 60 * 1000));
        var tzDate = moment(current).utc().format('YYYY-MM-DD');
        //var start = tzDate + ' 00:00:00';
        var end = tzDate + ' 23:59:59';

        var resort = currentUser.resorts[0];
        var resort_id = resort.resort_id;
        $scope.list = DateRangeService.range;

        $scope.mapLoaded = false;

        var divIcon = function (icon, text) {
            return {
                type: 'div',
                iconSize: [200, 0],
                iconAnchor: [22, 94],
                popupAnchor: [55, -200],
                html: '<div class="' + icon + '\"><span><i></i><strong>' + text + '</strong></span></div>'
            };
        };

        $scope.map = {
            initialized:false,
            defaults: {
//                scrollWheelZoom: false,
                trackResize: true,
                pan: {
                    animate: true,
                    duration: 0.85,
                    easeLinearity: 0.3
                }
            },
            center: {
                lat: resort.map_lat,
                lng: resort.map_lng,
                zoom: 16
            },
            markers: {},
            layers: {
                baselayers: {
                    googleRoadmap: {
                        name: 'Google Streets',
                        layerType: 'ROADMAP',
                        type: 'google'
                    },
                    googleTerrain: {
                        name: 'Google Terrain',
                        layerType: 'TERRAIN',
                        type: 'google'
                    },
                    googleHybrid: {
                        name: 'Google Hybrid',
                        layerType: 'HYBRID',
                        type: 'google'
                    }
                },
                "overlays": {}
            }
        };

        var heatmap = new L.heatLayer([],{radius:25, maxZoom:18, minOpacity:0.25});

        leafletData.getMap().then(function (map) {
            map.addLayer(heatmap);

            if (currentUser && currentUser.resorts.length > 0 && currentUser.resorts[0].map_kml) {

                $http.get(settings.map_kml).success(function (data) {

                    function onEachFeature(feature, layer) {
                        var popupContent = feature.properties.description;
                        var popupTitle = feature.properties.name;

                        if (feature.properties && feature.properties.popupContent) {
                            popupContent += feature.properties.popupContent;
                        }
                        layer.bindPopup(popupContent);
                    }

                    // add buildings
                    L.geoJson(data.buildings, {
                        style: function (feature) {
                            if (data.hasOwnProperty('style_buildings')) {
                                return data.style_buildings;
                            } else {
                                return style_buildings;
                            }
                        },
                        onEachFeature: onEachFeature
                    }).addTo(map);


                    // add runs
                    L.geoJson(data.runs, {
                        style: function (feature) {
                            switch (feature.properties.rating) {
                                case 'red':
                                    if (data.hasOwnProperty('style_red')) {
                                        return data.style_red;
                                    } else {
                                        return style_red; // Easiest / red
                                    }
                                case 'green':
                                    if (data.hasOwnProperty('style_green')) {
                                        return data.style_green;
                                    } else {
                                        return style_green; // Easiest / Green
                                    }
                                case 'blue':
                                    if (data.hasOwnProperty('style_blue')) {
                                        return data.style_blue;
                                    } else {
                                        return style_blue; // Difficult / Blue
                                    }
                                case 'doubleblue':
                                    if (data.hasOwnProperty('style_doubleblue')) {
                                        return data.style_doubleblue;
                                    } else {
                                        return style_doubleblue; // More Difficult / Double Blue
                                    }
                                case 'black':
                                    if (data.hasOwnProperty('style_black')) {
                                        return data.style_black;
                                    } else {
                                        return style_black; // Most Difficult / Black
                                    }
                                case 'doubleblack':
                                    if (data.hasOwnProperty('style_doubleblack')) {
                                        return data.style_doubleblack;
                                    } else {
                                        return style_doubleblack;
                                    }
                            }
                        },
                        onEachFeature: onEachFeature
                    }).addTo(map);

                    // add lifts
                    L.geoJson(data.lifts, {
                        style: function (feature) {
                            if (data.hasOwnProperty('style_lifts')) {
                                return data.style_lifts;
                            } else {
                                return style_lifts;
                            }
                        },
                        onEachFeature: onEachFeature
                    }).addTo(map);


                });
            }
        });

        var timer = null;

        $scope.init = function () {
            growl.info('LOADING_INCIDENTS');
            var start_time = toUTC(moment($scope.list.dateFrom).format('YYYY-MM-DD 00:00:00'));
            var end_time = toUTC(moment($scope.list.dateTo).format('YYYY-MM-DD 23:59:59'));

            IncidentService.fetchAll(start_time, end_time, resort_id, 2000, 1).then(function (data) {
                $scope.loading = false;

                $scope.incidents = data.results;

                leafletData.getMap().then(function (map) {
                    if ($scope.incidents) {
                        var dataPoints = $scope.incidents.map(function (incident) {
                            return [
                                incident.location.lat,
                                incident.location.long,
                                0.2
                            ];
                        });

                        heatmap.setLatLngs(dataPoints);
                        heatmap.redraw();
                    }
                });


                if (!$scope.mapLoaded) {
                    $scope.mapLoaded=true;

                    //$scope.highlight($scope.incidents[0]);
                    $scope.map.center.zoom = settings.initial_map_zoom_level;
                }
            });

            timer = $timeout($scope.init, 15000);

            $scope.$on(
                "$destroy",
                function (event) {

                    $timeout.cancel(timer);

                }
            );
        };

        $scope.getMarker = function (incident) {
            var icon = (incident.status == 'closed' || incident.status == 'onscene') ? 'map-user-icon' : 'map-warning-icon';

            return {
                lat: incident.lat,
                lng: incident.lng,
                icon: divIcon(icon, incident.time_started)

            };
        };

        $scope.info = {
            isOpen: false,
            current: null,
            note: null,
            notes: null
        };

//        $scope.addNote = function () {
//            if ($scope.info.note.length > 0) {
//                growl.info('SAVING_NOTE');
//                IncidentService.saveNote($scope.info.current.id, '', $scope.info.note).then(function (data) {
////                    $log.log(data);
//
//                    growl.info('NOTE_SAVED');
//                    var timenow = new Date();
//                    var time = timenow.getHours() + ":" + timenow.getMinutes();
//                    $scope.info.current.notes.push({message: $scope.info.note, time: time});
//                    $scope.info.note = null;
//                });
//            }
//        };

//        $scope.$on('leafletDirectiveMarker.click', function (e, args) {
////            console.log(args);
//            var id = parseInt(args.markerName)
//            $scope.highlight($scope.incidents[id]);
//            $scope.info.isOpen = true;
//        });
//
//        $scope.$on('leafletDirectiveMap.click', function (e, args) {
//            $scope.info.isOpen = false;
//        });
//
        $scope.highlight = function (incident) {
//            $log.log(incident);
            $scope.map.center.lat = incident.location.lat;
            $scope.map.center.lng = incident.location.long;
//            $scope.map.center.zoom = 16; //incident.zoom;

//            $scope.info.isOpen = false;

            $scope.info.current = incident;
            $scope.info.current.notes = [];
        };

    }]);
'use strict';

angular.module('app')
    .controller('MapCtrl', ['$scope', '$rootScope', '$state', '$location', '$timeout', '$log', '$filter',
        '$intercom', 'UserService', 'QuestionService', 'currentUser', 'IncidentService', 'growl', 'hotkeys',
        '$http', 'questions', '$translate', '$uimodal', 'LS', 'ResortService', 'settings',
        function ($scope, $rootScope, $state, $location, $timeout, $log, $filter, $intercom, UserService,
                  QuestionService, currentUser, IncidentService, growl, hotkeys, $http, questions,
                  $translate, $modal, LS, ResortService, settings) {

        if (currentUser.role == "Patroller") {
            $state.go("incidents");
        }
        var urlBase = $location.protocol() + '://' + $location.host();
        if ($location.port()) urlBase+= ':' + $location.port();
        urlBase += '/images/';
        var style_lifts = {
            "strokeColor": "#ff0000",
            "fillColor": "#ff0000",
            "fillOpacity": 0.5,
            "dashArray": "15,5",
            "strokeWeight": "3"
        };
        var style_buildings = {
            "strokeColor": "#0000ff",
            "fillColor": "#0000ff",
            "fillOpacity": 0.5,
            "strokeWeight": "1"
        };
        var style_red = {
            "strokeColor": "#ff0000",
            "fillColor": "#ff0000",
            "fillOpacity": 0.5,
            "strokeWeight": "3"
        };
        var style_green = {
            "strokeColor": "#00ff00",
            "fillColor": "#00ff00",
            "fillOpacity": 0.5,
            "strokeWeight": "3"
        };
        var style_blue = {
            "strokeColor": "#0000ff",
            "fillColor": "#0000ff",
            "fillOpacity": 0.5,
            "strokeWeight": "3"
        };
        var style_doubleblue = {
            "strokeColor": "#0000ff",
            "fillColor": "#0000ff",
            "dashArray": "15,10,1,10,1,10",
            "fillOpacity": 0.5,
            "strokeWeight": "3"
        };
        var style_black = {
            "strokeColor": "#000000",
            "fillColor": "#000000",
            "fillOpacity": 0.5,
            "strokeWeight": "3"
        };
        var style_doubleblack = {
            "strokeColor": "#000000",
            "fillColor": "#000000",
            "dashArray": "15,10,1,10,1,10",
            "fillOpacity": 0.5,
            "strokeWeight": "3"
        };

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Map"
        });

        var current = new Date();
        var tz = jstz.determine();
        $scope.tz = tz.name();

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        $scope.date_format = $scope.datetime_format.slice(0,10);

        var diff = new Date(current.getTime());// - (7 * 24 * 60 * 60 * 1000));
        var local_start = moment.tz(diff, tz.name()).format('YYYY-MM-DD 00:00:00');
        var local_end = moment.tz(diff, tz.name()).format('YYYY-MM-DD 23:59:59');

        var start = moment.tz(local_start, tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        var end = moment.tz(local_end, tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');

        var resort_id = currentUser.resorts[0].resort_id;
        var update_incident = false;
        var list_incidents = true;
        var selected_incident_pk = null;
        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        $scope.date_format = $scope.datetime_format.slice(0,10);

        $scope.userConnected = currentUser.user_connected.key;
        $scope.incidentToHighlight = 0;
        $scope.tempIncidentPk = 0;


        $scope.schema = {
            type: "object",
            properties: []
        };


//        Schema	Form type
//        "type": "string"	text
//        "type": "number"	number
//        "type": "integer"	number
//        "type": "boolean"	checkbox
//        "type": "object"	fieldset
//        "type": "string" and a "enum"	select
//        "type": "array" and a "enum" in array type	checkboxes
//        "type": "array"	array


        var schema_type = {
            'text': 'string',
            'textarea': 'string',
            'number': 'string',
            'range': 'string',
            'arrows': 'string',
            'select': 'string',
            'multi_select': 'string',
            'radio': 'string',
            'gender': 'string',
            'image': 'object',
            'date_picker': 'string',
            'date_time_picker': 'string',
            'google_map': 'object',
            'file': 'string'
        };

//        Form Type	Becomes
//        fieldset	a fieldset with legend
//        section	just a div
//        conditional	a section with a ng-if
//        actions	horizontal button list, can only submit and buttons as items
//        text	input with type text
//        textarea	a textarea
//        number	input type number
//        password	input type password
//        checkbox	a checkbox
//        checkboxes	list of checkboxes
//        select	a select (single value)
//        submit	a submit button
//        button	a button
//        radios	radio buttons
//        radios-inline	radio buttons in one line
//        radiobuttons	radio buttons with bootstrap buttons
//        help	insert arbitrary html
//        tab	tabs with content
//        array	a list you can add, remove and reorder
//        tabarray	a tabbed version of array

        var form_type = {
            'text': 'text',
            'range': 'text',
            'textarea': 'text',
            'number': 'number',
            'arrows': 'select',
            'select': 'select',
            'multi_select': 'select',
            'radio': 'select',
            'gender': 'select',
            'image': 'file_upload',
            'message': 'help',
            'date_picker': 'date_picker',
            'date_time_picker': 'date_time_picker',
            'google_map': 'googlemap',
            'file': 'text'
        };

        var chosenTypes = [
            'text',
            'range',
            'textarea',
            'number',
            'decimal',
            'arrows',
            'select',
            'multi_select',
            'radio',
            'gender',
            'date_picker',
            'date_time_picker'
        ];

        var tabs = questions.DashboardItems;

        var getChoiceMap = function (mapValues) {
            var _choices = [],
                _titlemap = [];

            // Loop and build choices and titlemap
            angular.forEach(mapValues, function (value) {
                for (var key in value) {
                    if(key.indexOf("controlled") < 0) {
                        _choices.push({"id": key, "name": $translate.instant(value[key])});
                        _titlemap.push({"value": key, "name": $translate.instant(value[key])});
                    }
                }
            });

            return {
                "choices": _choices,
                "titlemap": _titlemap
            }
        };
        $scope.googleMapMarkers = [];
        $scope.findMarker = function(marker){
            return $scope.googleMapMarkers.find(function(googleMapMarker){
                return marker.location.toString() === googleMapMarker.incident.location.toString() &&
                    marker.dt_created === googleMapMarker.incident.dt_created;
            });
        };
        $scope.relocateMarkers = function(){
            var foundDuplicates = [];
            var markersCopy = angular.copy($scope.map.markers);
            var foundIdx = 1;
            markersCopy.map(function(location, i) {
                markersCopy.map(function(nextLocation, j){
                    if (j <= i) return;
                    var found;
                    var deltaLat = (nextLocation.lat - location.lat);
                    var deltaLng = (nextLocation.lng - location.lng);
                    if (deltaLat < .00002) {
                        if (deltaLng < .00002) found = [1,1];
                        else if ((deltaLng * -1) < .00002) found = [1,-1];
                    } else if ((deltaLat * -1) < .00002){
                        if (deltaLng < .00002) found = [-1,1];
                        else if ((deltaLng * -1) < .00002) found = [-1,-1];
                    }
                    if (!found) return;
                    markersCopy[j].lng = markersCopy[j].lng + ((.00003));
                    foundDuplicates.push(j);
                    return;
                });
            });
            markersCopy.map(function(location, i) {
                // var foundDuplicate =
                var compass = Math.cos(((foundDuplicates.length * foundIdx)/36) );
                foundIdx++;
                markersCopy[i].lat = markersCopy[i].lat + (compass  * .00002);
            });
            return markersCopy;
        };
        $scope.getIncidentFromRelocatedMarker = function(incident){
            var markers = $scope.relocateMarkers();
            var found = markers.find(function(marker){
                if (!marker.incident) return;
                return incident.header === marker.incident.header;
            });
            if (found) return found;
            incident.lat = incident.location.lat;
            incident.lng = incident.location.long;
            return incident;
        };
        $scope.initMap = function(resize){
            $scope.googleMap = new google.maps.Map(document.getElementById('map'), {
              zoom: $scope.map.center.zoom,
              center: {lat: $scope.map.center.lat, lng: $scope.map.center.lng }
            });

            if (currentUser && currentUser.resorts.length > 0 && currentUser.resorts[0].map_kml) {
                var getRatingStyle = function (color, g){
                    switch(color){
                        case 'green': return data.style_green? parseStyle(data.style_green, g): style_green;
                        case 'red': return data.style_red? parseStyle(data.style_red, g): style_red;
                        case 'blue': return data.style_blue? parseStyle(data.style_blue, g): style_blue;
                        case 'doubleblue': return data.style_doubleblue? parseStyle(data.style_doubleblue, g):
                            style_doubleblue;
                        case 'black': return data.style_black? parseStyle(data.style_black, g): style_black;
                        case 'doubleblack': return data.style_doubleblack? parseStyle(data.style_doubleblack, g) :
                            style_doubleblack;
                    }
                };
                var parseStyle = function(style, geometry){
                    var result = {
                        fillColor: style.color,
                        fillOpacity: 0.5,
                        strokeColor: style.color,
                        strokeWeight: style.weight
                    }
                    if (!style.dashArray || style.dashArray.length === 0) return result;

                    var path = '<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" version="1.1">';
                    path+= '<line stroke-dasharray="' + style.dashArray + '" ';
                    var x = 1;
                    var y = 1;
                    geometry.forEachLatLng(function(g){
                        path+= 'x' + x + '="' + g.lat() + '" y' + y + '="' + g.lng() + '"';
                        x++; y++;
                    });
                    path+= '/></svg>';
                    result.icon = { path: path };
                    return result;

                };
                var data = settings.geojson;
                if (!data) data = {};
                if (!data.buildings || !data.buildings.features) data.buildings = { features: [] };
                if (!data.runs || !data.runs.features) data.runs = { features: [] };
                if (!data.lifts || !data.lifts.features) data.lifts = { features: [] };

                data.buildings.features = data.buildings.features.map(function(feature){
                    feature.properties.ownerSet = 'BUILDINGS';
                    return feature;
                });
                data.runs.features = data.runs.features.map(function(feature){
                    feature.properties.ownerSet = 'RUNS';
                    return feature;
                });
                data.lifts.features = data.lifts.features.map(function(feature){
                    feature.properties.ownerSet = 'LIFTS';
                    return feature;
                });
                $scope.googleMap.data.addListener('click', function(event){
                    var feature = event.feature.f;
                    var infowindow = new google.maps.InfoWindow({
                      content: feature.description,
                        position: {
                          lat: event.latLng.lat(),
                          lng: event.latLng.lng()
                        }
                    });
                    infowindow.open($scope.googleMap);
                });
                $scope.googleMap.data.addGeoJson(data.buildings);
                $scope.googleMap.data.addGeoJson(data.runs);
                $scope.googleMap.data.addGeoJson(data.lifts);
                $scope.googleMap.data.setStyle(function(feature) {
                    var geometry = feature.getGeometry();
                    switch(feature.getProperty('ownerSet').toUpperCase()){
                        case 'BUILDINGS':
                            return data.style_buildings? parseStyle(data.style_buildings, geometry) : style_buildings;
                        case 'RUNS':
                            return getRatingStyle(feature.getProperty('rating')? feature.getProperty('rating') : '', geometry);
                        case 'LIFTS':
                            return data.style_lifts? parseStyle(data.style_lifts, geometry) : style_lifts;
                    }
                });
            }
            google.maps.event.addListener($scope.googleMap, "rightclick", function(event) {
                var lat = event.latLng.lat();
                var lng = event.latLng.lng();
                $scope.list.add(lat, lng);
            });
            google.maps.event.addListener($scope.googleMap, "click", function(event) {
                angular.forEach($scope.incidents, function (incident) {
                    incident.selected = false;
                });
                $scope.info.isOpen = false;
            });
            if (resize) google.maps.event.trigger($scope.googleMap, 'resize');
            var markersCopy = $scope.relocateMarkers();
            var markers = markersCopy.map(function(location, i) {
                var id = location.incident.header.split(',')[0];
                var marker =  new google.maps.Marker({
                    icon: urlBase + 'pin_' + location.incident.incident_status[0].color + '.png',
                    position: location,
                    label: id,
                    draggable: true
                });
                marker.incident = location.incident;
                google.maps.event.addListener(marker, 'click', function() {
                    $scope.highlight(this.incident);
                });
                google.maps.event.addListener(marker, 'dragend', function(point) {
                    IncidentService.updateIncident(this.incident.incident_id, {
                        "field_52ca456962ba8": {
                            lat: point.latLng.lat(),
                            long: point.latLng.lng()
                        }
                    }).then(function (data) {
                            growl.info("Incident location updated");
                        }, function (error) {
                            growl.error("incident_update_failed");
                    });
                });
                $scope.googleMapMarkers.push(marker);
                return marker;
            });
            $scope.googleMapCluster = new MarkerClusterer($scope.googleMap, markers, {
                imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
            });
        };

        $scope.question_items = [];

        $scope.form_items = [];
        var defaults = {};

        for(var key in tabs) {
            if (tabs.hasOwnProperty(key)) {
                for (var question in tabs[key]) {
                    if (tabs[key].hasOwnProperty(question) && (question == 'Questions' || question == 'RepeatingQuestions')) {

                        for (var m in tabs[key][question]) {
                            if (tabs[key][question].hasOwnProperty(m)) {


                                var q = tabs[key][question][m];

                                if (q.hasOwnProperty("Default")) {
                                    defaults[m] = tabs[key][question][m]["Default"];
                                }

                                var choices = [];
                                var titlemap = [];

                                if (q.Type == 'select' || q.Type == 'multi_select' || q.Type == 'arrows') {

                                    for (var key1 in q.Values) {

                                        if (q.Values.hasOwnProperty(key1)) {

                                            var choiceMap = getChoiceMap(q.Values);

                                            choices = choiceMap.choices;
                                            titlemap = choiceMap.titlemap;

                                        }

                                    }
                                }

                                if (q.Type == 'gender') {
                                    titlemap.push({
                                        value: "male",
                                        name: "Male"
                                    });

                                    titlemap.push({
                                        value: "female",
                                        name: "Female"
                                    });
                                }

                                if (q.Type == 'radio') {
                                    titlemap.push({
                                        value: "yes",
                                        name: "Yes"
                                    });

                                    titlemap.push({
                                        value: "no",
                                        name: "No"
                                    });
                                }

                                var item = {
                                    'field': m,
                                    'label': $translate.instant(q.Label),
                                    'type': q.Type,
                                    'required': q.Required,
                                    'placeholder': $translate.instant(q.Placeholder),
                                    'choices': choices,
                                    'order': q.Order
                                };

                                if (chosenTypes.indexOf(q.Type) > -1) {
                                    var fullkey = m;

                                    if (question == 'RepeatingQuestions') {
                                        fullkey = key + '____' + m;
                                    }

                                    $scope.schema.properties.push({
                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                        'type': schema_type[q.Type],
                                        'order': q.Order,
                                        'fullkey': fullkey,
                                        'key': m,
                                        'formtype': form_type[q.Type],
                                        'placeholder': $translate.instant(q.Placeholder),
                                        'titleMap': titlemap,
                                        'originalType': q.Type
                                    });


                                    $scope.form_items.push({
                                        type: 'fieldset',
                                        htmlClass: 'col-lg-4 col-xs-12',
                                        items: [
                                            {
                                                key: m,
                                                htmlClass: 'pad-left-right',
                                                type: form_type[q.Type],
                                                placeholder: $translate.instant(q.Placeholder),
                                                order: q.Order,
                                                titleMap: titlemap
                                            }
                                        ]
                                    });

                                    $scope.question_items.push(item);
                                } else {

                                    if (q.Type == "repeater" && q.hasOwnProperty('RepeatingQuestions')) {
                                        for (var question1 in tabs[key][question][m]) {
                                            if (tabs[key][question][m].hasOwnProperty(question1) && (question1 == 'Questions' || question1 == 'RepeatingQuestions')) {
                                                for (var n in tabs[key][question][m][question1]) {

                                                    if (tabs[key][question][m][question1].hasOwnProperty(n)) {


                                                        var q1 = tabs[key][question][m][question1][n];

                                                        var choices = [];
                                                        var titlemap = [];

                                                        if (q1.Type == 'select' || q1.Type == 'multi_select' || q1.Type == 'arrows') {

                                                            for (var key11 in q1.Values) {

                                                                if (q1.Values.hasOwnProperty(key11)) {

                                                                    var choiceMap = getChoiceMap(q1.Values);

                                                                    choices = choiceMap.choices;
                                                                    titlemap = choiceMap.titlemap;

                                                                }
                                                            }
                                                        }

                                                        if (q1.Type == 'gender') {
                                                            titlemap.push({
                                                                value: "Male",
                                                                name: "Male"
                                                            });

                                                            titlemap.push({
                                                                value: "Female",
                                                                name: "Female"
                                                            });
                                                        }

                                                        if (q1.Type == 'radio') {
                                                            titlemap.push({
                                                                value: "Yes",
                                                                name: "Yes"
                                                            });

                                                            titlemap.push({
                                                                value: "No",
                                                                name: "No"
                                                            });
                                                        }

                                                        var item1 = {
                                                            'field': n,
                                                            'label': $translate.instant(q1.Label),
                                                            'type': q1.Type,
                                                            'required': q1.Required,
                                                            'placeholder': $translate.instant(q1.Placeholder),
                                                            'choices': choices,
                                                            'order': q1.Order
                                                        };

                                                        if (chosenTypes.indexOf(q1.Type) > -1) {
                                                            $scope.schema.properties.push({
                                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                'type': schema_type[q1.Type],
                                                                'order': q1.Order,
                                                                'fullkey': m + '____' + n,
                                                                'key': n,
                                                                'formtype': form_type[q1.Type],
                                                                'placeholder': $translate.instant(q1.Placeholder),
                                                                'titleMap': titlemap
                                                            });

                                                            $scope.form_items.push({
                                                                type: 'fieldset',
                                                                htmlClass: 'col-lg-4 col-xs-12',
                                                                items: [
                                                                    {
                                                                        key: n,
                                                                        htmlClass: 'pad-left-right',
                                                                        type: form_type[q1.Type],
                                                                        placeholder: $translate.instant(q1.Placeholder),
                                                                        order: q1.Order,
                                                                        titleMap: titlemap
                                                                    }
                                                                ]
                                                            });

                                                            $scope.question_items.push(item1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $scope.model = { filters: [ {} ] };
        $scope.model.filters = _.map(settings.dispatch_field_choice, function (choice) {
            return {
                "field": _.find($scope.schema.properties, function (prop) {
                    return prop.fullkey == choice.field_key;
                })
            };
        });

        hotkeys.bindTo($scope).add({
            combo: 'shift+l',
            description: 'Toggle Incident List',
            callback: function () {
                $log.log('toggle list');
                $scope.toggleList();
            },
            persistent: false
        });

        hotkeys.bindTo($scope).add({
            combo: '+',
            description: 'Zoom in',
            callback: function () {
                $log.log('zooming in');
                if ($scope.map.center.zoom < 18) { $scope.map.center.zoom += 1; }
            },
            persistent: false
        });

        hotkeys.bindTo($scope).add({
            combo: '-',
            description: 'Zoom out',
            callback: function () {
                $log.log('zooming out');
                if ($scope.map.center.zoom > 1) { $scope.map.center.zoom -= 1; }
            },
            persistent: false
        });

        hotkeys.bindTo($scope).add({
            combo: 'return',
            description: 'Add note',
            allowIn: ['INPUT'],
            callback: function (event, hotkey) {
                if (event.target.className.indexOf('note-input') > 0) { $scope.addNote(); }
            },
            persistent: false
        });

        IncidentService.getStatuses().then(function (data) {
//                $log.log(data);
                $scope.status_list = data.map(function (item) {
                    return {
                        key: $translate.instant(item.key),
                        incident_status_id: item.incident_status_id,
                        color: item.color
                    };
                });
            });

        if (questions.DashboardItems && questions.DashboardItems.hasOwnProperty('field_52d47aac9bd13') && questions.DashboardItems.field_52d47aac9bd13 && questions.DashboardItems.field_52d47aac9bd13.hasOwnProperty('RepeatingQuestions') && questions.DashboardItems.field_52d47aac9bd13.RepeatingQuestions && questions.DashboardItems.field_52d47aac9bd13.RepeatingQuestions.hasOwnProperty('patroller') && questions.DashboardItems.field_52d47aac9bd13.RepeatingQuestions.patroller) {
            $scope.assignees = questions.DashboardItems.field_52d47aac9bd13.RepeatingQuestions.patroller.Values.map(function (item) {
                for (var i in item) { return { key: i, name: item[i] }; }
            });
        } else {
            $scope.assignees = null;
        }

        var saveUnsavedIncidentInfo = function (unsavedIncident, data) {
            if (unsavedIncident.notes.length > 0) {
                unsavedIncident.notes.forEach(function addNoteForUnsavedIncident(element, index, array) {
                    IncidentService.addNote(data.incident_id, element.field_52ca448dg94ja3, element.field_52ca448dg94ja4)
                        .then(function (data) {  });
                });
            }
            if (unsavedIncident.hasOwnProperty('updatedAssignee')) {
                IncidentService.updateIncident(data.incident_id, {
                        "assigned_to": unsavedIncident.updatedAssignee.assigned_to + ''
                    }
                ).then(function (data) { });
            }
            if (unsavedIncident.hasOwnProperty('updatedStatus')) {
                IncidentService.updateStatus(data.incident_id, {
                        "status_type_id": unsavedIncident.updatedStatus.status_type_id + '',
                        "status_date": unsavedIncident.updatedStatus.status_date,
                        "updated_by": unsavedIncident.updatedStatus.updated_by
                    }
                ).then(function (data) { });
            }
            if (unsavedIncident.hasOwnProperty('updatedLocation')) {
                IncidentService.updateIncident(data.incident_id,
                    unsavedIncident.updatedLocation
                ).then(function (data) {  });
            }

            if (unsavedIncident.hasOwnProperty('incident_data')) {
                IncidentService.updateIncident(data.incident_id,
                    unsavedIncident.incident_data
                ).then(function (data) {  });
            }

            return true
        };

        $scope.$watch('model.filters', function(newValue, oldValue){

            if(update_incident) {

                var prop_data = {};
                var hasData = false;

                for(var i = 0, current_incident = null; i < $scope.incidents.length; ++i) {
                    if($scope.incidents[i].incident_pk != selected_incident_pk)
                        continue;
                    current_incident = $scope.incidents[i];
                    break;
                }

                _.each($scope.model.filters, function (prop) {
                    if (prop.hasOwnProperty('value') && prop.value) {

                        if (prop.field.fullkey.indexOf('____') > 0) {
                            var res = prop.field.fullkey.split("____", 2);

                            if(current_incident.hasOwnProperty(res[0]) && !prop_data.hasOwnProperty(res[0])) {
                                if (current_incident[res[0]].length > 0) {
                                    prop_data[res[0]] = current_incident[res[0]];
                                }
                            }

                            if(prop_data.hasOwnProperty(res[0])){
                                if(prop_data[res[0]].length > 0){
                                    prop_data[res[0]][0][res[1]] = prop.value;
                                }
                                else{
                                    prop_data[res[0]] = [];
                                    var prop_key_value = {};
                                    prop_key_value[res[1]] = prop.value;
                                    prop_data[res[0]].push(prop_key_value);
                                }
                            }
                            else{
                                prop_data[res[0]] = [];
                                var prop_key_value = {};
                                prop_key_value[res[1]] = prop.value;
                                prop_data[res[0]].push(prop_key_value);
                            }

                            try {
                                if(current_incident.hasOwnProperty(res[0])) {
                                    if (current_incident[res[0]].length > 0) {
                                        current_incident[res[0]][0][res[1]] = prop.value;
                                    }
                                    else{
                                        current_incident[res[0]][0][res[1]] = prop.value;
                                    }
                                }
                                else{
                                    current_incident[res[0]][0][res[1]] = prop.value;
                                }

                            }
                            catch(err){
                                var key_value = {};
                                key_value[res[1]] = prop.value;
                                current_incident[res[0]] = [key_value];
                            }
                        } else {
                            prop_data[prop.field.fullkey] = prop.value;
                            current_incident[prop.field.fullkey] = prop.value;
                        }
                        hasData = true;
                    }
                });

                if (hasData) {
                    if ($scope.info.current.hasOwnProperty("incident_id")) {
                        IncidentService.updateIncident($scope.info.current.incident_id,
                            prop_data
                        ).then(function (data) {
                        }, function (error) {
                            growl.error("incident_update_failed");
                        });
                    }
                    else {
                        var incident = null;
                        var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));

                        unsavedIncidents.forEach(function removeArrayElement(element, index, array) {
                            if (element.temp_incident_id == $scope.info.current.temp_incident_id) {
                                unsavedIncidents[index]['incident_data'] = prop_data;
                                incident = unsavedIncidents[index];
                                LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                            }
                        });

                        for (var j = 0; j < $scope.incidents.length; j++) {
                            if ($scope.incidents[j].temp_incident_id == incident.temp_incident_id) {
                                $.extend($scope.incidents[j], prop_data);
                            }
                        }
                    }
                }
            }
        }, true);

        var createHeader = function (incident) {
            var response = incident;

            var items = [];
            items.push('#' + incident.incident_pk);

            if (incident.assigned_to) {
                items.push($filter('toTitlecase')(incident.assigned_to.name))
            }

            if (incident.injury) {
                var injury_data = $filter('transformInjuryFirst')(incident.injury);
                if (injury_data && injury_data.trim() != "") {
                    items.push($filter('toTitlecase')(injury_data));
                }
            }
//                    items.push($filter('toElapsedTime')(incident.dt_created, '"mm[m] ss[s]'));
            response['local_dt_created'] = moment.utc(incident.dt_created).tz(tz.name()).format('HH:mm:ss');

            items.push(response['local_dt_created']);
            response['header'] = items.join(", ");
            return response
        };

        var createDummyIncident = function (lat, long, accuracy) {
            var incident_pk = JSON.parse(LS.get('nextIncidentPk'));
            if (!lat) lat = $scope.map.center.lat;
            if (!long) long = $scope.map.center.lng;
            if (!accuracy) accuracy = $scope.map.center.zoom;
            var dummy_incident = {
                "incident_pk": '',
                "location": {
                    "lat": lat,
                    "long": long,
                    "accuracy": accuracy
                },
                "incident_status": [{
                    "color": "ff0000",
                    "key": "call_received",
                    "value": 1
                }],
                "assigned_to": {
                    "name": UserService.currentUser()['name'],
                    "user_id": UserService.currentUser()['user_id']
                },
                "dt_created": moment(new Date()).utc().format('YYYY-MM-DD HH:mm:ss'),
                "notes": [],
                "temp_incident_id": $scope.tempIncidentPk
            };
            $scope.tempIncidentPk += 1;
            dummy_incident = createHeader(dummy_incident);
            var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));
            if (unsavedIncidents == null) {
                LS.set('unsavedIncidents', JSON.stringify([dummy_incident]));
            }
            else {
                unsavedIncidents.unshift(dummy_incident);
                LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
            }

            $scope.incidents.unshift(dummy_incident);

            $scope.map.markers = $scope.incidents.map(function (incident) {
                var icon = (incident.status == 'closed' || incident.status == 'onscene') ? 'map-user-icon' : 'map-warning-icon';
                return {
                    // group: '',
                    lat: incident.location.lat || parseFloat(currentUser.resorts[0].map_lat),
                    lng: incident.location.long || parseFloat(currentUser.resorts[0].map_lng),
                    icon: urlBase + 'pin_' + incident.incident_status[0].color + '.png',
                    draggable: true
                };

            });
            $scope.relocateMarkers();

            var myLatLng = { lat: $scope.map.markers[0].lat, lng: $scope.map.markers[0].lng };
            var dummy_marker = new google.maps.Marker({
                icon: urlBase + 'pin_' + dummy_incident.incident_status[0].color + '.png',
                position: myLatLng,
                label: incident_pk,
                draggable: true,
            });
            dummy_marker.incident = dummy_incident;
            google.maps.event.addListener(dummy_marker, 'click', function() {
                $scope.highlight(this.incident);
            });

            google.maps.event.addListener(dummy_marker, 'dragend', function(point) {
                IncidentService.updateIncident(this.incident.incident_id, {
                        "field_52ca456962ba8": {
                            lat: point.latLng.lat(),
                            long: point.latLng.lng()
                        }
                    }).then(function (data) {
                            growl.info("Incident location updated");
                        }, function (error) {
                            growl.error("incident_update_failed");
                    });
            });
            $scope.googleMapMarkers.unshift(dummy_marker);
            dummy_marker.setMap($scope.googleMap);
            return dummy_incident
        };

        $scope.list = {
            dateFrom: start,
            dateTo: end,

            add: function (lat, long, accuracy) {
                growl.info('ADDING_INCIDENT');

                list_incidents = false;

                var incident = createDummyIncident(lat, long, accuracy);

                $scope.highlight(incident);

                if (typeof(lat) === undefined) lat = incident.location.lat;
                if (typeof(long) === undefined) long = incident.location.long;
                if (typeof(accuracy) === undefined) accuracy = incident.location.accuracy;
                var default_data = {
                    "field_52ca456962ba8": {
                        "lat": lat,
                        "long": long,
                        "accuracy": accuracy
                    }
                };

                $.extend(default_data, defaults);

                IncidentService.createIncident(default_data).then(function (data) {
                    growl.info('INCIDENT_ADDED');

                    var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));

                    unsavedIncidents.forEach(function updateIncidentIdUnsavedIncident(element, index, array) {
                        if (element.temp_incident_id == incident.temp_incident_id) {
                            var status = saveUnsavedIncidentInfo(element, data);
                            unsavedIncidents[index]['incident_id'] = data.incident_id;
                            unsavedIncidents[index]['incident_pk'] = data.incident_pk;
                            unsavedIncidents[index] = createHeader(unsavedIncidents[index]);
                            LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                            var marker = $scope.findMarker(unsavedIncidents[index]);
                            marker.setLabel('#' + data.incident_pk.toString());
                        }
                    });

                    $scope.incidents.forEach(function updateIncidentIdLive(element, index, array) {
                        if (element.hasOwnProperty('temp_incident_id')) {
                            if (element.temp_incident_id == incident.temp_incident_id) {
                                $scope.incidents[index]['incident_id'] = data.incident_id;
                                $scope.incidents[index]['incident_pk'] = data.incident_pk;
                                $scope.incidents[index] = createHeader($scope.incidents[index]);
                            }
                        }
                    });
                    $scope.incidentToHighlight = data.incident_id;
                    selected_incident_pk = data.incident_pk;
                    list_incidents = true;

                }, function (reason) {
                    list_incidents = true;
                });
                $scope.init();
            }
        };

        var divIcon = function (icon, text, color) {
            return {
                type: 'div',
                iconSize: [30, 108],
//                iconAnchor: [31, 101],
//                popupAnchor: [55, -200],
                html: '<div class><svg height="50" width="45">' +
                '<path d="m3.03343,0.18326c0.01996,0.09996 -0.39914,0.38318 -0.93798,0.63308c-0.89807,0.4165 -1.17747,0.71639 -1.9558,2.0492c-0.21953,0.38318 -0.21953,26.2064 0,26.58958c0.77833,1.36613 1.03777,1.63269 2.01567,2.06586l1.01781,0.46649l6.12683,0.03332l6.14679,0.04998l0.11974,1.24951c0.1397,1.29949 0.57876,3.89847 1.05773,6.33085c0.73841,3.66523 0.87812,4.265 0.99786,4.49824c0.05987,0.13327 0.19957,0.69972 0.31931,1.24951c0.31931,1.63269 0.73841,3.48197 0.87811,3.78186c0.05988,0.1666 0.15966,0.4165 0.21953,0.5831c0.07983,0.18326 0.2794,0 0.65859,-0.63309c0.29935,-0.4998 0.57876,-0.93297 0.63862,-0.98294c0.05987,-0.04997 0.39914,-0.56645 0.77833,-1.1662c0.35923,-0.59977 1.1176,-1.7993 1.65644,-2.66563c0.5588,-0.86633 1.69636,-2.7156 2.53455,-4.08173c0.81824,-1.38279 1.55665,-2.53234 1.61652,-2.58232c0.05987,-0.04998 0.71846,-1.13289 1.45687,-2.41573c0.75837,-1.28283 1.49678,-2.51567 1.63648,-2.74892l0.2794,-0.4165l5.54807,-0.0833c5.28864,-0.08331 5.58799,-0.09996 6.48606,-0.46649c0.93799,-0.38318 1.75623,-1.21619 1.75623,-1.78263c0,-0.14994 0.17962,-0.31654 0.39915,-0.36653c0.39914,-0.0833 0.39914,-0.23324 0.39914,-13.31145c0,-9.57958 -0.05987,-13.21149 -0.21953,-13.19483c-0.11974,0.03332 -0.45901,-0.31654 -0.75837,-0.74971c-0.53884,-0.81635 -1.43691,-1.44943 -2.07554,-1.44943c-0.21953,0 -0.4191,-0.14994 -0.47897,-0.3332c-0.09978,-0.3332 -0.27939,-0.3332 -19.23865,-0.3332c-13.89015,0 -19.11891,0.04998 -19.079,0.18326z" id="svg_2" fill="#' + color + '"/>' +
                '<text xml:space="preserve" font-weight="bold" text-anchor="middle" font-family="Sans-serif" font-size="14" id="svg_1" y="20.70196" x="23.50113" stroke-linecap="null" stroke-linejoin="null" stroke-dasharray="null" stroke-width="0" fill="#000000">#' + text + '</text>' +
                '</svg></div>'
            };
        };

        $scope.map = {
            initialized: false,
            defaults: {
                //scrollWheelZoom: false,
                //doubleClickZoom:false,
                trackResize: true,
                pan: {
                    animate: true,
                    duration: 0.85,
                    easeLinearity: 0.3
                },
                maxZoom: 21
            },
            center: {
                lat: 70.00,
                lng: 35.00,
                zoom: 3
            },
            markers: [],
            layers: {
                baselayers: {
                    googleRoadmap: {
                        name: 'Map',
                        layerType: 'ROADMAP',
                        type: 'google'
                    },
                    googleTerrain: {
                        name: 'Terrain',
                        layerType: 'TERRAIN',
                        type: 'google'
                    },
                    googleHybrid: {
                        name: 'Satellite',
                        layerType: 'HYBRID',
                        type: 'google'
                    }
                }
            }
        };

        var timer = null;
        $scope.toggleList = function () { $scope.mapNotToggle = !$scope.mapNotToggle; };
        $scope.init = function () {
            if (list_incidents) {
                growl.info('LOADING_INCIDENTS');
                IncidentService.fetchMap(start, end, resort_id, 0, 1).then(function (data) {
                    var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));
                    if (unsavedIncidents != null && unsavedIncidents.length > 0) {
                        var items = [];
                        data.results.forEach(function createListOfIncidentId(element, index, array) {
                            items.push(element.incident_pk);
                        });
                        unsavedIncidents.forEach(function removeSyncedIncidents(element, index, array) {
                            if (items.indexOf(element.incident_pk) != -1) {
                                unsavedIncidents.splice(index, 1);
                            }
                        });
                        LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                    }
                    $scope.incidents = data.results.map(function (incident) { return createHeader(incident); });
                    if (unsavedIncidents != null) {
                        if (unsavedIncidents.length > 0) $scope.incidents = unsavedIncidents.concat($scope.incidents);
                    }
                    $scope.map.markers = $scope.incidents.map(function (incident) {
                        var icon = (incident.status == 'closed' || incident.status == 'onscene') ? 'map-user-icon' : 'map-warning-icon';
                        return {
                            // group: '',
                            lat: incident.location.lat || parseFloat(currentUser.resorts[0].map_lat),
                            lng: incident.location.long || parseFloat(currentUser.resorts[0].map_lng),
                            icon: urlBase + 'pin_' + incident.incident_status[0].color + '.png',
                            draggable: true,
                            incident: incident
//                        icon: divIcon(icon, $filter('toElapsedTime')(incident.dt_created, "mm:ss"))
                        };
                    });

                    if ($scope.info.current == null && !($scope.map.initialized)) {

                        if (currentUser.resorts[0].map_lat && currentUser.resorts[0].map_lng) {
                            $scope.map.center.lat = parseFloat(currentUser.resorts[0].map_lat);
                            $scope.map.center.lng = parseFloat(currentUser.resorts[0].map_lng);

//                        $log.log($scope.map.center);

                        } else {
                            if ($scope.incidents.length > 0) {
                                $scope.highlight($scope.incidents[0]);
                            }
                        }
                        $scope.map.center.zoom = settings.initial_map_zoom_level;
                        $scope.map.initialized = true;
                        $scope.initMap(true);
                    }
                });
            }
            $timeout.cancel(timer);
            timer = $timeout($scope.init, 15000);
        };
        $scope.$on( "$destroy", function (event) { $timeout.cancel(timer); } );
        $scope.getMarker = function (incident) {
            var icon = (incident.status == 'closed' || incident.status == 'onscene') ? 'map-user-icon' : 'map-warning-icon';
            return {
                // group: '',
                lat: incident.location.lat || parseFloat(currentUser.resorts[0].map_lat),
                lng: incident.location.long || parseFloat(currentUser.resorts[0].map_lng),
                    icon: urlBase + 'pin_' + incident.incident_status[0].color + '.png',
                draggable: true
//                icon: divIcon(icon, incident.dt_created)
            };
        };
        $scope.info = {
            isOpen: false,
            current: null,
            note: null,
            notes: null
        };
        $scope.addNote = function () {
            if ($scope.info.note && $scope.info.note.length > 0) {
                growl.info('SAVING_NOTE');

                var time = moment(new Date()).utc().format('YYYY-MM-DD HH:mm:ss');

                if ($scope.info.current.hasOwnProperty("incident_id")) {
                    IncidentService.addNote($scope.info.current.incident_id, $scope.info.note, time).then(function (data) {
                        growl.info('NOTE_SAVED');

                        if (!$scope.info.current.hasOwnProperty('notes') || $scope.info.current.notes == null || $scope.info.current.notes == undefined) {
                            $scope.info.current.notes = [];
                        }


                        data.field_52ca448dg94ja4 = moment.utc(data.field_52ca448dg94ja4).tz(tz.name()).format($scope.datetime_format);

                        $scope.info.current.notes.unshift(data);

                        $scope.info.note = null;
                    });
                }
                else {
                    var data = {
                        "field_52ca448dg94ja3": $scope.info.note,
                        "field_52ca448dg94ja4": time
                    };
                    var incident = null;
                    var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));
                    unsavedIncidents.forEach(function removeArrayElement(element, index, array) {
                        if (element.temp_incident_id == $scope.info.current.temp_incident_id) {
                            unsavedIncidents[index]['notes'].unshift(data);
                            incident = unsavedIncidents[index];
                            LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                        }
                    });
                    data.field_52ca448dg94ja4 = moment.utc(data.field_52ca448dg94ja4).tz(tz.name()).format($scope.datetime_format);

                    for (var j = 0; j < $scope.incidents.length; j++) {
                        if ($scope.incidents[j].temp_incident_id == incident.temp_incident_id) {
                            $scope.incidents[j].notes.unshift(data)
                        }
                    }

                    $scope.info.note = null;
                }
            }
        };

        $scope.updateStatus = function () {
            var statusColor = null;
            var statusName = null;
            for (var i = 0; i < $scope.status_list.length; i++) {
                if ($scope.status_list[i].incident_status_id == $scope.incident_status) {
                    statusColor = $scope.status_list[i].color;
                    statusName = $scope.status_list[i].key;
                }
            }
            if ($scope.incident_status) {
                // if deleted, get confirmation
                if ($scope.incident_status == 9) {
                    var modalInstance = $modal.open({
                        animation: true,
                        templateUrl: '/app/templates/incidents/confirm.html',
                        controller: 'ConfirmModalCtrl',
                        size: 'md'
                    });

                    modalInstance.result.then(function (is_allowed) {

                        if ($scope.info.current.hasOwnProperty("incident_id")) {
                            for (var j = 0; j < $scope.incidents.length; j++) {
                                if ($scope.incidents[j].incident_id == $scope.info.current.incident_id) {
                                    $scope.incidents[j]['incident_status'][0]['color'] = statusColor;
                                    $scope.incidents[j]['incident_status'][0]['key'] = statusName;
                                    $scope.incidents[j]['incident_status'][0]['value'] = $scope.incident_status;
                                }
                            }
                            var marker = $scope.googleMapMarkers.find(function(row){
                            });
                            IncidentService.updateStatus($scope.info.current.incident_id, {
                                    "status_type_id": $scope.incident_status + '',
                                    "status_date": moment(new Date()).utc().format('YYYY-MM-DD HH:mm:ss'),
                                    "updated_by": currentUser.user_id
                                }
                            ).then(function (data) {
                                    growl.info("Status updated");
                                    $scope.init();
                                    $scope.info.isOpen = false;
                                });
                        }
                        else {
                            var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));
                            var incident = null;
                            unsavedIncidents.forEach(function removeArrayElement(element, index, array) {
                                if (element.temp_incident_id == $scope.info.current.temp_incident_id) {
                                    unsavedIncidents[index]['updatedStatus'] = {
                                        "status_type_id": $scope.incident_status + '',
                                        "status_date": moment(new Date()).utc().format('YYYY-MM-DD HH:mm:ss'),
                                        "updated_by": currentUser.user_id
                                    };
                                    unsavedIncidents[index]['incident_status'][0]['color'] = statusColor;
                                    unsavedIncidents[index]['incident_status'][0]['key'] = statusName;
                                    unsavedIncidents[index]['incident_status'][0]['value'] = $scope.incident_status;

                                    incident = unsavedIncidents[index];

                                    for (var j = 0; j < $scope.incidents.length; j++) {
                                        if ($scope.incidents[j].temp_incident_id == incident.temp_incident_id) {
                                            $scope.incidents[j] = incident
                                        }
                                    }
                                    LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                                }
                            });
                        }

                    }, function () {
                        $log.info('Modal dismissed at: ' + new Date());
                    });
                } else {
                    // else update status directly
                    if ($scope.info.current.hasOwnProperty("incident_id")) {
                        var marker = $scope.googleMapMarkers.find(function(row){
                            return $scope.info.current.incident_id == row.incident.incident_id;
                        });
                        var pinColor = statusColor === 'ffff' ? 'cccccc' : statusColor;
                        marker.setIcon(urlBase + 'pin_' + pinColor + '.png');
                        marker.incident.incident_status[0].color = statusColor;
                        marker.incident.incident_status[0].key = statusName;
                        marker.incident.incident_status[0].value = $scope.incident_status;
                        for (var j = 0; j < $scope.incidents.length; j++) {
                            if ($scope.incidents[j].incident_id == $scope.info.current.incident_id) {
                                $scope.incidents[j]['incident_status'][0]['color'] = statusColor;
                                $scope.incidents[j]['incident_status'][0]['key'] = statusName;
                                $scope.incidents[j]['incident_status'][0]['value'] = $scope.incident_status;
                            }
                        }
                        IncidentService.updateStatus($scope.info.current.incident_id, {
                                "status_type_id": $scope.incident_status + '',
                                "status_date": moment(new Date()).utc().format('YYYY-MM-DD HH:mm:ss'),
                                "updated_by": currentUser.user_id
                            }
                        ).then(function (data) {
                                growl.info("Status updated");
                            });
                    }
                    else {
                        var incident = null;
                        var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));
                        unsavedIncidents.forEach(function removeArrayElement(element, index, array) {
                            if (element.incident_pk == $scope.info.current.incident_pk) {
                                unsavedIncidents[index]['updatedStatus'] = {
                                    "status_type_id": $scope.incident_status + '',
                                    "status_date": moment(new Date()).utc().format('YYYY-MM-DD HH:mm:ss'),
                                    "updated_by": currentUser.user_id
                                };

                                unsavedIncidents[index]['incident_status'][0]['color'] = statusColor;
                                unsavedIncidents[index]['incident_status'][0]['key'] = statusName;
                                unsavedIncidents[index]['incident_status'][0]['value'] = $scope.incident_status;

                                incident = unsavedIncidents[index];

                                for (var j = 0; j < $scope.incidents.length; j++) {
                                    if ($scope.incidents[j].temp_incident_id == incident.temp_incident_id) {
                                        $scope.incidents[j] = incident
                                    }
                                }
                                LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                            }
                        });
                    }
                }
            }
        };

        $scope.updateAssignee = function () {
            var assigneeName = null;
            for (var i = 0; i < $scope.assignees.length; i++) {
                if ($scope.assignees[i]['key'] == $scope.assigned_to) {
                    assigneeName = $scope.assignees[i]['name'];
                    break;
                }
            }

            if ($scope.assigned_to) {
                if ($scope.info.current.hasOwnProperty("incident_id")) {
                    for (var j = 0; j < $scope.incidents.length; j++) {
                        if ($scope.incidents[j].incident_id == $scope.info.current.incident_id) {
                            $scope.incidents[j]['assigned_to']['user_id'] = $scope.assigned_to;
                            $scope.incidents[j]['assigned_to']['name'] = assigneeName;
                            $scope.incidents[j] = createHeader($scope.incidents[j]);
                        }
                    }
                    IncidentService.updateIncident($scope.info.current.incident_id, {
                            "assigned_to": $scope.assigned_to + ''
                        }
                    ).then(function (data) {
                            growl.info("Assignee updated");
                        });
                }
                else {
                    var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));
                    var incident = null;
                    unsavedIncidents.forEach(function removeArrayElement(element, index, array) {
                        if (element.incident_pk == $scope.info.current.incident_pk) {
                            unsavedIncidents[index]['updatedAssignee'] = {
                                "assigned_to": $scope.assigned_to + ''
                            };
                            unsavedIncidents[index]['assigned_to']['user_id'] = $scope.assigned_to + '';
                            unsavedIncidents[index]['assigned_to']['name'] = assigneeName;

                            unsavedIncidents[index] = createHeader(unsavedIncidents[index]);
                            incident = unsavedIncidents[index];

                            for (var j = 0; j < $scope.incidents.length; j++) {
                                if ($scope.incidents[j].temp_incident_id == incident.temp_incident_id) {
                                    $scope.incidents[j] = incident
                                }
                            }
                            LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                        }
                    });
                }
            }
        };

        $scope.highlight = function (incident) {
//            $log.log(incident);
            $scope.info.isOpen = false;
            angular.forEach($scope.incidents, function (incident) {
                incident.selected = false;
            });

            incident.selected = true;
            selected_incident_pk = incident.incident_pk;

            var incidentMarker = $scope.getIncidentFromRelocatedMarker(incident);
            $scope.map.center.lat = parseFloat(incidentMarker.lat) || parseFloat(currentUser.resorts[0].map_lat);
            $scope.map.center.lng = parseFloat(incidentMarker.lng) || parseFloat(currentUser.resorts[0].map_lng);

            $scope.googleMap.setCenter(incidentMarker);
//            $scope.map.center.zoom = 16; //incident.zoom;

//            $scope.info.isOpen = false;

            $scope.info.current = incident;
//            $scope.info.current.datetime = incident.datetime.toLocaleString().replace('at ', '');
            if (!incident.hasOwnProperty('notes')) {
                $scope.info.current.notes = [];
            }

            $scope.incident_status = $scope.info.current.incident_status[0].value;
            $scope.incident_status = $scope.info.current.incident_status[0].value;
            $scope.assigned_to = $scope.info.current.assigned_to.user_id;
            update_incident = false;

            $scope.model.filters.map(function(currentValue, index){
                if (!currentValue) return;
                if (!currentValue.field) return;
                if (!currentValue.field.fullkey) return;
                if (currentValue.field.fullkey.indexOf('____') > 0) {
                    var res = currentValue.field.fullkey.split("____", 2);
                    try {
                        $scope.model.filters[index].value = incident[res[0]][0][res[1]];
                    }
                    catch(err) {
                        $scope.model.filters[index].value = "";
                    }
                }
                else {
                    $scope.model.filters[index].value = incident[currentValue.field.key];
                }
            });

            setTimeout(function(){ update_incident = true; }, 200);

            if ($scope.info.current.hasOwnProperty("incident_id")) {
                growl.info('LOADING_NOTES');
                IncidentService.fetchNotes($scope.info.current.incident_id).then(function (response) {

                    $scope.info.current.notes = [];
//                $log.log(response);

                    angular.forEach(response.results, function (value, key) {
                        $scope.info.current.notes.push({
                            field_52ca448dg94ja3: value.field_52ca448dg94ja3,
                            field_52ca448dg94ja4: moment.utc(value.field_52ca448dg94ja4).tz(tz.name()).format($scope.datetime_format),
                            field_52ca448dg94ja5: value.field_52ca448dg94ja5,
                            note_id: value.note_id
                        });
                    });
//                $scope.info.current.notes = response.results;
                });
            }

            $scope.info.isOpen = true;
        };

        $scope.saveUnsavedIncidentRefresh = function () {
            var unsavedIncidents = JSON.parse(LS.get('unsavedIncidents'));

            if (unsavedIncidents != null && unsavedIncidents.length > 0) {

                unsavedIncidents.forEach(function saveEachIncident(unsavedElement, index, array) {
                    IncidentService.createIncident({
                        "field_52ca456962ba8": {
                            "lat": unsavedElement.location.lat,
                            "long": unsavedElement.location.long,
                            "accuracy": unsavedElement.location.accuracy
                        }
                    }).then(function (data) {
                        unsavedIncidents.forEach(function removeArrayElement(element, index, array) {
                            if (element.incident_pk == unsavedElement.incident_pk) {
                                var status = saveUnsavedIncidentInfo(element, data);
                                unsavedIncidents.splice(index, 1);
                                LS.set('unsavedIncidents', JSON.stringify(unsavedIncidents));
                            }
                        });

                    }, function (reason) {

                    });
                });

                $scope.init();

            }
            return true
        };

        // var syncStatus = $scope.saveUnsavedIncidentRefresh();

    
}]);

'use strict';


angular.module('app')
    .controller('ConfirmRegenerateModalCtrl', ['$scope', '$modalInstance', function ($scope, $modalInstance) {

        $scope.ok = function () {
            $modalInstance.close(true);
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }])
    .controller('ResortSettingsCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'ResortService', 'currentUser', 'growl', 'questions', '$translate', '$uimodal',  function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, ResortService, currentUser, growl, questions, $translate, $modal) {

        //$intercom.update({
        //    email: currentUser.email,
        //    name: currentUser.name,
        //    created_at: new Date(),
        //    user_id: currentUser.user_id,
        //    company: {
        //        id: currentUser.resorts[0].resort_id,
        //        name: currentUser.resorts[0].resort_name
        //    },
        //    role: currentUser.role_id[0].key,
        //    dashboard_feature_last_used: "Users"
        //});

        $scope.currentUser = currentUser;
        //$scope.showRole = false;
        //$scope.showPermissions = false;
        //$scope.showDeleteUser = false;

        var id = $stateParams.resortId;


        $scope.roles = [
            {key: 1, name: 'Patroller'},
            {key: 2, name: 'Dispatcher'},
            {key: 3, name: 'Manager'}
        ];

        $scope.paper_sizes = [
            {key: 0, name: 'A4'},
            {key: 1, name: 'US Paper'}
        ];

        $scope.unit_formats = [
            {key: 0, name: 'Imperial'},
            {key: 1, name: 'Metric'}
        ];

        $scope.datetime_formats = [
            {key: 0, name: 'MM/DD/YYYY'},
            {key: 1, name: 'DD/MM/YYYY'}
        ];

        $scope.timezones = [
            {key: 'Africa/Abidjan', name: 'Africa/Abidjan'},
            {key: 'Africa/Accra', name: 'Africa/Accra'},
            {key: 'Africa/Addis_Ababa', name: 'Africa/Addis_Ababa'},
            {key: 'Africa/Algiers', name: 'Africa/Algiers'},
            {key: 'Africa/Asmara', name: 'Africa/Asmara'},
            {key: 'Africa/Asmera', name: 'Africa/Asmera'},
            {key: 'Africa/Bamako', name: 'Africa/Bamako'},
            {key: 'Africa/Bangui', name: 'Africa/Bangui'},
            {key: 'Africa/Banjul', name: 'Africa/Banjul'},
            {key: 'Africa/Bissau', name: 'Africa/Bissau'},
            {key: 'Africa/Blantyre', name: 'Africa/Blantyre'},
            {key: 'Africa/Brazzaville', name: 'Africa/Brazzaville'},
            {key: 'Africa/Bujumbura', name: 'Africa/Bujumbura'},
            {key: 'Africa/Cairo', name: 'Africa/Cairo'},
            {key: 'Africa/Casablanca', name: 'Africa/Casablanca'},
            {key: 'Africa/Ceuta', name: 'Africa/Ceuta'},
            {key: 'Africa/Conakry', name: 'Africa/Conakry'},
            {key: 'Africa/Dakar', name: 'Africa/Dakar'},
            {key: 'Africa/Dar_es_Salaam', name: 'Africa/Dar_es_Salaam'},
            {key: 'Africa/Djibouti', name: 'Africa/Djibouti'},
            {key: 'Africa/Douala', name: 'Africa/Douala'},
            {key: 'Africa/El_Aaiun', name: 'Africa/El_Aaiun'},
            {key: 'Africa/Freetown', name: 'Africa/Freetown'},
            {key: 'Africa/Gaborone', name: 'Africa/Gaborone'},
            {key: 'Africa/Harare', name: 'Africa/Harare'},
            {key: 'Africa/Johannesburg', name: 'Africa/Johannesburg'},
            {key: 'Africa/Juba', name: 'Africa/Juba'},
            {key: 'Africa/Kampala', name: 'Africa/Kampala'},
            {key: 'Africa/Khartoum', name: 'Africa/Khartoum'},
            {key: 'Africa/Kigali', name: 'Africa/Kigali'},
            {key: 'Africa/Kinshasa', name: 'Africa/Kinshasa'},
            {key: 'Africa/Lagos', name: 'Africa/Lagos'},
            {key: 'Africa/Libreville', name: 'Africa/Libreville'},
            {key: 'Africa/Lome', name: 'Africa/Lome'},
            {key: 'Africa/Luanda', name: 'Africa/Luanda'},
            {key: 'Africa/Lubumbashi', name: 'Africa/Lubumbashi'},
            {key: 'Africa/Lusaka', name: 'Africa/Lusaka'},
            {key: 'Africa/Malabo', name: 'Africa/Malabo'},
            {key: 'Africa/Maputo', name: 'Africa/Maputo'},
            {key: 'Africa/Maseru', name: 'Africa/Maseru'},
            {key: 'Africa/Mbabane', name: 'Africa/Mbabane'},
            {key: 'Africa/Mogadishu', name: 'Africa/Mogadishu'},
            {key: 'Africa/Monrovia', name: 'Africa/Monrovia'},
            {key: 'Africa/Nairobi', name: 'Africa/Nairobi'},
            {key: 'Africa/Ndjamena', name: 'Africa/Ndjamena'},
            {key: 'Africa/Niamey', name: 'Africa/Niamey'},
            {key: 'Africa/Nouakchott', name: 'Africa/Nouakchott'},
            {key: 'Africa/Ouagadougou', name: 'Africa/Ouagadougou'},
            {key: 'Africa/Porto-Novo', name: 'Africa/Porto-Novo'},
            {key: 'Africa/Sao_Tome', name: 'Africa/Sao_Tome'},
            {key: 'Africa/Timbuktu', name: 'Africa/Timbuktu'},
            {key: 'Africa/Tripoli', name: 'Africa/Tripoli'},
            {key: 'Africa/Tunis', name: 'Africa/Tunis'},
            {key: 'Africa/Windhoek', name: 'Africa/Windhoek'},
            {key: 'America/Adak', name: 'America/Adak'},
            {key: 'America/Anchorage', name: 'America/Anchorage'},
            {key: 'America/Anguilla', name: 'America/Anguilla'},
            {key: 'America/Antigua', name: 'America/Antigua'},
            {key: 'America/Araguaina', name: 'America/Araguaina'},
            {key: 'America/Argentina/Buenos_Aires', name: 'America/Argentina/Buenos_Aires'},
            {key: 'America/Argentina/Catamarca', name: 'America/Argentina/Catamarca'},
            {key: 'America/Argentina/ComodRivadavia', name: 'America/Argentina/ComodRivadavia'},
            {key: 'America/Argentina/Cordoba', name: 'America/Argentina/Cordoba'},
            {key: 'America/Argentina/Jujuy', name: 'America/Argentina/Jujuy'},
            {key: 'America/Argentina/La_Rioja', name: 'America/Argentina/La_Rioja'},
            {key: 'America/Argentina/Mendoza', name: 'America/Argentina/Mendoza'},
            {key: 'America/Argentina/Rio_Gallegos', name: 'America/Argentina/Rio_Gallegos'},
            {key: 'America/Argentina/Salta', name: 'America/Argentina/Salta'},
            {key: 'America/Argentina/San_Juan', name: 'America/Argentina/San_Juan'},
            {key: 'America/Argentina/San_Luis', name: 'America/Argentina/San_Luis'},
            {key: 'America/Argentina/Tucuman', name: 'America/Argentina/Tucuman'},
            {key: 'America/Argentina/Ushuaia', name: 'America/Argentina/Ushuaia'},
            {key: 'America/Aruba', name: 'America/Aruba'},
            {key: 'America/Asuncion', name: 'America/Asuncion'},
            {key: 'America/Atikokan', name: 'America/Atikokan'},
            {key: 'America/Atka', name: 'America/Atka'},
            {key: 'America/Bahia', name: 'America/Bahia'},
            {key: 'America/Bahia_Banderas', name: 'America/Bahia_Banderas'},
            {key: 'America/Barbados', name: 'America/Barbados'},
            {key: 'America/Belem', name: 'America/Belem'},
            {key: 'America/Belize', name: 'America/Belize'},
            {key: 'America/Blanc-Sablon', name: 'America/Blanc-Sablon'},
            {key: 'America/Boa_Vista', name: 'America/Boa_Vista'},
            {key: 'America/Bogota', name: 'America/Bogota'},
            {key: 'America/Boise', name: 'America/Boise'},
            {key: 'America/Buenos_Aires', name: 'America/Buenos_Aires'},
            {key: 'America/Cambridge_Bay', name: 'America/Cambridge_Bay'},
            {key: 'America/Campo_Grande', name: 'America/Campo_Grande'},
            {key: 'America/Cancun', name: 'America/Cancun'},
            {key: 'America/Caracas', name: 'America/Caracas'},
            {key: 'America/Catamarca', name: 'America/Catamarca'},
            {key: 'America/Cayenne', name: 'America/Cayenne'},
            {key: 'America/Cayman', name: 'America/Cayman'},
            {key: 'America/Chicago', name: 'America/Chicago'},
            {key: 'America/Chihuahua', name: 'America/Chihuahua'},
            {key: 'America/Coral_Harbour', name: 'America/Coral_Harbour'},
            {key: 'America/Cordoba', name: 'America/Cordoba'},
            {key: 'America/Costa_Rica', name: 'America/Costa_Rica'},
            {key: 'America/Creston', name: 'America/Creston'},
            {key: 'America/Cuiaba', name: 'America/Cuiaba'},
            {key: 'America/Curacao', name: 'America/Curacao'},
            {key: 'America/Danmarkshavn', name: 'America/Danmarkshavn'},
            {key: 'America/Dawson', name: 'America/Dawson'},
            {key: 'America/Dawson_Creek', name: 'America/Dawson_Creek'},
            {key: 'America/Denver', name: 'America/Denver'},
            {key: 'America/Detroit', name: 'America/Detroit'},
            {key: 'America/Dominica', name: 'America/Dominica'},
            {key: 'America/Edmonton', name: 'America/Edmonton'},
            {key: 'America/Eirunepe', name: 'America/Eirunepe'},
            {key: 'America/El_Salvador', name: 'America/El_Salvador'},
            {key: 'America/Ensenada', name: 'America/Ensenada'},
            {key: 'America/Fort_Wayne', name: 'America/Fort_Wayne'},
            {key: 'America/Fortaleza', name: 'America/Fortaleza'},
            {key: 'America/Glace_Bay', name: 'America/Glace_Bay'},
            {key: 'America/Godthab', name: 'America/Godthab'},
            {key: 'America/Goose_Bay', name: 'America/Goose_Bay'},
            {key: 'America/Grand_Turk', name: 'America/Grand_Turk'},
            {key: 'America/Grenada', name: 'America/Grenada'},
            {key: 'America/Guadeloupe', name: 'America/Guadeloupe'},
            {key: 'America/Guatemala', name: 'America/Guatemala'},
            {key: 'America/Guayaquil', name: 'America/Guayaquil'},
            {key: 'America/Guyana', name: 'America/Guyana'},
            {key: 'America/Halifax', name: 'America/Halifax'},
            {key: 'America/Havana', name: 'America/Havana'},
            {key: 'America/Hermosillo', name: 'America/Hermosillo'},
            {key: 'America/Indiana/Indianapolis', name: 'America/Indiana/Indianapolis'},
            {key: 'America/Indiana/Knox', name: 'America/Indiana/Knox'},
            {key: 'America/Indiana/Marengo', name: 'America/Indiana/Marengo'},
            {key: 'America/Indiana/Petersburg', name: 'America/Indiana/Petersburg'},
            {key: 'America/Indiana/Tell_City', name: 'America/Indiana/Tell_City'},
            {key: 'America/Indiana/Vevay', name: 'America/Indiana/Vevay'},
            {key: 'America/Indiana/Vincennes', name: 'America/Indiana/Vincennes'},
            {key: 'America/Indiana/Winamac', name: 'America/Indiana/Winamac'},
            {key: 'America/Indianapolis', name: 'America/Indianapolis'},
            {key: 'America/Inuvik', name: 'America/Inuvik'},
            {key: 'America/Iqaluit', name: 'America/Iqaluit'},
            {key: 'America/Jamaica', name: 'America/Jamaica'},
            {key: 'America/Jujuy', name: 'America/Jujuy'},
            {key: 'America/Juneau', name: 'America/Juneau'},
            {key: 'America/Kentucky/Louisville', name: 'America/Kentucky/Louisville'},
            {key: 'America/Kentucky/Monticello', name: 'America/Kentucky/Monticello'},
            {key: 'America/Knox_IN', name: 'America/Knox_IN'},
            {key: 'America/Kralendijk', name: 'America/Kralendijk'},
            {key: 'America/La_Paz', name: 'America/La_Paz'},
            {key: 'America/Lima', name: 'America/Lima'},
            {key: 'America/Los_Angeles', name: 'America/Los_Angeles'},
            {key: 'America/Louisville', name: 'America/Louisville'},
            {key: 'America/Lower_Princes', name: 'America/Lower_Princes'},
            {key: 'America/Maceio', name: 'America/Maceio'},
            {key: 'America/Managua', name: 'America/Managua'},
            {key: 'America/Manaus', name: 'America/Manaus'},
            {key: 'America/Marigot', name: 'America/Marigot'},
            {key: 'America/Martinique', name: 'America/Martinique'},
            {key: 'America/Matamoros', name: 'America/Matamoros'},
            {key: 'America/Mazatlan', name: 'America/Mazatlan'},
            {key: 'America/Mendoza', name: 'America/Mendoza'},
            {key: 'America/Menominee', name: 'America/Menominee'},
            {key: 'America/Merida', name: 'America/Merida'},
            {key: 'America/Metlakatla', name: 'America/Metlakatla'},
            {key: 'America/Mexico_City', name: 'America/Mexico_City'},
            {key: 'America/Miquelon', name: 'America/Miquelon'},
            {key: 'America/Moncton', name: 'America/Moncton'},
            {key: 'America/Monterrey', name: 'America/Monterrey'},
            {key: 'America/Montevideo', name: 'America/Montevideo'},
            {key: 'America/Montreal', name: 'America/Montreal'},
            {key: 'America/Montserrat', name: 'America/Montserrat'},
            {key: 'America/Nassau', name: 'America/Nassau'},
            {key: 'America/New_York', name: 'America/New_York'},
            {key: 'America/Nipigon', name: 'America/Nipigon'},
            {key: 'America/Nome', name: 'America/Nome'},
            {key: 'America/Noronha', name: 'America/Noronha'},
            {key: 'America/North_Dakota/Beulah', name: 'America/North_Dakota/Beulah'},
            {key: 'America/North_Dakota/Center', name: 'America/North_Dakota/Center'},
            {key: 'America/North_Dakota/New_Salem', name: 'America/North_Dakota/New_Salem'},
            {key: 'America/Ojinaga', name: 'America/Ojinaga'},
            {key: 'America/Panama', name: 'America/Panama'},
            {key: 'America/Pangnirtung', name: 'America/Pangnirtung'},
            {key: 'America/Paramaribo', name: 'America/Paramaribo'},
            {key: 'America/Phoenix', name: 'America/Phoenix'},
            {key: 'America/Port-au-Prince', name: 'America/Port-au-Prince'},
            {key: 'America/Port_of_Spain', name: 'America/Port_of_Spain'},
            {key: 'America/Porto_Acre', name: 'America/Porto_Acre'},
            {key: 'America/Porto_Velho', name: 'America/Porto_Velho'},
            {key: 'America/Puerto_Rico', name: 'America/Puerto_Rico'},
            {key: 'America/Rainy_River', name: 'America/Rainy_River'},
            {key: 'America/Rankin_Inlet', name: 'America/Rankin_Inlet'},
            {key: 'America/Recife', name: 'America/Recife'},
            {key: 'America/Regina', name: 'America/Regina'},
            {key: 'America/Resolute', name: 'America/Resolute'},
            {key: 'America/Rio_Branco', name: 'America/Rio_Branco'},
            {key: 'America/Rosario', name: 'America/Rosario'},
            {key: 'America/Santa_Isabel', name: 'America/Santa_Isabel'},
            {key: 'America/Santarem', name: 'America/Santarem'},
            {key: 'America/Santiago', name: 'America/Santiago'},
            {key: 'America/Santo_Domingo', name: 'America/Santo_Domingo'},
            {key: 'America/Sao_Paulo', name: 'America/Sao_Paulo'},
            {key: 'America/Scoresbysund', name: 'America/Scoresbysund'},
            {key: 'America/Shiprock', name: 'America/Shiprock'},
            {key: 'America/Sitka', name: 'America/Sitka'},
            {key: 'America/St_Barthelemy', name: 'America/St_Barthelemy'},
            {key: 'America/St_Johns', name: 'America/St_Johns'},
            {key: 'America/St_Kitts', name: 'America/St_Kitts'},
            {key: 'America/St_Lucia', name: 'America/St_Lucia'},
            {key: 'America/St_Thomas', name: 'America/St_Thomas'},
            {key: 'America/St_Vincent', name: 'America/St_Vincent'},
            {key: 'America/Swift_Current', name: 'America/Swift_Current'},
            {key: 'America/Tegucigalpa', name: 'America/Tegucigalpa'},
            {key: 'America/Thule', name: 'America/Thule'},
            {key: 'America/Thunder_Bay', name: 'America/Thunder_Bay'},
            {key: 'America/Tijuana', name: 'America/Tijuana'},
            {key: 'America/Toronto', name: 'America/Toronto'},
            {key: 'America/Tortola', name: 'America/Tortola'},
            {key: 'America/Vancouver', name: 'America/Vancouver'},
            {key: 'America/Virgin', name: 'America/Virgin'},
            {key: 'America/Whitehorse', name: 'America/Whitehorse'},
            {key: 'America/Winnipeg', name: 'America/Winnipeg'},
            {key: 'America/Yakutat', name: 'America/Yakutat'},
            {key: 'America/Yellowknife', name: 'America/Yellowknife'},
            {key: 'Antarctica/Casey', name: 'Antarctica/Casey'},
            {key: 'Antarctica/Davis', name: 'Antarctica/Davis'},
            {key: 'Antarctica/DumontDUrville', name: 'Antarctica/DumontDUrville'},
            {key: 'Antarctica/Macquarie', name: 'Antarctica/Macquarie'},
            {key: 'Antarctica/Mawson', name: 'Antarctica/Mawson'},
            {key: 'Antarctica/McMurdo', name: 'Antarctica/McMurdo'},
            {key: 'Antarctica/Palmer', name: 'Antarctica/Palmer'},
            {key: 'Antarctica/Rothera', name: 'Antarctica/Rothera'},
            {key: 'Antarctica/South_Pole', name: 'Antarctica/South_Pole'},
            {key: 'Antarctica/Syowa', name: 'Antarctica/Syowa'},
            {key: 'Antarctica/Troll', name: 'Antarctica/Troll'},
            {key: 'Antarctica/Vostok', name: 'Antarctica/Vostok'},
            {key: 'Arctic/Longyearbyen', name: 'Arctic/Longyearbyen'},
            {key: 'Asia/Aden', name: 'Asia/Aden'},
            {key: 'Asia/Almaty', name: 'Asia/Almaty'},
            {key: 'Asia/Amman', name: 'Asia/Amman'},
            {key: 'Asia/Anadyr', name: 'Asia/Anadyr'},
            {key: 'Asia/Aqtau', name: 'Asia/Aqtau'},
            {key: 'Asia/Aqtobe', name: 'Asia/Aqtobe'},
            {key: 'Asia/Ashgabat', name: 'Asia/Ashgabat'},
            {key: 'Asia/Ashkhabad', name: 'Asia/Ashkhabad'},
            {key: 'Asia/Baghdad', name: 'Asia/Baghdad'},
            {key: 'Asia/Bahrain', name: 'Asia/Bahrain'},
            {key: 'Asia/Baku', name: 'Asia/Baku'},
            {key: 'Asia/Bangkok', name: 'Asia/Bangkok'},
            {key: 'Asia/Beirut', name: 'Asia/Beirut'},
            {key: 'Asia/Bishkek', name: 'Asia/Bishkek'},
            {key: 'Asia/Brunei', name: 'Asia/Brunei'},
            {key: 'Asia/Calcutta', name: 'Asia/Calcutta'},
            {key: 'Asia/Chita', name: 'Asia/Chita'},
            {key: 'Asia/Choibalsan', name: 'Asia/Choibalsan'},
            {key: 'Asia/Chongqing', name: 'Asia/Chongqing'},
            {key: 'Asia/Chungking', name: 'Asia/Chungking'},
            {key: 'Asia/Colombo', name: 'Asia/Colombo'},
            {key: 'Asia/Dacca', name: 'Asia/Dacca'},
            {key: 'Asia/Damascus', name: 'Asia/Damascus'},
            {key: 'Asia/Dhaka', name: 'Asia/Dhaka'},
            {key: 'Asia/Dili', name: 'Asia/Dili'},
            {key: 'Asia/Dubai', name: 'Asia/Dubai'},
            {key: 'Asia/Dushanbe', name: 'Asia/Dushanbe'},
            {key: 'Asia/Gaza', name: 'Asia/Gaza'},
            {key: 'Asia/Harbin', name: 'Asia/Harbin'},
            {key: 'Asia/Hebron', name: 'Asia/Hebron'},
            {key: 'Asia/Ho_Chi_Minh', name: 'Asia/Ho_Chi_Minh'},
            {key: 'Asia/Hong_Kong', name: 'Asia/Hong_Kong'},
            {key: 'Asia/Hovd', name: 'Asia/Hovd'},
            {key: 'Asia/Irkutsk', name: 'Asia/Irkutsk'},
            {key: 'Asia/Istanbul', name: 'Asia/Istanbul'},
            {key: 'Asia/Jakarta', name: 'Asia/Jakarta'},
            {key: 'Asia/Jayapura', name: 'Asia/Jayapura'},
            {key: 'Asia/Jerusalem', name: 'Asia/Jerusalem'},
            {key: 'Asia/Kabul', name: 'Asia/Kabul'},
            {key: 'Asia/Kamchatka', name: 'Asia/Kamchatka'},
            {key: 'Asia/Karachi', name: 'Asia/Karachi'},
            {key: 'Asia/Kashgar', name: 'Asia/Kashgar'},
            {key: 'Asia/Kathmandu', name: 'Asia/Kathmandu'},
            {key: 'Asia/Katmandu', name: 'Asia/Katmandu'},
            {key: 'Asia/Khandyga', name: 'Asia/Khandyga'},
            {key: 'Asia/Kolkata', name: 'Asia/Kolkata'},
            {key: 'Asia/Krasnoyarsk', name: 'Asia/Krasnoyarsk'},
            {key: 'Asia/Kuala_Lumpur', name: 'Asia/Kuala_Lumpur'},
            {key: 'Asia/Kuching', name: 'Asia/Kuching'},
            {key: 'Asia/Kuwait', name: 'Asia/Kuwait'},
            {key: 'Asia/Macao', name: 'Asia/Macao'},
            {key: 'Asia/Macau', name: 'Asia/Macau'},
            {key: 'Asia/Magadan', name: 'Asia/Magadan'},
            {key: 'Asia/Makassar', name: 'Asia/Makassar'},
            {key: 'Asia/Manila', name: 'Asia/Manila'},
            {key: 'Asia/Muscat', name: 'Asia/Muscat'},
            {key: 'Asia/Nicosia', name: 'Asia/Nicosia'},
            {key: 'Asia/Novokuznetsk', name: 'Asia/Novokuznetsk'},
            {key: 'Asia/Novosibirsk', name: 'Asia/Novosibirsk'},
            {key: 'Asia/Omsk', name: 'Asia/Omsk'},
            {key: 'Asia/Oral', name: 'Asia/Oral'},
            {key: 'Asia/Phnom_Penh', name: 'Asia/Phnom_Penh'},
            {key: 'Asia/Pontianak', name: 'Asia/Pontianak'},
            {key: 'Asia/Pyongyang', name: 'Asia/Pyongyang'},
            {key: 'Asia/Qatar', name: 'Asia/Qatar'},
            {key: 'Asia/Qyzylorda', name: 'Asia/Qyzylorda'},
            {key: 'Asia/Rangoon', name: 'Asia/Rangoon'},
            {key: 'Asia/Riyadh', name: 'Asia/Riyadh'},
            {key: 'Asia/Saigon', name: 'Asia/Saigon'},
            {key: 'Asia/Sakhalin', name: 'Asia/Sakhalin'},
            {key: 'Asia/Samarkand', name: 'Asia/Samarkand'},
            {key: 'Asia/Seoul', name: 'Asia/Seoul'},
            {key: 'Asia/Shanghai', name: 'Asia/Shanghai'},
            {key: 'Asia/Singapore', name: 'Asia/Singapore'},
            {key: 'Asia/Srednekolymsk', name: 'Asia/Srednekolymsk'},
            {key: 'Asia/Taipei', name: 'Asia/Taipei'},
            {key: 'Asia/Tashkent', name: 'Asia/Tashkent'},
            {key: 'Asia/Tbilisi', name: 'Asia/Tbilisi'},
            {key: 'Asia/Tehran', name: 'Asia/Tehran'},
            {key: 'Asia/Tel_Aviv', name: 'Asia/Tel_Aviv'},
            {key: 'Asia/Thimbu', name: 'Asia/Thimbu'},
            {key: 'Asia/Thimphu', name: 'Asia/Thimphu'},
            {key: 'Asia/Tokyo', name: 'Asia/Tokyo'},
            {key: 'Asia/Ujung_Pandang', name: 'Asia/Ujung_Pandang'},
            {key: 'Asia/Ulaanbaatar', name: 'Asia/Ulaanbaatar'},
            {key: 'Asia/Ulan_Bator', name: 'Asia/Ulan_Bator'},
            {key: 'Asia/Urumqi', name: 'Asia/Urumqi'},
            {key: 'Asia/Ust-Nera', name: 'Asia/Ust-Nera'},
            {key: 'Asia/Vientiane', name: 'Asia/Vientiane'},
            {key: 'Asia/Vladivostok', name: 'Asia/Vladivostok'},
            {key: 'Asia/Yakutsk', name: 'Asia/Yakutsk'},
            {key: 'Asia/Yekaterinburg', name: 'Asia/Yekaterinburg'},
            {key: 'Asia/Yerevan', name: 'Asia/Yerevan'},
            {key: 'Atlantic/Azores', name: 'Atlantic/Azores'},
            {key: 'Atlantic/Bermuda', name: 'Atlantic/Bermuda'},
            {key: 'Atlantic/Canary', name: 'Atlantic/Canary'},
            {key: 'Atlantic/Cape_Verde', name: 'Atlantic/Cape_Verde'},
            {key: 'Atlantic/Faeroe', name: 'Atlantic/Faeroe'},
            {key: 'Atlantic/Faroe', name: 'Atlantic/Faroe'},
            {key: 'Atlantic/Jan_Mayen', name: 'Atlantic/Jan_Mayen'},
            {key: 'Atlantic/Madeira', name: 'Atlantic/Madeira'},
            {key: 'Atlantic/Reykjavik', name: 'Atlantic/Reykjavik'},
            {key: 'Atlantic/South_Georgia', name: 'Atlantic/South_Georgia'},
            {key: 'Atlantic/St_Helena', name: 'Atlantic/St_Helena'},
            {key: 'Atlantic/Stanley', name: 'Atlantic/Stanley'},
            {key: 'Australia/ACT', name: 'Australia/ACT'},
            {key: 'Australia/Adelaide', name: 'Australia/Adelaide'},
            {key: 'Australia/Brisbane', name: 'Australia/Brisbane'},
            {key: 'Australia/Broken_Hill', name: 'Australia/Broken_Hill'},
            {key: 'Australia/Canberra', name: 'Australia/Canberra'},
            {key: 'Australia/Currie', name: 'Australia/Currie'},
            {key: 'Australia/Darwin', name: 'Australia/Darwin'},
            {key: 'Australia/Eucla', name: 'Australia/Eucla'},
            {key: 'Australia/Hobart', name: 'Australia/Hobart'},
            {key: 'Australia/LHI', name: 'Australia/LHI'},
            {key: 'Australia/Lindeman', name: 'Australia/Lindeman'},
            {key: 'Australia/Lord_Howe', name: 'Australia/Lord_Howe'},
            {key: 'Australia/Melbourne', name: 'Australia/Melbourne'},
            {key: 'Australia/NSW', name: 'Australia/NSW'},
            {key: 'Australia/North', name: 'Australia/North'},
            {key: 'Australia/Perth', name: 'Australia/Perth'},
            {key: 'Australia/Queensland', name: 'Australia/Queensland'},
            {key: 'Australia/South', name: 'Australia/South'},
            {key: 'Australia/Sydney', name: 'Australia/Sydney'},
            {key: 'Australia/Tasmania', name: 'Australia/Tasmania'},
            {key: 'Australia/Victoria', name: 'Australia/Victoria'},
            {key: 'Australia/West', name: 'Australia/West'},
            {key: 'Australia/Yancowinna', name: 'Australia/Yancowinna'},
            {key: 'Brazil/Acre', name: 'Brazil/Acre'},
            {key: 'Brazil/DeNoronha', name: 'Brazil/DeNoronha'},
            {key: 'Brazil/East', name: 'Brazil/East'},
            {key: 'Brazil/West', name: 'Brazil/West'},
            {key: 'CET', name: 'CET'},
            {key: 'CST6CDT', name: 'CST6CDT'},
            {key: 'Canada/Atlantic', name: 'Canada/Atlantic'},
            {key: 'Canada/Central', name: 'Canada/Central'},
            {key: 'Canada/East-Saskatchewan', name: 'Canada/East-Saskatchewan'},
            {key: 'Canada/Eastern', name: 'Canada/Eastern'},
            {key: 'Canada/Mountain', name: 'Canada/Mountain'},
            {key: 'Canada/Newfoundland', name: 'Canada/Newfoundland'},
            {key: 'Canada/Pacific', name: 'Canada/Pacific'},
            {key: 'Canada/Saskatchewan', name: 'Canada/Saskatchewan'},
            {key: 'Canada/Yukon', name: 'Canada/Yukon'},
            {key: 'Chile/Continental', name: 'Chile/Continental'},
            {key: 'Chile/EasterIsland', name: 'Chile/EasterIsland'},
            {key: 'Cuba', name: 'Cuba'},
            {key: 'EET', name: 'EET'},
            {key: 'EST', name: 'EST'},
            {key: 'EST5EDT', name: 'EST5EDT'},
            {key: 'Egypt', name: 'Egypt'},
            {key: 'Eire', name: 'Eire'},
            {key: 'Etc/GMT', name: 'Etc/GMT'},
            {key: 'Etc/GMT+0', name: 'Etc/GMT+0'},
            {key: 'Etc/GMT+1', name: 'Etc/GMT+1'},
            {key: 'Etc/GMT+10', name: 'Etc/GMT+10'},
            {key: 'Etc/GMT+11', name: 'Etc/GMT+11'},
            {key: 'Etc/GMT+12', name: 'Etc/GMT+12'},
            {key: 'Etc/GMT+2', name: 'Etc/GMT+2'},
            {key: 'Etc/GMT+3', name: 'Etc/GMT+3'},
            {key: 'Etc/GMT+4', name: 'Etc/GMT+4'},
            {key: 'Etc/GMT+5', name: 'Etc/GMT+5'},
            {key: 'Etc/GMT+6', name: 'Etc/GMT+6'},
            {key: 'Etc/GMT+7', name: 'Etc/GMT+7'},
            {key: 'Etc/GMT+8', name: 'Etc/GMT+8'},
            {key: 'Etc/GMT+9', name: 'Etc/GMT+9'},
            {key: 'Etc/GMT-0', name: 'Etc/GMT-0'},
            {key: 'Etc/GMT-1', name: 'Etc/GMT-1'},
            {key: 'Etc/GMT-10', name: 'Etc/GMT-10'},
            {key: 'Etc/GMT-11', name: 'Etc/GMT-11'},
            {key: 'Etc/GMT-12', name: 'Etc/GMT-12'},
            {key: 'Etc/GMT-13', name: 'Etc/GMT-13'},
            {key: 'Etc/GMT-14', name: 'Etc/GMT-14'},
            {key: 'Etc/GMT-2', name: 'Etc/GMT-2'},
            {key: 'Etc/GMT-3', name: 'Etc/GMT-3'},
            {key: 'Etc/GMT-4', name: 'Etc/GMT-4'},
            {key: 'Etc/GMT-5', name: 'Etc/GMT-5'},
            {key: 'Etc/GMT-6', name: 'Etc/GMT-6'},
            {key: 'Etc/GMT-7', name: 'Etc/GMT-7'},
            {key: 'Etc/GMT-8', name: 'Etc/GMT-8'},
            {key: 'Etc/GMT-9', name: 'Etc/GMT-9'},
            {key: 'Etc/GMT0', name: 'Etc/GMT0'},
            {key: 'Etc/Greenwich', name: 'Etc/Greenwich'},
            {key: 'Etc/UCT', name: 'Etc/UCT'},
            {key: 'Etc/UTC', name: 'Etc/UTC'},
            {key: 'Etc/Universal', name: 'Etc/Universal'},
            {key: 'Etc/Zulu', name: 'Etc/Zulu'},
            {key: 'Europe/Amsterdam', name: 'Europe/Amsterdam'},
            {key: 'Europe/Andorra', name: 'Europe/Andorra'},
            {key: 'Europe/Athens', name: 'Europe/Athens'},
            {key: 'Europe/Belfast', name: 'Europe/Belfast'},
            {key: 'Europe/Belgrade', name: 'Europe/Belgrade'},
            {key: 'Europe/Berlin', name: 'Europe/Berlin'},
            {key: 'Europe/Bratislava', name: 'Europe/Bratislava'},
            {key: 'Europe/Brussels', name: 'Europe/Brussels'},
            {key: 'Europe/Bucharest', name: 'Europe/Bucharest'},
            {key: 'Europe/Budapest', name: 'Europe/Budapest'},
            {key: 'Europe/Busingen', name: 'Europe/Busingen'},
            {key: 'Europe/Chisinau', name: 'Europe/Chisinau'},
            {key: 'Europe/Copenhagen', name: 'Europe/Copenhagen'},
            {key: 'Europe/Dublin', name: 'Europe/Dublin'},
            {key: 'Europe/Gibraltar', name: 'Europe/Gibraltar'},
            {key: 'Europe/Guernsey', name: 'Europe/Guernsey'},
            {key: 'Europe/Helsinki', name: 'Europe/Helsinki'},
            {key: 'Europe/Isle_of_Man', name: 'Europe/Isle_of_Man'},
            {key: 'Europe/Istanbul', name: 'Europe/Istanbul'},
            {key: 'Europe/Jersey', name: 'Europe/Jersey'},
            {key: 'Europe/Kaliningrad', name: 'Europe/Kaliningrad'},
            {key: 'Europe/Kiev', name: 'Europe/Kiev'},
            {key: 'Europe/Lisbon', name: 'Europe/Lisbon'},
            {key: 'Europe/Ljubljana', name: 'Europe/Ljubljana'},
            {key: 'Europe/London', name: 'Europe/London'},
            {key: 'Europe/Luxembourg', name: 'Europe/Luxembourg'},
            {key: 'Europe/Madrid', name: 'Europe/Madrid'},
            {key: 'Europe/Malta', name: 'Europe/Malta'},
            {key: 'Europe/Mariehamn', name: 'Europe/Mariehamn'},
            {key: 'Europe/Minsk', name: 'Europe/Minsk'},
            {key: 'Europe/Monaco', name: 'Europe/Monaco'},
            {key: 'Europe/Moscow', name: 'Europe/Moscow'},
            {key: 'Europe/Nicosia', name: 'Europe/Nicosia'},
            {key: 'Europe/Oslo', name: 'Europe/Oslo'},
            {key: 'Europe/Paris', name: 'Europe/Paris'},
            {key: 'Europe/Podgorica', name: 'Europe/Podgorica'},
            {key: 'Europe/Prague', name: 'Europe/Prague'},
            {key: 'Europe/Riga', name: 'Europe/Riga'},
            {key: 'Europe/Rome', name: 'Europe/Rome'},
            {key: 'Europe/Samara', name: 'Europe/Samara'},
            {key: 'Europe/San_Marino', name: 'Europe/San_Marino'},
            {key: 'Europe/Sarajevo', name: 'Europe/Sarajevo'},
            {key: 'Europe/Simferopol', name: 'Europe/Simferopol'},
            {key: 'Europe/Skopje', name: 'Europe/Skopje'},
            {key: 'Europe/Sofia', name: 'Europe/Sofia'},
            {key: 'Europe/Stockholm', name: 'Europe/Stockholm'},
            {key: 'Europe/Tallinn', name: 'Europe/Tallinn'},
            {key: 'Europe/Tirane', name: 'Europe/Tirane'},
            {key: 'Europe/Tiraspol', name: 'Europe/Tiraspol'},
            {key: 'Europe/Uzhgorod', name: 'Europe/Uzhgorod'},
            {key: 'Europe/Vaduz', name: 'Europe/Vaduz'},
            {key: 'Europe/Vatican', name: 'Europe/Vatican'},
            {key: 'Europe/Vienna', name: 'Europe/Vienna'},
            {key: 'Europe/Vilnius', name: 'Europe/Vilnius'},
            {key: 'Europe/Volgograd', name: 'Europe/Volgograd'},
            {key: 'Europe/Warsaw', name: 'Europe/Warsaw'},
            {key: 'Europe/Zagreb', name: 'Europe/Zagreb'},
            {key: 'Europe/Zaporozhye', name: 'Europe/Zaporozhye'},
            {key: 'Europe/Zurich', name: 'Europe/Zurich'},
            {key: 'GB', name: 'GB'},
            {key: 'GB-Eire', name: 'GB-Eire'},
            {key: 'GMT', name: 'GMT'},
            {key: 'GMT+0', name: 'GMT+0'},
            {key: 'GMT-0', name: 'GMT-0'},
            {key: 'GMT0', name: 'GMT0'},
            {key: 'Greenwich', name: 'Greenwich'},
            {key: 'HST', name: 'HST'},
            {key: 'Hongkong', name: 'Hongkong'},
            {key: 'Iceland', name: 'Iceland'},
            {key: 'Indian/Antananarivo', name: 'Indian/Antananarivo'},
            {key: 'Indian/Chagos', name: 'Indian/Chagos'},
            {key: 'Indian/Christmas', name: 'Indian/Christmas'},
            {key: 'Indian/Cocos', name: 'Indian/Cocos'},
            {key: 'Indian/Comoro', name: 'Indian/Comoro'},
            {key: 'Indian/Kerguelen', name: 'Indian/Kerguelen'},
            {key: 'Indian/Mahe', name: 'Indian/Mahe'},
            {key: 'Indian/Maldives', name: 'Indian/Maldives'},
            {key: 'Indian/Mauritius', name: 'Indian/Mauritius'},
            {key: 'Indian/Mayotte', name: 'Indian/Mayotte'},
            {key: 'Indian/Reunion', name: 'Indian/Reunion'},
            {key: 'Iran', name: 'Iran'},
            {key: 'Israel', name: 'Israel'},
            {key: 'Jamaica', name: 'Jamaica'},
            {key: 'Japan', name: 'Japan'},
            {key: 'Kwajalein', name: 'Kwajalein'},
            {key: 'Libya', name: 'Libya'},
            {key: 'MET', name: 'MET'},
            {key: 'MST', name: 'MST'},
            {key: 'MST7MDT', name: 'MST7MDT'},
            {key: 'Mexico/BajaNorte', name: 'Mexico/BajaNorte'},
            {key: 'Mexico/BajaSur', name: 'Mexico/BajaSur'},
            {key: 'Mexico/General', name: 'Mexico/General'},
            {key: 'NZ', name: 'NZ'},
            {key: 'NZ-CHAT', name: 'NZ-CHAT'},
            {key: 'Navajo', name: 'Navajo'},
            {key: 'PRC', name: 'PRC'},
            {key: 'PST8PDT', name: 'PST8PDT'},
            {key: 'Pacific/Apia', name: 'Pacific/Apia'},
            {key: 'Pacific/Auckland', name: 'Pacific/Auckland'},
            {key: 'Pacific/Bougainville', name: 'Pacific/Bougainville'},
            {key: 'Pacific/Chatham', name: 'Pacific/Chatham'},
            {key: 'Pacific/Chuuk', name: 'Pacific/Chuuk'},
            {key: 'Pacific/Easter', name: 'Pacific/Easter'},
            {key: 'Pacific/Efate', name: 'Pacific/Efate'},
            {key: 'Pacific/Enderbury', name: 'Pacific/Enderbury'},
            {key: 'Pacific/Fakaofo', name: 'Pacific/Fakaofo'},
            {key: 'Pacific/Fiji', name: 'Pacific/Fiji'},
            {key: 'Pacific/Funafuti', name: 'Pacific/Funafuti'},
            {key: 'Pacific/Galapagos', name: 'Pacific/Galapagos'},
            {key: 'Pacific/Gambier', name: 'Pacific/Gambier'},
            {key: 'Pacific/Guadalcanal', name: 'Pacific/Guadalcanal'},
            {key: 'Pacific/Guam', name: 'Pacific/Guam'},
            {key: 'Pacific/Honolulu', name: 'Pacific/Honolulu'},
            {key: 'Pacific/Johnston', name: 'Pacific/Johnston'},
            {key: 'Pacific/Kiritimati', name: 'Pacific/Kiritimati'},
            {key: 'Pacific/Kosrae', name: 'Pacific/Kosrae'},
            {key: 'Pacific/Kwajalein', name: 'Pacific/Kwajalein'},
            {key: 'Pacific/Majuro', name: 'Pacific/Majuro'},
            {key: 'Pacific/Marquesas', name: 'Pacific/Marquesas'},
            {key: 'Pacific/Midway', name: 'Pacific/Midway'},
            {key: 'Pacific/Nauru', name: 'Pacific/Nauru'},
            {key: 'Pacific/Niue', name: 'Pacific/Niue'},
            {key: 'Pacific/Norfolk', name: 'Pacific/Norfolk'},
            {key: 'Pacific/Noumea', name: 'Pacific/Noumea'},
            {key: 'Pacific/Pago_Pago', name: 'Pacific/Pago_Pago'},
            {key: 'Pacific/Palau', name: 'Pacific/Palau'},
            {key: 'Pacific/Pitcairn', name: 'Pacific/Pitcairn'},
            {key: 'Pacific/Pohnpei', name: 'Pacific/Pohnpei'},
            {key: 'Pacific/Ponape', name: 'Pacific/Ponape'},
            {key: 'Pacific/Port_Moresby', name: 'Pacific/Port_Moresby'},
            {key: 'Pacific/Rarotonga', name: 'Pacific/Rarotonga'},
            {key: 'Pacific/Saipan', name: 'Pacific/Saipan'},
            {key: 'Pacific/Samoa', name: 'Pacific/Samoa'},
            {key: 'Pacific/Tahiti', name: 'Pacific/Tahiti'},
            {key: 'Pacific/Tarawa', name: 'Pacific/Tarawa'},
            {key: 'Pacific/Tongatapu', name: 'Pacific/Tongatapu'},
            {key: 'Pacific/Truk', name: 'Pacific/Truk'},
            {key: 'Pacific/Wake', name: 'Pacific/Wake'},
            {key: 'Pacific/Wallis', name: 'Pacific/Wallis'},
            {key: 'Pacific/Yap', name: 'Pacific/Yap'},
            {key: 'Poland', name: 'Poland'},
            {key: 'Portugal', name: 'Portugal'},
            {key: 'ROC', name: 'ROC'},
            {key: 'ROK', name: 'ROK'},
            {key: 'Singapore', name: 'Singapore'},
            {key: 'Turkey', name: 'Turkey'},
            {key: 'UCT', name: 'UCT'},
            {key: 'US/Alaska', name: 'US/Alaska'},
            {key: 'US/Aleutian', name: 'US/Aleutian'},
            {key: 'US/Arizona', name: 'US/Arizona'},
            {key: 'US/Central', name: 'US/Central'},
            {key: 'US/East-Indiana', name: 'US/East-Indiana'},
            {key: 'US/Eastern', name: 'US/Eastern'},
            {key: 'US/Hawaii', name: 'US/Hawaii'},
            {key: 'US/Indiana-Starke', name: 'US/Indiana-Starke'},
            {key: 'US/Michigan', name: 'US/Michigan'},
            {key: 'US/Mountain', name: 'US/Mountain'},
            {key: 'US/Pacific', name: 'US/Pacific'},
            {key: 'US/Pacific-New', name: 'US/Pacific-New'},
            {key: 'US/Samoa', name: 'US/Samoa'},
            {key: 'UTC', name: 'UTC'},
            {key: 'Universal', name: 'Universal'},
            {key: 'W-SU', name: 'W-SU'},
            {key: 'WET', name: 'WET'},
            {key: 'Zulu', name: 'Zulu'}
        ];

//
        $scope.get = function () {
            if (id) {
                growl.info("LOADING_RESORT_SETTINGS");
                ResortService.fetchSettings(id).then(function (data) {
                        $scope.settings = data;
                        $scope.settings.unit_format = data.unit_format.value;
                        $scope.settings.default_unit_paper = data.default_unit_paper.value;
                        $scope.settings.datetime_format = data.datetime_format.value;

                        $scope.model.filters = _.map($scope.settings.dispatch_field_choice, function (choice) {
                            return {
                                "field": _.find($scope.schema.properties, function(prop){
                                    return prop.fullkey == choice.field_key;
                                })
                            };
                        });
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                );
            }
        };

        $scope.save = function () {
            if (id) {
                growl.info("SAVE_RESORT_SETTINGS");

                /*
                 dispatch_field_choice
                 {field_key: "name", field_position: 1}
                 {field_key: "phone", field_position: 2}
                 {field_key: "body_part", field_position: 3}
                 {field_key: "field_52d48077a16be", field_position: 4}
                 */

                $scope.settings.dispatch_field_choice = [];

                $scope.settings.dispatch_field_choice = _.map($scope.model.filters, function (filter) {
                    return {
                        "field_key": filter.field.fullkey
                    };
                });

                ResortService.updateSettings(id, $scope.settings).then(function (data) {
//                        $log.log(data);
                        growl.success("resort_updated_successfully");
                    },
                    function (error) {
//                        growl.info(error.detail);

                        //Global errors
                        if (error.hasOwnProperty('detail')) {
                            $scope.error = error.detail;
                            $scope.form.$setPristine();
                        }

                        $scope.errors = [];
                        angular.forEach(error, function (errors, field) {

                            if (field == 'non_field_errors') {
                                // Global errors
                                $scope.error = errors.join(', ');
                                $scope.form.$setPristine();
                            } else {
                                //Field level errors
                                $scope.form[field].$setValidity('backend', false);
                                $scope.form[field].$dirty = true;
                                $scope.errors[field] = errors.join(', ');
                            }
                        });

                    });
            }
        };

        $scope.generate_oauth_key = function () {
            ResortService.generateOAuth(id, {}).then(function (data) {
                    $scope.settings.client_id = data.client_id;
                    $scope.settings.client_secret = data.client_secret;

                    growl.success("resort_updated_successfully");
                },
                function (error) {
//                        growl.info(error.detail);

                    //Global errors
                    if (error.hasOwnProperty('detail')) {
                        $scope.error = error.detail;
                        $scope.form.$setPristine();
                    }

                    $scope.errors = [];
                    angular.forEach(error, function (errors, field) {

                        if (field == 'non_field_errors') {
                            // Global errors
                            $scope.error = errors.join(', ');
                            $scope.form.$setPristine();
                        } else {
                            //Field level errors
                            $scope.form[field].$setValidity('backend', false);
                            $scope.form[field].$dirty = true;
                            $scope.errors[field] = errors.join(', ');
                        }
                    });

                });
        };

        $scope.regenerate_oauth_key = function () {

            var modalInstance = $modal.open({
                animation: true,
                templateUrl: '/app/resorts/templates/confirm_regenerate.html',
                controller: 'ConfirmRegenerateModalCtrl',
                size: 'md'
            });

            modalInstance.result.then(function (is_allowed) {
                ResortService.regenerateOAuth(id, {}).then(function (data) {
                        $scope.settings.client_id = data.client_id;
                        $scope.settings.client_secret = data.client_secret;

                        growl.success("resort_updated_successfully");
                    },
                    function (error) {
//                        growl.info(error.detail);

                        //Global errors
                        if (error.hasOwnProperty('detail')) {
                            $scope.error = error.detail;
                            $scope.form.$setPristine();
                        }

                        $scope.errors = [];
                        angular.forEach(error, function (errors, field) {

                            if (field == 'non_field_errors') {
                                // Global errors
                                $scope.error = errors.join(', ');
                                $scope.form.$setPristine();
                            } else {
                                //Field level errors
                                $scope.form[field].$setValidity('backend', false);
                                $scope.form[field].$dirty = true;
                                $scope.errors[field] = errors.join(', ');
                            }
                        });

                    });
            });
        };

        $scope.download = function (url, filename) {
            var anchor = angular.element('<a/>');
            anchor.attr({
                href: url,
                target: '_blank',
                download: filename
            })[0].click();
        };

        $scope.removeFile = function (value) {
            $scope.settings[value] = '';
        };

        $scope.schema = {
            type: "object",
            properties: []
        };


//        Schema	Form type
//        "type": "string"	text
//        "type": "number"	number
//        "type": "integer"	number
//        "type": "boolean"	checkbox
//        "type": "object"	fieldset
//        "type": "string" and a "enum"	select
//        "type": "array" and a "enum" in array type	checkboxes
//        "type": "array"	array

        var schema_type = {
            'text': 'string',
            'textarea': 'string',
            'number': 'string',
            'range': 'string',
            'arrows': 'string',
            'select': 'string',
            'multi_select': 'string',
            'radio': 'string',
            'gender': 'string',
            'image': 'object',
            'date_picker': 'string',
            'date_time_picker': 'string',
            'google_map': 'object',
            'file': 'string'
        };

//        Form Type	Becomes
//        fieldset	a fieldset with legend
//        section	just a div
//        conditional	a section with a ng-if
//        actions	horizontal button list, can only submit and buttons as items
//        text	input with type text
//        textarea	a textarea
//        number	input type number
//        password	input type password
//        checkbox	a checkbox
//        checkboxes	list of checkboxes
//        select	a select (single value)
//        submit	a submit button
//        button	a button
//        radios	radio buttons
//        radios-inline	radio buttons in one line
//        radiobuttons	radio buttons with bootstrap buttons
//        help	insert arbitrary html
//        tab	tabs with content
//        array	a list you can add, remove and reorder
//        tabarray	a tabbed version of array

        var form_type = {
            'text': 'text',
            'range': 'text',
            'textarea': 'text',
            'number': 'number',
            'arrows': 'select',
            'select': 'select',
            'multi_select': 'select',
            'radio': 'select',
            'gender': 'select',
            'image': 'file_upload',
            'message': 'help',
            'date_picker': 'date_picker',
            'date_time_picker': 'date_time_picker',
            'google_map': 'googlemap',
            'file': 'text'
        };

        var chosenTypes = [
            'text',
            'range',
            'textarea',
            'number',
            'decimal',
            'arrows',
            'select',
            //'multi_select',
            'radio',
            'gender'
            //'date_picker',
            //'date_time_picker'
        ];

        var tabs = questions.DashboardItems;

        var getChoiceMap = function (mapValues) {
            var _choices = [],
                _titlemap = [];

            // Loop and build choices and titlemap
            angular.forEach(mapValues, function (value) {
                for (var key in value) {
                    //console.log(value[key]);
                    if(key.indexOf("controlled") < 0) {
                        _choices.push({"id": key, "name": $translate.instant(value[key])});
                        _titlemap.push({"value": key, "name": $translate.instant(value[key])});
                    }
                }
            });

            return {
                "choices": _choices,
                "titlemap": _titlemap
            }
        };

        $scope.question_items = [];

        $scope.form_items = [];

        for (var key in tabs) {
            if (tabs.hasOwnProperty(key)) {


                for (var question in tabs[key]) {
                    if (tabs[key].hasOwnProperty(question) && (question == 'Questions' || question == 'RepeatingQuestions')) {

                        for (var m in tabs[key][question]) {
                            if (tabs[key][question].hasOwnProperty(m)) {


                                var q = tabs[key][question][m];

                                var choices = [];
                                var titlemap = [];

                                if (q.Type == 'select' || q.Type == 'arrows') {

                                    for (var key1 in q.Values) {

                                        if (q.Values.hasOwnProperty(key1)) {

                                            var choiceMap = getChoiceMap(q.Values);

                                            choices = choiceMap.choices;
                                            titlemap = choiceMap.titlemap;

                                        }

                                    }
                                }

                                if (q.Type == 'gender') {
                                    titlemap.push({
                                        value: "Male",
                                        name: "Male"
                                    });

                                    titlemap.push({
                                        value: "Female",
                                        name: "Female"
                                    });
                                }

                                if (q.Type == 'radio') {
                                    titlemap.push({
                                        value: "Yes",
                                        name: "Yes"
                                    });

                                    titlemap.push({
                                        value: "No",
                                        name: "No"
                                    });
                                }

                                var item = {
                                    'field': m,
                                    'label': $translate.instant(q.Label),
                                    'type': q.Type,
                                    'required': q.Required,
                                    'placeholder': $translate.instant(q.Placeholder),
                                    'choices': choices,
                                    'order': q.Order
                                };

                                if (chosenTypes.indexOf(q.Type) > -1) {
                                    var fullkey = m;

                                    if (question == 'RepeatingQuestions') {
                                        fullkey = key + '____' + m;
                                    }

                                    $scope.schema.properties.push({
                                        'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q.Label),
                                        'type': schema_type[q.Type],
                                        'order': q.Order,
                                        'fullkey': fullkey,
                                        'key': m,
                                        'formtype': form_type[q.Type],
                                        'placeholder': $translate.instant(q.Placeholder),
                                        'titleMap': titlemap
                                    });


                                    $scope.form_items.push({
                                        type: 'fieldset',
                                        htmlClass: 'col-lg-4 col-xs-12',
                                        items: [
                                            {
                                                key: m,
                                                htmlClass: 'pad-left-right',
                                                type: form_type[q.Type],
                                                placeholder: $translate.instant(q.Placeholder),
                                                order: q.Order,
                                                titleMap: titlemap
                                            }
                                        ]
                                    });

                                    $scope.question_items.push(item);
                                } else {

                                    if (q.Type == "repeater" && q.hasOwnProperty('RepeatingQuestions')) {
                                        for (var question1 in tabs[key][question][m]) {
                                            if (tabs[key][question][m].hasOwnProperty(question1) && (question1 == 'Questions' || question1 == 'RepeatingQuestions')) {
                                                for (var n in tabs[key][question][m][question1]) {
                                                    //console.log(n);

                                                    if (tabs[key][question][m][question1].hasOwnProperty(n)) {


                                                        var q1 = tabs[key][question][m][question1][n];

                                                        var choices = [];
                                                        var titlemap = [];

                                                        if (q1.Type == 'select' || q1.Type == 'arrows') {

                                                            for (var key11 in q1.Values) {

                                                                if (q1.Values.hasOwnProperty(key11)) {

                                                                    var choiceMap = getChoiceMap(q1.Values);

                                                                    choices = choiceMap.choices;
                                                                    titlemap = choiceMap.titlemap;

                                                                }
                                                            }
                                                        }

                                                        if (q1.Type == 'gender') {
                                                            titlemap.push({
                                                                value: "Male",
                                                                name: "Male"
                                                            });

                                                            titlemap.push({
                                                                value: "Female",
                                                                name: "Female"
                                                            });
                                                        }

                                                        if (q1.Type == 'radio') {
                                                            titlemap.push({
                                                                value: "Yes",
                                                                name: "Yes"
                                                            });

                                                            titlemap.push({
                                                                value: "No",
                                                                name: "No"
                                                            });
                                                        }

                                                        var item1 = {
                                                            'field': n,
                                                            'label': $translate.instant(q1.Label),
                                                            'type': q1.Type,
                                                            'required': q1.Required,
                                                            'placeholder': $translate.instant(q1.Placeholder),
                                                            'choices': choices,
                                                            'order': q1.Order
                                                        };

                                                        if (chosenTypes.indexOf(q1.Type) > -1) {
                                                            $scope.schema.properties.push({
                                                                'title': $translate.instant(tabs[key].Label) + ' - ' + $translate.instant(q1.Label),
                                                                'type': schema_type[q1.Type],
                                                                'order': q1.Order,
                                                                'fullkey': m + '____' + n,
                                                                'key': n,
                                                                'formtype': form_type[q1.Type],
                                                                'placeholder': $translate.instant(q1.Placeholder),
                                                                'titleMap': titlemap
                                                            });

                                                            $scope.form_items.push({
                                                                type: 'fieldset',
                                                                htmlClass: 'col-lg-4 col-xs-12',
                                                                items: [
                                                                    {
                                                                        key: n,
                                                                        htmlClass: 'pad-left-right',
                                                                        type: form_type[q1.Type],
                                                                        placeholder: $translate.instant(q1.Placeholder),
                                                                        order: q1.Order,
                                                                        titleMap: titlemap
                                                                    }
                                                                ]
                                                            });

                                                            $scope.question_items.push(item1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        $scope.form = [
            {
                type: 'section',
                htmlClass: 'col-xs-12',
                items: $scope.form_items
            }
        ];

        $scope.model = {
            filters: [
                {}
            ]
        };

        $scope.addField = function (filters) {
            filters.push({});
        };

        $scope.removeField = function (index) {
            $scope.model.filters.splice(index, 1);
        };

    }]);
angular.module('app.services')
    .service('ResortService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
//            saveUser: function (id, name, email, role, phone, asset_mgmt, controlled_subs) {
//                var d = $q.defer();
//
//                var params = {
//                    'name': name,
//                    'email': email,
//                    'role_id': role,
//                    'phone': phone,
//                    'user_asset_management':asset_mgmt,
//                    'user_controlled_substances':controlled_subs
//                };
//
//                $http.put(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/', params)
//                    .success(function (response, status, headers) {
//                        d.resolve(response.data);
//                    })
//                    .error(function (response, status, headers, config, errors) {
//                        d.reject(response);
//                    });
//
//                return d.promise;
//            },
//
//            addUser: function (name, email, phone, role) {
//                var d = $q.defer();
//                var resort_id = JSON.parse(LS.get('user')).resorts[0].resort_id;
//                var params = {
//                    'name': name,
//                    'email': email,
//                    'phone': phone,
//                    'role_id': parseInt(role),
//                    'password': "T3mP4$$0143",
//                    'resort_id': resort_id
//                };
//
//                $http.post(ApiService.base() + CONFIG.API_URL + '/users/', params)
//                    .success(function (response, status, headers) {
//                        d.resolve(response.data);
//                    })
//                    .error(function (response, status, headers, config, errors) {
//                        d.reject(response);
//                    });
//
//                return d.promise;
//            },
            fetchAll: function (chunk, page, text, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/users/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search:text,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/resorts/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            removeUser: function (id, first_name, last_name, email) {
                var d = $q.defer();

                var params = {
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': email
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchSettings: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/resorts/' + id + '/settings/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            updateSettings: function (id, data) {
                var d = $q.defer();

                $http.put(ApiService.base() + CONFIG.API_URL + '/resorts/' + id + '/settings/', data)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            generateOAuth: function (id, data) {
                var d = $q.defer();

                $http.post(ApiService.base() + CONFIG.API_URL + '/resort_oauth/?operation=generate', data)
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            regenerateOAuth: function (id, data) {
                var d = $q.defer();

                $http.post(ApiService.base() + CONFIG.API_URL + '/resort_oauth/?operation=regenerate', data)
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },
        };

        return service;
    }]);



'use strict';


angular.module('app')
    .controller('StockAddCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "StockService", "currentUser", "controlledSubstances", "locations", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, StockService, currentUser, controlledSubstances, locations, growl) {

        $scope.controlled_substances = controlledSubstances.results;

        $scope.locations = locations.results;

        $scope.add = function () {
            growl.info("ADD_ASSET");

            StockService.add($scope.quantity, $scope.controlled_substance.controlled_substance_id, $scope.volume,
                $scope.location_id, $scope.dt_expiry).then(function (data) {
                    growl.success("stock_added_successfully");
                    $state.go("stock_report");
                },
                function (error) {
                    growl.info(error.detail);

                    //Global errors
                    //if (error.hasOwnProperty('detail')) {
                    //    $scope.error = error.detail;
                    //    $scope.form.$setPristine();
                    //    growl.error(error.detail);
                    //}
                    //
                    //$scope.errors = [];
                    //angular.forEach(error, function (errors, field) {
                    //
                    //    if (field == 'non_field_errors') {
                    //        // Global errors
                    //        $scope.error = errors.join(', ');
                    //        $scope.form.$setPristine();
                    //    } else {
                    //        //Field level errors
                    //        $scope.form[field].$setValidity('backend', false);
                    //        $scope.form[field].$dirty = true;
                    //        $scope.errors[field] = errors.join(', ');
                    //    }
                    //});
                });
        };
    }]);

'use strict';

angular.module('app')
    .controller('StockCheckinCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "$modalInstance", "StockService", "data", "growl", "controlledSubstances", "locations", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, $modalInstance, StockService, data, growl, controlledSubstances, locations) {

        $scope.data = data;

        $scope.controlled_substances = controlledSubstances.results;
        $scope.locations = locations.results;
        //_.filter(locations.results, function (location) {
        //    return location.location_id != data.location.location_id;
        //});

        $scope.ok = function (location_id) {
            StockService.checkin(data.assignment.controlled_substance_stock_assignment_id, location_id)
                .then(function (data) {
                },
                function (error) {
                    growl.error(error.detail);
                }
            );

            $modalInstance.close(true);
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }]);

'use strict';


angular.module('app')
    .controller('StockCheckoutCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'StockService', 'UserService', 'currentUser', 'controlledSubstances', 'locations', 'questions', 'growl', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, StockService, UserService, currentUser, controlledSubstances, locations, questions, growl) {

        initialize();

        $scope.checkout = function () {
            growl.info("CHECKOUT_ASSET");

            StockService.checkout($scope.controlled_substance_stock.controlled_substance_stock_id, $scope.user_id).then(function (data) {
                    growl.success("stock_checkout_successfully");
                    //$state.go("stock_report");
                },
                function (error) {
                    growl.error(error.detail);

                    //Global errors
                    //if (error.hasOwnProperty('detail')) {
                    //    $scope.error = error.detail;
                    //    $scope.form.$setPristine();
                    //    growl.error(error.detail);
                    //}
                    //
                    //$scope.errors = [];
                    //angular.forEach(error, function (errors, field) {
                    //
                    //    if (field == 'non_field_errors') {
                    //        // Global errors
                    //        $scope.error = errors.join(', ');
                    //        $scope.form.$setPristine();
                    //    } else {
                    //        //Field level errors
                    //        $scope.form[field].$setValidity('backend', false);
                    //        $scope.form[field].$dirty = true;
                    //        $scope.errors[field] = errors.join(', ');
                    //    }
                    //});
                });
        };

        function initialize() {
            $scope.controlled_substances = controlledSubstances.results;
            $scope.controlled_substance = {};
            $scope.controlled_substance.controlled_substance_id = '';

            $scope.locations = locations.results;

            $scope.$watch('location_id', function (newValue, oldValue) {
                if (newValue && newValue != oldValue) {
                    //console.log("location watched");
                    updateStock($scope.location_id, $scope.controlled_substance.controlled_substance_id);
                }
            });

            $scope.$watch('controlled_substance', function (newValue, oldValue) {
                if (newValue && newValue != oldValue) {
                    //console.log("substance watched");
                    updateStock($scope.location_id, $scope.controlled_substance.controlled_substance_id);
                }
            });

            if ($stateParams.hasOwnProperty('controlledSubstanceId')) {
                $scope.controlled_substance = _.find(controlledSubstances.results, function (controlledSubstance) {
                    return controlledSubstance.controlled_substance_id == $stateParams.controlledSubstanceId;
                })
            }

            if ($stateParams.hasOwnProperty('locationId')) {
                $scope.location_id = $stateParams.locationId;
            }

            if ($scope.controlled_substance) {
                updateStock($scope.location_id, $scope.controlled_substance.controlled_substance_id);
            }

            fetchUsers();

        }

        function fetchUsers() {
            var tabs = questions.DashboardItems;

            if (tabs && tabs.hasOwnProperty('field_52d47aac9bd13') && tabs.field_52d47aac9bd13 && tabs.field_52d47aac9bd13.hasOwnProperty('RepeatingQuestions') && tabs.field_52d47aac9bd13.RepeatingQuestions && tabs.field_52d47aac9bd13.RepeatingQuestions.hasOwnProperty('patroller') && tabs.field_52d47aac9bd13.RepeatingQuestions.patroller) {
                $scope.users = questions.DashboardItems.field_52d47aac9bd13.RepeatingQuestions.patroller.Values.map(function (item) {
                    for (var i in item) {
                        return {
                            key: i,
                            name: item[i]
                        };
                    }
                });

            } else {
                $scope.users = null;
            }

//            UserService.fetchAll(1000, 1).then(function (data) {
//                $scope.users = data.results.map(function (item) {
//                        return {
//                            key: item.user_id,
//                            name: item.name
//                        };
//
//                });
//            }, function (error) {
//                $scope.users = null;
//            })
        }

        function updateStock(locationId, controlledSubstanceId) {
            StockService.fetchAll(1000, 1, '', 'controlled_substance__controlled_substance_name', false, 'in', locationId, controlledSubstanceId, null, null)
                .then(function (data) {
                    var controlled_substance_stocks = data.results.map(function (stock) {
                        stock.controlled_substance_stock_text = stock.controlled_substance_stock_pk + " (" + stock.volume + " " + stock.controlled_substance.units + ")";
                        return stock;
                    });

                    $scope.controlled_substance_stocks = controlled_substance_stocks;

                    if ($stateParams.hasOwnProperty('controlledSubstanceStockId')) {
                        $scope.controlled_substance_stock = _.find(controlled_substance_stocks, function (controlledSubstanceStock) {
                            return controlledSubstanceStock.controlled_substance_stock_id == $stateParams.controlledSubstanceStockId;
                        })
                    }
                },
                function (error) {
                    growl.error(error.detail);
                }
            );
        }
    }]);

'use strict';

angular.module('app')
    .controller('StockDisposeCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$q", "$log", "$stateParams", "$intercom", "$modalInstance", "StockService", "data", "growl", "controlledSubstances", "locations", function ($scope, $location, $state, $rootScope, $timeout, $q, $log, $stateParams, $intercom, $modalInstance, StockService, data, growl, controlledSubstances, locations) {

        $scope.data = data;

        $scope.ok = function () {
            $q.all(_.map(data, function (item) {
                var deferred = $q.defer();
                StockService.dispose(item.controlled_substance_stock_id).then(function (response) {
                    deferred.resolve(response);
                }, function (error) {
                    growl.error(error.detail);
                    deferred.reject(error);
                });

                return deferred.promise;
            })).then(function (response) {
                $modalInstance.close(true);
            });
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }]);

'use strict';


angular.module('app')
    .controller('StockRelocateCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "$modalInstance", "StockService", "data", "controlledSubstances", "locations", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, $modalInstance, StockService, data, controlledSubstances, locations, growl) {

        $scope.data = data;

        $scope.locations = angular.copy(locations.results);

        $scope.ok = function (location_id) {
            _.each(data, function (item) {
                StockService.relocate(item.controlled_substance_stock_id, location_id).then(function (response) {

                }, function (error) {
                    growl.error(error.detail);
                });
            });

            $modalInstance.close(true);
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    }]);

'use strict';


angular.module('app')
    .controller('StockReportCtrl', ['$scope', '$location', '$state', '$rootScope', '$timeout', '$log', '$stateParams', '$intercom', 'StockService', 'currentUser', 'growl', '$uimodal', '$translate', 'locations', 'controlledSubstances', function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, StockService, currentUser, growl, $modal, $translate, locations, controlledSubstances) {

        var current = new Date();
        var diff = new Date(current.getTime() - (30 * 24 * 60 * 60 * 1000)); // a month

        var tz = jstz.determine();

        var date_format_mapping = {
            "MM/DD/YYYY": "MM/dd/yyyy",
            "DD/MM/YYYY": "dd/MM/yyyy"
        };

        $scope.datetime_format = currentUser.resorts[0].datetime_format.key;
        var date_format = $scope.datetime_format.slice(0,10);
        $scope.date_format = date_format_mapping[date_format];

        function toUTC(value) {
            return moment.tz(value, 'YYYY-MM-DD HH:mm:ss', tz.name()).utc().format('YYYY-MM-DD HH:mm:ss');
        }

        function toLocalTime(value) {
            return moment.utc(value).tz(tz.name()).format('YYYY-MM-DD HH:mm:ss');
        }


        $scope.css = "height:175px;background-color:transparent;";

        var statuses = {
            'in': 'in_stock',
            'out': 'allocated',
            'used': 'used'
        };

        //default = In Stock view
        $scope.current_status = 'in';
        $scope.current_status_text = statuses[$scope.current_status];

        $scope.bulk_actions = [{
            key: 'dispose',
            value: $translate.instant('dispose')
        }
        ];

        if (locations.results.length > 1) {
            $scope.bulk_actions.push({
                key: 'relocate',
                value: $translate.instant('relocate')
            })
        }

        $scope.locations = angular.copy(locations.results);
        $scope.locations.unshift({
            location_id: '__empty__',
            location_name: 'All',
            area: {
                area_id: '',
                area_name: 'All'
            },
            location_status: {value: 0, key: "live"},
            map_lat: 0,
            map_long: 0
        });

        $scope.location_id = $scope.locations[0].location_id;

        $scope.controlled_substances = controlledSubstances.results;

        $scope.controlled_substance = {};

        $scope.list = {
            items: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'controlled_substance__controlled_substance_name',
            loading: false,
            selected: 0,
            dateFrom: moment(diff).format('YYYY-MM-DD'),
            dateTo: moment(current).format('YYYY-MM-DD'),

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching items...');
                $scope.list.loading = true;

                growl.info("LOADING_STOCK");

                var start_time = toUTC(moment($scope.list.dateFrom).format('YYYY-MM-DD 00:00:00'));
                var end_time = toUTC(moment($scope.list.dateTo).format('YYYY-MM-DD 23:59:59'));

                StockService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '', $scope.list.predicate, $scope.list.reverse, $scope.current_status, $scope.location_id, $scope.controlled_substance.controlled_substance_id, start_time, end_time)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.summary = data.summary;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);

                        $scope.list.selected = 0;

                        $scope.chart = {
                            type: 'PieChart',
                            data: {
                                "cols": [
                                    {id: "name", label: "", type: "string"},
                                    {id: "count", label: "Count", type: "number"}
                                ],
                                "rows": [
                                    {
                                        c: [
                                            {v: $translate.instant('in_stock')},
                                            {v: data.summary.in}
                                        ]
                                    },
                                    {
                                        c: [
                                            {v: $translate.instant('allocated')},
                                            {v: data.summary.out}
                                        ]
                                    }
                                ]
                            },

                            options: {
//              "title": "Incidents",
//              "fill": 20,
                                pieHole: 1,
                                legend: {position: 'none'},
                                chartArea: {
                                    left: 0,
                                    top: 10,
                                    width: '100%',
                                    height: '150'
                                },
                                "displayExactValues": true,
                                //"vAxis": {
                                //    "title": "Incidents", "gridlines": {"count": 6}
                                //},
//                                focusTarget: 'category',
                                tooltip: {isHtml: true},
                                //"hAxis": {
                                //    "title": $scope.scale.value
                                //},
                                "colors": [
                                    '#35bfbf',
                                    '#fd423e',
                                    '#ffb648',
                                    '#949fb3',
                                    '#4c5261'
                                ]
                            },

                            formatters: {}
                        };
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_STOCK");

                StockService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.items = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    function (error) {
                        growl.error(error.detail);
                    }
                )
                    .finally(function () {
                        $scope.list.loading = false;
                    });
            },

            archive: function (controlled_substance_id) {
                console.log("removing");

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/controlled_substances/templates/confirm.html',
                    controller: 'ConfirmModalCtrl',
                    size: 'md'
                });

                modalInstance.result.then(function () {
                    StockService.remove(controlled_substance_id).then(function (response) {
                        $scope.list.get();
                    }, function (error) {
                        growl.error(error.detail);
                    });

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                });
            },

            //checkout: function (data) {
            //
            //},

            check_in: function (data) {
                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/stocks/templates/checkin.html',
                    controller: 'StockCheckinCtrl',
                    size: 'md',
                    resolve: {
                        data: function () {
                            return data;
                        },
                        controlledSubstances: function () {
                            return controlledSubstances;
                        },
                        locations: function () {
                            return locations;
                        }

                    }
                });

                modalInstance.result.then(function () {
                        $timeout(function () {
                            $scope.list.get();
                        }, 100);
                    }, function () {
                        $log.info('Modal dismissed at: ' + new Date());
                    }
                );
            },

            dispose: function () {
                var data = angular.copy($scope.list.items);

                var selected = _.filter(data, function (item) {
                    return item.hasOwnProperty('selected') && item.selected;
                });

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/stocks/templates/dispose.html',
                    controller: 'StockDisposeCtrl',
                    keyboard: false,
                    size: 'md',
                    resolve: {
                        data: function () {
                            return selected;
                        },
                        controlledSubstances: function () {
                            return controlledSubstances;
                        },
                        locations: function () {
                            return locations;
                        }

                    }
                });

                modalInstance.result.then(function () {
                    $timeout(function () {
                        $scope.list.get();
                    }, 100);
                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                }).finally(function () {

                });
            },

            relocate: function () {
                var data = angular.copy($scope.list.items);

                var selected = _.filter(data, function (item) {
                    return item.hasOwnProperty('selected') && item.selected;
                });

                var modalInstance = $modal.open({
                    animation: true,
                    templateUrl: '/app/stocks/templates/relocate.html',
                    controller: 'StockRelocateCtrl',
                    keyboard: false,
                    size: 'md',
                    resolve: {
                        data: function () {
                            return selected;
                        },
                        controlledSubstances: function () {
                            return controlledSubstances;
                        },
                        locations: function () {
                            return locations;
                        }
                    }
                });

                modalInstance.result.then(function () {
                    $timeout(function () {
                        $scope.list.get();
                    }, 100);

                }, function () {
                    $log.info('Modal dismissed at: ' + new Date());
                }).finally(function () {

                });
            }
        };

        $scope.selection_update = function (value) {
            if (value) {
                $scope.list.selected++;
            } else {
                $scope.list.selected--;
            }
        };

        $scope.$watch(
            'list.dateFrom',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.dateTo',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                }
            }
        );

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'current_status',
            function (newValue, oldValue) {
                if (newValue && newValue !== oldValue) {
                    $scope.current_status_text = statuses[$scope.current_status];
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);


                }
            }
        );

        $scope.$watch(
            'controlled_substance.controlled_substance_id',
            function (newValue, oldValue) {
                if (newValue && newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'location_id',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        //$scope.$watch(
        //    'bulk_action',
        //    function (newValue, oldValue) {
        //        if (newValue) {
        //
        //            if (newValue == 'dispose') {
        //                $scope.list.dispose();
        //            }
        //
        //            if (newValue == 'relocate') {
        //                $scope.list.relocate();
        //            }
        //        }
        //    }
        //);

        $scope.bulk_selection_update = function (newValue) {
            if (newValue == 'dispose') {
                $scope.list.dispose();
            }

            if (newValue == 'relocate') {
                $scope.list.relocate();
            }
        };


        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        //console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );
    }]);

angular.module('app.services')
    .service('StockService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {
            fetchAll: function (chunk, page, text, predicate, direction, current_status, location_id, controlled_substance_id, dateFrom, dateTo ) {
                var d = $q.defer();

                predicate = predicate || 'controlled_substance__controlled_substance_name';
                direction = direction || false;

                if(location_id=='__empty__'){
                    location_id='';
                }

                $http.get(ApiService.base() + CONFIG.API_URL + '/controlled_substances/report/',
                    {
                        params: {
                            date_from: dateFrom,
                            date_to: dateTo,
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            current_status:current_status,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc',
                            location_id:location_id,
                            controlled_substance_id:controlled_substance_id
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            add: function (quantity, controlled_substance_id, volume,location_id, dt_expiry) {
                var d = $q.defer();
                var params = {
                    'quantity': quantity,
                    'controlled_substance_id': controlled_substance_id,
                    'volume': volume,
                    'location_id': location_id,
                    'dt_expiry': dt_expiry
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/controlled_substances/add/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            checkout: function (controlled_substance_stock_id, user_id) {
                var d = $q.defer();
                var params = {
                    'controlled_substance_stock_id': controlled_substance_stock_id,
                    'user_id': user_id
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/controlled_substances/checkout/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            checkin: function (controlled_substance_stock_assignment_id, location_id) {
                var d = $q.defer();
                var params = {
                    'controlled_substance_stock_assignment_id': controlled_substance_stock_assignment_id,
                    'location_id':location_id
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/controlled_substances/checkin/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            relocate: function (controlled_substance_stock_id, location_id) {
                var d = $q.defer();
                var params = {
                    'controlled_substance_stock_id': controlled_substance_stock_id,
                    'location_id': location_id
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/controlled_substances/relocate/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            dispose: function (controlled_substance_stock_id) {
                var d = $q.defer();
                var params = {
                    'controlled_substance_stock_id': controlled_substance_stock_id,
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/controlled_substances/dispose/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },


            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/assets/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            remove: function (id, first_name, last_name, email) {
                var d = $q.defer();

                var params = {
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/assets/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        return service;
    }]);



'use strict';


angular.module('app')
    .controller('UserAddCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "UserService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, UserService, currentUser, growl) {

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Users"
        });

        if (!currentUser.isManager) {
            $state.go("map");
        }

        $scope.roles = [
            {key: 1, name: 'Patroller'},
            {key: 2, name: 'Dispatcher'},
            {key: 3, name: 'Manager'}
        ];

        $scope.addUser = function () {
            growl.info("ADD_USER");
            UserService.addUser($scope.name, $scope.email, $scope.phone, $scope.role).then(function (data) {
//                    $log.log(data);
                    growl.success("user_created_successfully");
                    $state.go("users");
                },
                function (error) {
//                    growl.info(error.detail);
                    //Global errors
                    if (error.hasOwnProperty('detail')) {
                        $scope.error = error.detail;
                        $scope.form.$setPristine();
                        growl.error(error.detail);
                    }

                    $scope.errors = [];
                    angular.forEach(error, function (errors, field) {

                        if (field == 'non_field_errors') {
                            // Global errors
                            $scope.error = errors.join(', ');
                            $scope.form.$setPristine();
                        } else {
                            //Field level errors
                            $scope.form[field].$setValidity('backend', false);
                            $scope.form[field].$dirty = true;
                            $scope.errors[field] = errors.join(', ');
                        }
                    });
                });
        };
    }]);
'use strict';


angular.module('app')
    .controller('UserEditCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$stateParams", "$intercom", "UserService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $stateParams, $intercom, UserService, currentUser, growl) {

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Users"
        });

        $scope.showRole = false;
        $scope.showPermissions = currentUser.resorts[0].resort_controlled_substances || currentUser.resorts[0].resort_asset_management;
        $scope.showDeleteUser = false;
        $scope.showActivateUser = false;
        $scope.showDeactivateUser = false;

        var id = $stateParams.userId;


        $scope.roles = [
            {key: 1, name: 'Patroller'},
            {key: 2, name: 'Dispatcher'},
            {key: 3, name: 'Manager'}
        ];

        $scope.get = function () {
            if (id) {
                growl.info("LOADING_USER");
                UserService.fetch(id).then(function (data) {
//                        $log.log(data);
                        $scope.user = data;
                        $scope.user.role = data.role_id[0].value;

                        if (currentUser.user_id != data.user_id && currentUser.role == 'Manager'){
                            $scope.showRole = true;
                            $scope.showDeleteUser = true;
                            $scope.showActivateUser = data['user_status'] == 1;
                            $scope.showDeactivateUser = data['user_status'] == 0;
                        }
                        growl.info("LOADING_DEVICES");
                        UserService.fetchDevices(id).then(function (data) {

//                                $log.log(data);
                                $scope.user.devices = data.devices;
                            },
                            $rootScope.on_error);
                    },
                    function(error){
                        growl.info(error.detail);
                    }
                );
            }
        };

        $scope.saveUser = function () {
            if (id) {
                growl.info("SAVE_USER");
                UserService.saveUser(id, $scope.user.name, $scope.user.email, $scope.user.role, $scope.user.phone, $scope.user.user_asset_management, $scope.user.user_controlled_substances).then(function (data) {
//                        $log.log(data);
                        growl.success("user_updated_successfully");
                    },
                    function(error){
//                        growl.info(error.detail);

                        //Global errors
                    if (error.hasOwnProperty('detail')) {
                        $scope.error = error.detail;
                        $scope.form.$setPristine();
                    }

                    $scope.errors = [];
                    angular.forEach(error, function (errors, field) {

                        if (field == 'non_field_errors') {
                            // Global errors
                            $scope.error = errors.join(', ');
                            $scope.form.$setPristine();
                        } else {
                            //Field level errors
                            $scope.form[field].$setValidity('backend', false);
                            $scope.form[field].$dirty = true;
                            $scope.errors[field] = errors.join(', ');
                        }
                    });

                    });
            }
        };

        $scope.resetPassword = function () {
                growl.info("RESET_PASSWORD");
                UserService.forgotPassword($scope.user.email)
                    .then(function (data) {
                        growl.success(data.detail);
                    }, function (error) {
                        growl.error(error.detail);
                    });
        };

        $scope.removeUser = function () {
            if (id) {
                growl.info("REMOVE_USER");
                UserService.removeUser(id, $scope.user.firstname, $scope.user.lastname, $scope.user.email).then(function (data) {
                        growl.success("REMOVE_USER");
                        $state.go("users");
                    },
                    function(error){
                        growl.info(error.detail);
                    });
            }
        };

        $scope.toggleUserStatus = function(type){
            UserService.updateUserStatus($scope.user.user_id, $scope.user.resorts[0]['resort_id'], type).then(function (data) {
                    growl.success(data);
                    $scope.showActivateUser = type == 'archived' ? true : false;
                    $scope.showDeactivateUser = type == 'archived' ? false : true;
                },
                function(error){
                    growl.info(error.detail);
                });
        };

        $scope.testNotifications = function (deviceId) {
            if (deviceId) {
                growl.info("TEST_NOTIFICATIONS");
                UserService.testDevice(deviceId).then(function (data) {
                        growl.success(data);
                    },
                    function(error){
                        growl.info(error.detail);
                    });
            }
        };

        $scope.removeDevice = function (deviceId) {
//            $log.log(deviceId);

            if (deviceId) {
                growl.info("REMOVE_DEVICE");
                UserService.removeDevice(deviceId).then(function (data) {
//                        $log.log(data);
                        growl.success("DEVICE_REMOVED");
                        $scope.get();
                    },
                   function(error){
                        growl.info(error.detail);
                    });
            }
        };


    }]);
'use strict';


angular.module('app')
    .controller('UserListCtrl', ["$scope", "$location", "$state", "$rootScope", "$timeout", "$log", "$intercom", "UserService", "currentUser", "growl", function ($scope, $location, $state, $rootScope, $timeout, $log, $intercom, UserService, currentUser, growl) {

        $intercom.update({
            email: currentUser.email,
            name: currentUser.name,
            created_at: new Date(),
            user_id: currentUser.user_id,
            company: {
                id: currentUser.resorts[0].resort_id,
                name: currentUser.resorts[0].resort_name
            },
            role: currentUser.role_id[0].key,
            dashboard_feature_last_used: "Users"
        });

        if (!UserService.currentUser().isManager) {
            $state.go("map");
        }


        $scope.list = {
            users: [],
            filtered: [],
            currentPage: 1,
            itemsPerPage: 20,
            totalItems: 0,
            totalPages: 0,
            predicate: 'user__name',
            loading: false,

            setPage: function (pageNum) {
                $scope.list.currentPage = pageNum;
            },

            filter: function () {
                $timeout(function () {
                    $scope.list.filteredItems = $scope.list.filtered.length;
                    $scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }, 10);
            },

            sort_by: function (predicate) {
                $scope.list.predicate = predicate;
                $scope.list.reverse = !$scope.list.reverse;

                $scope.list.get();
            },

            get: function () {
                $log.log('fetching users...');
                $scope.list.loading = true;

                growl.info("LOADING_USER");
                UserService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, '', $scope.list.predicate, $scope.list.reverse )
                    .then(function (data) {
                        $scope.list.loading = false;

                        $scope.list.users = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    $rootScope.on_error
                );
            },

            search: function (text) {
                $scope.list.loading = true;

                growl.info("LOADING_USER");

                UserService.fetchAll($scope.list.itemsPerPage, $scope.list.currentPage, text, $scope.list.predicate, $scope.list.reverse)
                    .then(function (data) {
                        $scope.list.loading = false;

                        $scope.list.users = data.results;
                        $scope.list.totalItems = data.count;
                        $scope.list.totalPages = Math.ceil($scope.list.totalItems / $scope.list.itemsPerPage);
                    },
                    $rootScope.on_error
                );
            }
        };

        $scope.add = function () {
            $state.go("user_add");
        };

        $scope.$watch(
            'list.itemsPerPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        $scope.$watch(
            'list.currentPage',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    $scope.list.get();
                    //$scope.list.totalPages = Math.ceil($scope.list.filteredItems / $scope.list.itemsPerPage);
                }
            }
        );

        var filterTextTimeout;

        $scope.$watch(
            'search',
            function (newValue, oldValue) {
                if (newValue !== oldValue) {

                    if (filterTextTimeout) {
                        $timeout.cancel(filterTextTimeout);
                    }

                    filterTextTimeout = $timeout(function () {
                        console.log("value changed");
                        $scope.list.search(newValue);
                    }, 1000); // delay 250 ms


                }
            }
        );

    }]);



angular.module('app.services')
    .service('UserService', ['$http', '$q', '$window', '$intercom', '$log', 'LS', 'CONFIG', 'ApiService', function ($http, $q, $window, $intercom, $log, LS, CONFIG, ApiService) {

        var service = {

            user: null,
            is_authenticated: false,

            discover: function (email) {

                var data = {
                    'email': email || ''
                };

                var d = $q.defer();

                $http.post(ApiService.base() + CONFIG.API_URL + '/auth/discover/', data)
                    .success(function (data, status, headers) {

                        var mapping = {
                            'app.medic52.local': CONFIG.BASE_URL,
                            'app-dev.medic52.com': data.location,
                            'app-dev-us.medic52.com': data.location,
                            'app-dev-au.medic52.com': data.location,
                            'app-staging.medic52.com': data.location,
                            'app.medic52.com': data.location,
                            'localhost:8095': 'http://localhost:8090'
                        };
                        var laravelMapping = {
                            'app.medic52.local': CONFIG.LARAVEL_URL,
                            'app-dev.medic52.com': data.laravel_location,
                            'app-dev-us.medic52.com': data.laravel_location,
                            'app-dev-au.medic52.com': data.laravel_location,
                            'app-staging.medic52.com': data.laravel_location,
                            'app.medic52.com': data.laravel_location,
                            'localhost:8095': 'http://localhost:8100'
                        };

                        var host = window.location.host;
                        LS.set('API', mapping[host]);
                        LS.set('LARAVEL_CORS', laravelMapping[host]);

                        console.log(laravelMapping);
                        console.log(host);
                        console.log(laravelMapping[host]);
                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {
                        $log.log(data);

                        LS.set('API', '');

                        d.reject(data);
                    });

                return d.promise;
            },

            login: function (email, password) {

                var data = {
                    'email': email || '',
                    'password': password || ''
                };

                var d = $q.defer();

                $http.post(ApiService.base() + CONFIG.API_URL + '/auth/login/', data)
                    .success(function (data, status, headers) {
                        var rolesArr = ['', 'Patroller', 'Dispatcher', 'Manager'];

                        data.user.role = rolesArr[data.user.role_id[0].value];

                        data.user.role_id.forEach(function (entry) {
                            if (entry.value == 3) {
                                data.user.isManager = true;
                            }
                        });
                        service.user = data.user;
                        service.user.role = data.user.role;
                        service.is_authenticated = true;

                        LS.set('user', JSON.stringify(service.user));
                        LS.set('token', 'Token ' + data.user.token);

                        $intercom.update({
                            email: service.user.email,
                            name: service.user.name,
                            created_at: new Date(),
                            user_id: service.user.user_id,
                            company: {
                                id: service.user.resorts[0].resort_id,
                                name: service.user.resorts[0].resort_name
                            },
                            role: service.user.role_id[0].key,
                            dashboard_feature_last_used: "Login",
                            user_connected: service.user.user_connected.value
                        });


                        d.resolve(data);
                    })
                    .error(function (data, status, headers, config, errors) {

                        $log.log(data);

                        service.user = null;
                        service.is_authenticated = false;

                        LS.set('user', null);

                        d.reject(data);
                    });

                return d.promise;
            },


            logout: function () {
                if (service.user && service.user.hasOwnProperty('user_id') && service.user.user_id) {

                    var d = $q.defer();

                    var data = {};

                    $http.post(ApiService.base() + CONFIG.API_URL + '/auth/logout/' + service.user.user_id + '/', data)
                        .success(function (data, status, headers) {

                            service.user = null;
                            service.is_authenticated = false;
                            LS.set('user', null);
                            LS.set('token', null);
                            LS.set('API', '');
                            LS.set('en_US', '');

                            d.resolve(data);

                        })
                        .error(function (data, status, headers, config, errors) {
                            d.reject(data);
                        });

                    return d.promise;
                }
            },

            currentUser: function () {
                return service.user;
//                var d = $q.defer();
//                $http.get(CONFIG.API_BASE_URL + '/auth/current_user')
//                    .success(function (response, status, headers) {
//                        d.resolve(response.data);
//                    })
//                    .error(function (data, status, headers, config, errors) {
//                        d.reject(data);
//                    });
//
//                return d.promise;
            },

            currentRole: function () {
                return service.user.role;
            },

            saveUser: function (id, name, email, role, phone, asset_mgmt, controlled_subs) {
                var d = $q.defer();

                var params = {
                    'name': name,
                    'email': email,
                    'role_id': role,
                    'phone': phone,
                    'user_asset_management':asset_mgmt,
                    'user_controlled_substances':controlled_subs
                };

                $http.put(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            addUser: function (name, email, phone, role) {
                var d = $q.defer();
                var resort_id = JSON.parse(LS.get('user')).resorts[0].resort_id;
                var params = {
                    'name': name,
                    'email': email,
                    'phone': phone,
                    'role_id': parseInt(role),
                    'password': "T3mP4$$0143",
                    'resort_id': resort_id
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/users/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },
            fetchAll: function (chunk, page, text, predicate, direction) {
                var d = $q.defer();

                predicate = predicate || 'name';
                direction = direction || false;

                $http.get(ApiService.base() + CONFIG.API_URL + '/users/',
                    {
                        params: {
                            chunk: chunk,
                            offset: (page - 1) * chunk,
                            search:text,
                            order_by:predicate,
                            order_by_direction: direction?'desc':'asc'
                        }
                    })
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetch: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            fetchDevices: function (id) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/devices/')
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            forgotPassword: function (email) {
                var d = $q.defer();

                var params = {
                    'email': email
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/auth/password_reset/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            resetPassword: function (id, first_name, last_name, email) {
                var d = $q.defer();

                var params = {
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': email
                };

                $http.post(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/resetpassword', params)
                    .success(function (response, status, headers) {
                        d.resolve(response);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            removeUser: function (id, first_name, last_name, email) {
                var d = $q.defer();

                var params = {
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': email
                };

                $http.delete(ApiService.base() + CONFIG.API_URL + '/users/' + id + '/', params)
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            updateUserStatus: function (user_id, resort_id, type) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/users/' + user_id + '/status/',
                    {
                        params : {
                            type: type,
                            resort_id: resort_id
                        }
                    }
                )
                .success(function (response, status, headers) {
                    d.resolve(response.detail);
                })
                .error(function (response, status, headers, config, errors) {
                    d.reject(response);
                });

                return d.promise;
            },

            testDevice: function (deviceId) {
                var d = $q.defer();

                $http.get(ApiService.base() + CONFIG.API_URL + '/devices/' + deviceId + '/test_notifications/')
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            },

            removeDevice: function (deviceId) {
                var d = $q.defer();

                $http.put(ApiService.base() + CONFIG.API_URL + '/devices/' + deviceId + '/', {'device_state': 2})
                    .success(function (response, status, headers) {
                        d.resolve(response.data);
                    })
                    .error(function (response, status, headers, config, errors) {
                        d.reject(response);
                    });

                return d.promise;
            }
        };

        function init() {
            if (LS.get('user') == null || LS.get('user') == "null" || LS.get('user') == "" || LS.get('user') == undefined) {
                LS.set('user', null);
            } else {
                service.user = JSON.parse(LS.get('user'));
                service.is_authenticated = true;
            }
        }

        init();

        return service;
    }]);



//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImRpcmVjdGl2ZXMvZGlyZWN0aXZlcy5qcyIsImZpbHRlcnMvZmlsdGVycy5qcyIsImFuYWx5dGljcy9jb250cm9sbGVycy9jYXNlX3N0YXR1cy5qcyIsImFuYWx5dGljcy9jb250cm9sbGVycy9jaGFydC5qcyIsImFuYWx5dGljcy9jb250cm9sbGVycy9kYXNoYm9hcmQuanMiLCJhbmFseXRpY3MvY29udHJvbGxlcnMvcGF0cm9sbGVyc19yZXBvcnRzLmpzIiwiYW5hbHl0aWNzL2NvbnRyb2xsZXJzL3JlcG9ydC5qcyIsImFuYWx5dGljcy9zZXJ2aWNlcy9hbmFseXRpY3MuanMiLCJhbmFseXRpY3Mvc2VydmljZXMvcmVwb3J0LmpzIiwiYXJlYXMvY29udHJvbGxlcnMvYWRkLmpzIiwiYXJlYXMvY29udHJvbGxlcnMvZWRpdC5qcyIsImFyZWFzL2NvbnRyb2xsZXJzL2xpc3QuanMiLCJhcmVhcy9zZXJ2aWNlcy9hcmVhcy5qcyIsImFzc2V0cy9jb250cm9sbGVycy9hZGQuanMiLCJhc3NldHMvY29udHJvbGxlcnMvZWRpdC5qcyIsImFzc2V0cy9jb250cm9sbGVycy9saXN0LmpzIiwiYXNzZXRzL3NlcnZpY2VzL2Fzc2V0X3R5cGVzLmpzIiwiYXNzZXRzL3NlcnZpY2VzL2Fzc2V0cy5qcyIsImF1ZGl0X2xvZy9jb250cm9sbGVycy9saXN0LmpzIiwiYXVkaXRfbG9nL3NlcnZpY2VzL2F1ZGl0X2xvZy5qcyIsImF1dGgvY29udHJvbGxlcnMvYXV0aC5qcyIsImJhc2UvY29udHJvbGxlcnMvaGVhZGVyLmpzIiwiYmFzZS9zZXJ2aWNlcy9hcGkuanMiLCJiYXNlL3NlcnZpY2VzL2RhdGVyYW5nZS5qcyIsImJhc2Uvc2VydmljZXMvbGFuZy5qcyIsImJhc2Uvc2VydmljZXMvc3RvcmFnZS5qcyIsImNvbnRyb2xsZWRfc3Vic3RhbmNlcy9jb250cm9sbGVycy9hZGQuanMiLCJjb250cm9sbGVkX3N1YnN0YW5jZXMvY29udHJvbGxlcnMvZWRpdC5qcyIsImNvbnRyb2xsZWRfc3Vic3RhbmNlcy9jb250cm9sbGVycy9saXN0LmpzIiwiY29udHJvbGxlZF9zdWJzdGFuY2VzL3NlcnZpY2VzL2NvbnRyb2xsZWRfc3Vic3RhbmNlcy5qcyIsImluY2lkZW50cy9jb250cm9sbGVycy9lZGl0LmpzIiwiaW5jaWRlbnRzL2NvbnRyb2xsZXJzL2xpc3QuanMiLCJpbmNpZGVudHMvc2VydmljZXMvaW5jaWRlbnQuanMiLCJpbmNpZGVudHMvc2VydmljZXMvcXVlc3Rpb24uanMiLCJpbmNpZGVudHMvc2VydmljZXMvdXBsb2FkLmpzIiwibG9jYXRpb25zL2NvbnRyb2xsZXJzL2FkZC5qcyIsImxvY2F0aW9ucy9jb250cm9sbGVycy9lZGl0LmpzIiwibG9jYXRpb25zL2NvbnRyb2xsZXJzL2xpc3QuanMiLCJsb2NhdGlvbnMvc2VydmljZXMvbG9jYXRpb25zLmpzIiwibWFwL2NvbnRyb2xsZXJzL2hlYXRtYXAuanMiLCJtYXAvY29udHJvbGxlcnMvbWFwLmpzIiwicmVzb3J0cy9jb250cm9sbGVycy9zZXR0aW5ncy5qcyIsInJlc29ydHMvc2VydmljZXMvcmVzb3J0LmpzIiwic3RvY2tzL2NvbnRyb2xsZXJzL2FkZC5qcyIsInN0b2Nrcy9jb250cm9sbGVycy9jaGVja2luLmpzIiwic3RvY2tzL2NvbnRyb2xsZXJzL2NoZWNrb3V0LmpzIiwic3RvY2tzL2NvbnRyb2xsZXJzL2Rpc3Bvc2UuanMiLCJzdG9ja3MvY29udHJvbGxlcnMvcmVsb2NhdGUuanMiLCJzdG9ja3MvY29udHJvbGxlcnMvcmVwb3J0LmpzIiwic3RvY2tzL3NlcnZpY2VzL3N0b2NrLmpzIiwidXNlcnMvY29udHJvbGxlcnMvYWRkLmpzIiwidXNlcnMvY29udHJvbGxlcnMvZWRpdC5qcyIsInVzZXJzL2NvbnRyb2xsZXJzL2xpc3QuanMiLCJ1c2Vycy9zZXJ2aWNlcy91c2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFFBQVEsT0FBTyxPQUFPO0lBQ2xCO0lBQ0E7SUFD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RUFBRTs7OztRQUlqQixTQUFTLE9BQU87WUFDWixJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsR0FBRyxJQUFJLFdBQVcsVUFBVSxHQUFHLElBQUksV0FBVyxNQUFNLEdBQUcsSUFBSSxXQUFXLFdBQVc7Z0JBQzNHLEdBQUcsSUFBSSxRQUFRO21CQUNaO2dCQUNILFFBQVEsT0FBTyxLQUFLLE1BQU0sR0FBRyxJQUFJO2dCQUNqQyxRQUFRLG1CQUFtQjs7OztRQUluQzs7UUFFQSxPQUFPOzs7O0FBSWYiLCJmaWxlIjoiY29tcGlsZWQvYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdDb29raWVzJyxcbiAgICAnbmdSZXNvdXJjZScsXG4gICAgJ25nU2FuaXRpemUnLFxuICAgICd1aS5yb3V0ZXInLFxuICAgICd1aS5ib290c3RyYXAnLFxuICAgICdtZ2NyZWEubmdTdHJhcCcsXG4gICAgJ2FuZ3VsYXItbG9hZGluZy1iYXInLFxuICAgICdjaGVja2xpc3QtbW9kZWwnLFxuICAgICduZ0lkbGUnLFxuICAgICduZ0NzdicsXG4gICAgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnLFxuICAgICdnb29nbGVjaGFydCcsXG4gICAgJ2FuZ3VsYXItZ3Jvd2wnLFxuICAgIFwibGVhZmxldC1kaXJlY3RpdmVcIixcbiAgICAnY2ZwLmhvdGtleXMnLFxuICAgICdzY2hlbWFGb3JtJyxcbiAgICAnc2NoZW1hRm9ybS1maWxlLXVwbG9hZCcsXG4gICAgLy8ncmVzdGFuZ3VsYXInLFxuICAgICduZ0ludGVyY29tJyxcbiAgICAndWkuYm9vdHN0cmFwLmRhdGV0aW1lcGlja2VyJyxcbiAgICAnbnVtYmVyLWlucHV0JyxcblxuICAgICdhcHAuc2VydmljZXMnXG5dKVxuICAgIC5jb25zdGFudCgnT0FVVEgnLCB7XG4gICAgICAgIENMSUVOVF9JRDogJ1pub2pJbkhnYWw3NEp4MzZwaERVUmd0TFdCQk9ORjVKWEJhMmhXRzQnLFxuICAgICAgICBDTElFTlRfU0VDUkVUOiAnR3haMDV4SVY1YnpBYzk5dk81bElzY2ZVbXNLSXZ2NVREemVaYzlWcGlqbmNBSG4yQ2FyOG5PU0dkWUVOTHdqZTI3OEVzZ1F0QzNZVnZnUmVSQ1NNYklkOEJod1VNMmo2NnBzM3JsVVVYTm1ERGZleU9md3lnSUJwSGpaVkl3YWgnXG4gICAgfSlcbiAgICAuZmFjdG9yeSgnQ09ORklHJywgZnVuY3Rpb24gKCRsb2NhdGlvbikge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHtcbiAgICAgICAgICAgICdhcHAubWVkaWM1Mi5sb2NhbCc6ICdhcGkubWVkaWM1Mi5sb2NhbCcsXG4gICAgICAgICAgICAnYXBwLWRldi5tZWRpYzUyLmNvbSc6ICdhcGktZGV2LXVzLm1lZGljNTIuY29tJyxcbiAgICAgICAgICAgICdhcHAtZGV2LXVzLm1lZGljNTIuY29tJzogJ2FwaS1kZXYtdXMubWVkaWM1Mi5jb20nLFxuICAgICAgICAgICAgJ2FwcC1zdGFnaW5nLm1lZGljNTIuY29tJzogJ2FwaS1zdGFnaW5nLXVzLm1lZGljNTIuY29tJyxcbiAgICAgICAgICAgICdhcHAubWVkaWM1Mi5jb20nOiAnYXBpLXVzLm1lZGljNTIuY29tJyxcbiAgICAgICAgICAgICdsb2NhbGhvc3QnOiAnbG9jYWxob3N0OjgwOTAnXG4gICAgICAgIH07XG4gICAgICAgIHZhciBsYXJhdmVsTWFwcGluZyA9IHtcbiAgICAgICAgICAgICdhcGkubWVkaWM1Mi5sb2NhbCc6ICdhcGkubWVkaWM1Mi5sb2NhbCcsXG4gICAgICAgICAgICAnYXBpLWRldi5tZWRpYzUyLmNvbSc6ICdhcGktZGV2LXVzLm1lZGljNTIuY29tJyxcbiAgICAgICAgICAgICdhcGktZGV2LXVzLm1lZGljNTIuY29tJzogJ2FwaS1kZXYtdXMubWVkaWM1Mi5jb20nLFxuICAgICAgICAgICAgJ2FwaS1zdGFnaW5nLm1lZGljNTIuY29tJzogJ2FwaS1zdGFnaW5nLXVzLm1lZGljNTIuY29tJyxcbiAgICAgICAgICAgICdhcGkubWVkaWM1Mi5jb20nOiAnYXBpLXVzLm1lZGljNTIuY29tJyxcbiAgICAgICAgICAgICdsb2NhbGhvc3QnOiAnbG9jYWxob3N0OjgwOTAnXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGhvc3QgPSAkbG9jYXRpb24uaG9zdCgpO1xuLy8gICAgICAgIHZhciBzdWJkb21haW4gPSBob3N0LnNwbGl0KCcuJylbMF07XG4vLyAgICAgICAgaG9zdCA9IGhvc3QucmVwbGFjZShzdWJkb21haW4sIG1hcHBpbmdbc3ViZG9tYWluXSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEJBU0VfVVJMOiAkbG9jYXRpb24ucHJvdG9jb2woKSArIFwiOi8vXCIgKyBtYXBwaW5nW2hvc3RdLCAvLyAgICAgICAgQkFTRV9VUkw6ICdodHRwczovL2FwaS1kZXYtdXMubWVkaWM1Mi5jb20nLFxuICAgICAgICAgICAgQVBJX1VSTDogJy9hcGkvdjMnLFxuICAgICAgICAgICAgTEFSQVZFTF9VUkw6ICRsb2NhdGlvbi5wcm90b2NvbCgpICsgXCI6Ly9cIiArIGxhcmF2ZWxNYXBwaW5nW2hvc3RdXG4gICAgICAgIH1cbiAgICB9KVxuLy8gICAgLmZhY3RvcnkoJ0lOVEVSQ09NX0FQUElEJywgZnVuY3Rpb24gKCRsb2NhdGlvbikge1xuLy8gICAgICAgIHZhciBtYXBwaW5nID0ge1xuLy8gICAgICAgICAgICAnYXBwLm1lZGljNTIubG9jYWwnOiAneTVyazIwZW4nLFxuLy8gICAgICAgICAgICAnYXBwLWRldi5tZWRpYzUyLmNvbSc6ICd5NXJrMjBlbicsXG4vLyAgICAgICAgICAgICdhcHAtc3RhZ2luZy5tZWRpYzUyLmNvbSc6ICd5NXJrMjBlbicsXG4vLyAgICAgICAgICAgICdhcHAubWVkaWM1Mi5jb20nOiAnY3hqNTdtb2onXG4vL1xuLy8gICAgICAgIH07XG4vL1xuLy8gICAgICAgIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbi8vICAgICAgICByZXR1cm4gbWFwcGluZ1tob3N0XTtcbi8vICAgIH0pXG4gICAgLmZhY3RvcnkoJ2F1dGhIdHRwUmVzcG9uc2VJbnRlcmNlcHRvcicsIGZ1bmN0aW9uICgkcSwgJGxvY2F0aW9uLCAkbG9nLCAkaW5qZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgTFMgPSAkaW5qZWN0b3IuZ2V0KCdMUycpO1xuICAgICAgICAgICAgICAgIHZhciBBcGlTZXJ2aWNlID0gJGluamVjdG9yLmdldCgnQXBpU2VydmljZScpO1xuICAgICAgICAgICAgICAgIHZhciBhdXRob3JpemF0aW9uID0gTFMuZ2V0KCdBdXRob3JpemF0aW9uJyk7XG4gICAgICAgICAgICAgICAgdmFyIHRva2VuID0gTFMuZ2V0KCd0b2tlbicpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBnZXRVUkwgPSBjb25maWcudXJsO1xuICAgICAgICAgICAgICAgIGlmIChnZXRVUkwuaW5jbHVkZXMoJ3MzLmFtYXpvbmF3cy5jb20nKSl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTMyBjYWxsIG5vIGF1dGggaGVhZGVyIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRob3JpemF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBhdXRob3JpemF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWyd0b2tlbiddID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uIChyZWplY3Rpb24pIHtcblxuICAgICAgICAgICAgICAgIHZhciBBcGlTZXJ2aWNlID0gJGluamVjdG9yLmdldCgnQXBpU2VydmljZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlamVjdGlvbi5zdGF0dXMgPT09IDQwMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWplY3Rpb24uaGFzT3duUHJvcGVydHkoJ2RhdGEnKSAmJiByZWplY3Rpb24uZGF0YS5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykgJiYgKHJlamVjdGlvbi5kYXRhLmRldGFpbC5pbmRleE9mKFwidG9rZW5faGFzX2V4cGlyZWRcIikgIT0gLTEgfHwgcmVqZWN0aW9uLmRhdGEuZGV0YWlsLmluZGV4T2YoXCJub19hY2Nlc3NfdG9rZW5fcHJvdmlkZWRcIikgIT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhcIlJlZnJlc2ggVG9rZW4gXCIsIHJlamVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBMUyA9ICRpbmplY3Rvci5nZXQoJ0xTJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGh0dHAgPSAkaW5qZWN0b3IuZ2V0KCckaHR0cCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE9BVVRIID0gJGluamVjdG9yLmdldCgnT0FVVEgnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF1dGggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dyYW50X3R5cGUnOiAnY2xpZW50X2NyZWRlbnRpYWxzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xpZW50X2lkJzogT0FVVEguQ0xJRU5UX0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGllbnRfc2VjcmV0JzogT0FVVEguQ0xJRU5UX1NFQ1JFVFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZWNvdmVyIHRva2VuIGFuZCBjcmVhdGUgYSBuZXcgc2Vzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogQXBpU2VydmljZS5iYXNlKCkgKyAnL29hdXRoL2FjY2Vzc190b2tlbi8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIG9iailcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtwXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyLmpvaW4oXCImXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogYXV0aFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgnQXV0aG9yaXphdGlvbicsIGRhdGEudG9rZW5fdHlwZSArICcgJyArIGRhdGEuYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0aW9uLmNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBkYXRhLnRva2VuX3R5cGUgKyAnICcgKyBkYXRhLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgc2Vzc2lvbiByZWNvdmVyZWQsIG1ha2UgdGhlIHNhbWUgYmFja2VuZCBjYWxsIGFnYWluIGFuZCBjaGFpbiB0aGUgcmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRodHRwKHJlamVjdGlvbi5jb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKFwiNDAxOiBcIiwgcmVqZWN0aW9uLmRhdGEuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkaW50ZXJjb21Qcm92aWRlcikge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHtcbiAgICAgICAgICAgICdhcHAubWVkaWM1Mi5sb2NhbCc6ICd5NXJrMjBlbicsXG4gICAgICAgICAgICAnYXBwLWRldi5tZWRpYzUyLmNvbSc6ICd5NXJrMjBlbicsXG4gICAgICAgICAgICAnYXBwLXN0YWdpbmcubWVkaWM1Mi5jb20nOiAneTVyazIwZW4nLFxuICAgICAgICAgICAgJ2FwcC5tZWRpYzUyLmNvbSc6ICdjeGo1N21vaicsXG4gICAgICAgICAgICAnbG9jYWxob3N0OjgwOTUnOiAneTVyazIwZW4nXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICAgICAgdmFyIElOVEVSQ09NX0FQUElEID0gbWFwcGluZ1tob3N0XTtcblxuXG4gICAgICAgIC8vIEVpdGhlciBpbmNsdWRlIHlvdXIgYXBwX2lkIGhlcmUgb3IgbGF0ZXIgb24gYm9vdFxuICAgICAgICAkaW50ZXJjb21Qcm92aWRlci5hcHBJRChJTlRFUkNPTV9BUFBJRCk7XG5cbiAgICAgICAgLy8geW91IGNhbiBpbmNsdWRlIHRoZSBJbnRlcmNvbSdzIHNjcmlwdCB5b3Vyc2VsZiBvciB1c2UgdGhlIGJ1aWx0IGluIGFzeW5jIGxvYWRpbmcgZmVhdHVyZVxuICAgICAgICAkaW50ZXJjb21Qcm92aWRlci5hc3luY0xvYWRpbmcodHJ1ZSk7XG4gICAgfSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uIChJZGxlUHJvdmlkZXIsIEtlZXBhbGl2ZVByb3ZpZGVyKSB7XG5cbiAgICAgICAgLy8gY29uZmlndXJlIElkbGVQcm92aWRlciBzZXR0aW5nc1xuICAgICAgICBJZGxlUHJvdmlkZXIuaWRsZSgxODAwKTsgLy8gaW4gc2Vjb25kc1xuICAgICAgICBJZGxlUHJvdmlkZXIudGltZW91dCgxMjApOyAvLyBpbiBzZWNvbmRzXG5cbi8vICAgICAgICAgICAgS2VlcGFsaXZlUHJvdmlkZXIuaW50ZXJ2YWwoMik7IC8vIGluIHNlY29uZHNcbiAgICB9KVxuICAgIC5jb25maWcoWydncm93bFByb3ZpZGVyJywgZnVuY3Rpb24gKGdyb3dsUHJvdmlkZXIpIHtcbiAgICAgICAgZ3Jvd2xQcm92aWRlci5nbG9iYWxUaW1lVG9MaXZlKHtzdWNjZXNzOiA0MDAwLCBlcnJvcjogNjAwMCwgd2FybmluZzogNjAwMCwgaW5mbzogNDAwMH0pO1xuICAgICAgICBncm93bFByb3ZpZGVyLmdsb2JhbFBvc2l0aW9uKCd0b3AtY2VudGVyJyk7XG4gICAgICAgIGdyb3dsUHJvdmlkZXIuZ2xvYmFsRGlzYWJsZUNvdW50RG93bih0cnVlKTtcbiAgICB9XSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkaHR0cFByb3ZpZGVyKSB7XG4gICAgICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ2F1dGhIdHRwUmVzcG9uc2VJbnRlcmNlcHRvcicpO1xuXG4gICAgICAgIC8vUmVzdGFuZ3VsYXJQcm92aWRlci5zZXRCYXNlVXJsKFwiL2FwaS92M1wiKTtcblxuICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnVzZVhEb21haW4gPSB0cnVlO1xuICAgICAgICBkZWxldGUgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1SZXF1ZXN0ZWQtV2l0aCddO1xuICAgICAgICAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnhzcmZDb29raWVOYW1lID0gJ2NzcmZ0b2tlbic7XG4gICAgICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMueHNyZkhlYWRlck5hbWUgPSAnWC1DU1JGVG9rZW4nO1xuXG4gICAgICAgIGlmICghJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCkge1xuICAgICAgICAgICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmdldCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vZGlzYWJsZSBJRSBhamF4IHJlcXVlc3QgY2FjaGluZ1xuICAgICAgICAvLyRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXRbJ0lmLU1vZGlmaWVkLVNpbmNlJ10gPSAnMCc7XG4gICAgfSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkaW50ZXJwb2xhdGVQcm92aWRlciwgJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnW1snKTtcbiAgICAgICAgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sKCddXScpO1xuXG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KC9eXFxzKihodHRwfGh0dHBzfGJsb2J8ZGF0YSk6Lyk7XG4gICAgfSlcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkdHJhbnNsYXRlUHJvdmlkZXIpIHtcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZUxvYWRlcignbGFuZ0xvYWRlcicsIHt9KTtcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbl9VUycpO1xuICAgIH0pXG4gICAgLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblxuICAgICAgICB2YXIgY3VycmVudFVzZXIgPSBmdW5jdGlvbiAoVXNlclNlcnZpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBVc2VyU2VydmljZS5jdXJyZW50VXNlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBxdWVzdGlvbnMgPSBmdW5jdGlvbiAoUXVlc3Rpb25TZXJ2aWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gUXVlc3Rpb25TZXJ2aWNlLmZldGNoKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFzc2V0VHlwZXMgPSBmdW5jdGlvbiAoQXNzZXRUeXBlU2VydmljZSkge1xuICAgICAgICAgICAgcmV0dXJuIEFzc2V0VHlwZVNlcnZpY2UuZmV0Y2hBbGwoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYXJlYXMgPSBmdW5jdGlvbiAoQXJlYVNlcnZpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBBcmVhU2VydmljZS5mZXRjaEFsbCgxMDAwMCwgMSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGxvY2F0aW9ucyA9IGZ1bmN0aW9uIChMb2NhdGlvblNlcnZpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBMb2NhdGlvblNlcnZpY2UuZmV0Y2hBbGwoMTAwMDAsIDEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjb250cm9sbGVkU3Vic3RhbmNlcyA9IGZ1bmN0aW9uIChDb250cm9sbGVkU3Vic3RhbmNlU2VydmljZSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbnRyb2xsZWRTdWJzdGFuY2VTZXJ2aWNlLmZldGNoQWxsKDEwMDAwLCAxKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaW5jaWRlbnRTdGF0dXMgPSBmdW5jdGlvbihJbmNpZGVudFNlcnZpY2Upe1xuICAgICAgICAgICAgcmV0dXJuIEluY2lkZW50U2VydmljZS5nZXRTdGF0dXNlcygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRPRE8gOiBIYW5kbGUgdGhpcyB3aGVuIG11bHRpcGxlIHJlc29ydCBzY2VuYXJpbyBpcyBoYW5kbGVkXG4gICAgICAgIHZhciByZXNvcnRTZXR0aW5ncyA9IGZ1bmN0aW9uKFJlc29ydFNlcnZpY2UsIGN1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzb3J0U2VydmljZS5mZXRjaFNldHRpbmdzKGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X2lkKTtcbiAgICAgICAgfTtcblxuLy8gICAgICAgIC8vIEdsb2JhbCByb3V0ZXJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyXG4gICAgICAgICAgICAub3RoZXJ3aXNlKCcvbWFwJyk7XG5cbiAgICAgICAgLy8gV2l0aG91dCAjIGluIFVSTFxuICAgICAgICAvLyRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcblxuICAgICAgICAvLyBWaWV3c1xuICAgICAgICB2YXIgbG9naW4gPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYXV0aC90ZW1wbGF0ZXMvbG9naW4uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXV0aEN0cmwnXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHBhc3N3b3JkX2ZvcmdvdCA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9hdXRoL3RlbXBsYXRlcy9wYXNzd29yZC9mb3Jnb3QuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXV0aEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuXG4gICAgICAgIHZhciBwYXNzd29yZF9yZXNldCA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9hdXRoL3RlbXBsYXRlcy9wYXNzd29yZC9yZXNldC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBdXRoQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7Y3VycmVudFVzZXI6IGN1cnJlbnRVc2VyfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBoZWFkZXIgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYmFzZS90ZW1wbGF0ZXMvaGVhZGVyLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hlYWRlckN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdXNlcl9saXN0ID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3VzZXJzL3RlbXBsYXRlcy9pbmRleC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyTGlzdEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbi8vICAgICAgICAgICAgcmVzb2x2ZTogeyBhbGxVc2VyczogYWxsVXNlcnMgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB1c2VyX2VkaXQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvdXNlcnMvdGVtcGxhdGVzL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlckVkaXRDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtjdXJyZW50VXNlcjogY3VycmVudFVzZXJ9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVzZXJfYWRkID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3VzZXJzL3RlbXBsYXRlcy9hZGQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlckFkZEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVzb3J0X3NldHRpbmdzID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3Jlc29ydHMvdGVtcGxhdGVzL3NldHRpbmdzLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1Jlc29ydFNldHRpbmdzQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb25zOiBxdWVzdGlvbnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluY2lkZW50cyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9pbmNpZGVudHMvdGVtcGxhdGVzL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0luY2lkZW50Q3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uczogcXVlc3Rpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluY2lkZW50X2VkaXQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvaW5jaWRlbnRzL3RlbXBsYXRlcy9lZGl0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0luY2lkZW50VXBkYXRlQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgcXVlc3Rpb25zOiBxdWVzdGlvbnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRhc2hib2FyZCA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9hbmFseXRpY3MvdGVtcGxhdGVzL2Rhc2hib2FyZC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXNoYm9hcmRDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtjdXJyZW50VXNlcjogY3VycmVudFVzZXJ9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHBhdHJvbGxlcnNfcmVwb3J0ID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL2FuYWx5dGljcy90ZW1wbGF0ZXMvcGF0cm9sbGVyc19yZXBvcnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUGF0cm9sbGVyc1JlcG9ydEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IGxvY2F0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXBvcnRpbmcgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYW5hbHl0aWNzL3RlbXBsYXRlcy9yZXBvcnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVwb3J0Q3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uczogcXVlc3Rpb25zXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNoYXJ0ID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL2FuYWx5dGljcy90ZW1wbGF0ZXMvY2hhcnQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ2hhcnRDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25zOiBxdWVzdGlvbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2FzZV9zdGF0dXMgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYW5hbHl0aWNzL3RlbXBsYXRlcy9jYXNlX3N0YXR1cy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDYXNlU3RhdHVzQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIGluY2lkZW50U3RhdHVzOiBpbmNpZGVudFN0YXR1c1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZW9tYXAgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvbWFwL3RlbXBsYXRlcy9tYXAuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTWFwQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uczogcXVlc3Rpb25zLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiByZXNvcnRTZXR0aW5nc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBoZWF0bWFwID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL21hcC90ZW1wbGF0ZXMvaGVhdG1hcC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIZWF0bWFwQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiByZXNvcnRTZXR0aW5nc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhcmVhX2xpc3QgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYXJlYXMvdGVtcGxhdGVzL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0FyZWFMaXN0Q3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7Y3VycmVudFVzZXI6IGN1cnJlbnRVc2VyfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhcmVhX2VkaXQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYXJlYXMvdGVtcGxhdGVzL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXJlYUVkaXRDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtjdXJyZW50VXNlcjogY3VycmVudFVzZXJ9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFyZWFfYWRkID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL2FyZWFzL3RlbXBsYXRlcy9hZGQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXJlYUFkZEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbG9jYXRpb25fbGlzdCA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9sb2NhdGlvbnMvdGVtcGxhdGVzL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvY2F0aW9uTGlzdEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgbG9jYXRpb25fZWRpdCA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9sb2NhdGlvbnMvdGVtcGxhdGVzL2VkaXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTG9jYXRpb25FZGl0Q3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7Y3VycmVudFVzZXI6IGN1cnJlbnRVc2VyfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBsb2NhdGlvbl9hZGQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvbG9jYXRpb25zL3RlbXBsYXRlcy9hZGQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTG9jYXRpb25BZGRDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtjdXJyZW50VXNlcjogY3VycmVudFVzZXJ9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNvbnRyb2xsZWRfc3Vic3RhbmNlc19saXN0ID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL2NvbnRyb2xsZWRfc3Vic3RhbmNlcy90ZW1wbGF0ZXMvaW5kZXguaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29udHJvbGxlZFN1YnN0YW5jZUxpc3RDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtjdXJyZW50VXNlcjogY3VycmVudFVzZXJ9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNvbnRyb2xsZWRfc3Vic3RhbmNlX2VkaXQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvY29udHJvbGxlZF9zdWJzdGFuY2VzL3RlbXBsYXRlcy9lZGl0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbnRyb2xsZWRTdWJzdGFuY2VFZGl0Q3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7Y3VycmVudFVzZXI6IGN1cnJlbnRVc2VyfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjb250cm9sbGVkX3N1YnN0YW5jZV9hZGQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvY29udHJvbGxlZF9zdWJzdGFuY2VzL3RlbXBsYXRlcy9hZGQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29udHJvbGxlZFN1YnN0YW5jZUFkZEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYXNzZXRfbGlzdCA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9hc3NldHMvdGVtcGxhdGVzL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0Fzc2V0TGlzdEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgICAgICAgICAgICBhc3NldFR5cGVzOiBhc3NldFR5cGVzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFzc2V0X2VkaXQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYXNzZXRzL3RlbXBsYXRlcy9lZGl0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0Fzc2V0RWRpdEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgICAgICAgICAgICBhc3NldFR5cGVzOiBhc3NldFR5cGVzLFxuICAgICAgICAgICAgICAgIGFyZWFzOiBhcmVhcyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IGxvY2F0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhc3NldF9hZGQgPSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYXNzZXRzL3RlbXBsYXRlcy9hZGQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXNzZXRBZGRDdHJsJyxcbiAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICAgICAgICAgICAgYXNzZXRUeXBlczogYXNzZXRUeXBlcyxcbiAgICAgICAgICAgICAgICBhcmVhczogYXJlYXMsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25zOiBsb2NhdGlvbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc3RvY2tfYWRkID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3N0b2Nrcy90ZW1wbGF0ZXMvYWRkLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1N0b2NrQWRkQ3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRTdWJzdGFuY2VzOmNvbnRyb2xsZWRTdWJzdGFuY2VzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0b2NrX2NoZWNrb3V0ID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3N0b2Nrcy90ZW1wbGF0ZXMvY2hlY2tvdXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvY2tDaGVja291dEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlcixcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IGxvY2F0aW9ucyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVkU3Vic3RhbmNlczpjb250cm9sbGVkU3Vic3RhbmNlcyxcbiAgICAgICAgICAgICAgICBxdWVzdGlvbnM6IHF1ZXN0aW9ucyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc3RvY2tfcmVwb3J0ID0ge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3N0b2Nrcy90ZW1wbGF0ZXMvcmVwb3J0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1N0b2NrUmVwb3J0Q3RybCcsXG4gICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogbG9jYXRpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRTdWJzdGFuY2VzOmNvbnRyb2xsZWRTdWJzdGFuY2VzXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGF1ZGl0X2xvZyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9hdWRpdF9sb2cvdGVtcGxhdGVzL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0F1ZGl0TG9nTGlzdEN0cmwnLFxuICAgICAgICAgICAgcmVzb2x2ZToge2N1cnJlbnRVc2VyOiBjdXJyZW50VXNlcn1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTdGF0ZXNcbiAgICAgICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC5zdGF0ZSgnbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvZ2luJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGxvZ2luXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdwYXNzd29yZF9mb3Jnb3QnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3Bhc3N3b3JkL2ZvcmdvdCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBwYXNzd29yZF9mb3Jnb3RcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgncGFzc3dvcmRfcmVzZXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3Bhc3N3b3JkL3Jlc2V0JyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IHBhc3N3b3JkX3Jlc2V0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCd1c2VycycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvdXNlcnMnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogdXNlcl9saXN0XG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlciddXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCd1c2VyX2VkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3VzZXJzL3t1c2VySWQ6WzAtOUEtWmEtei1dK30vZWRpdCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiB1c2VyX2VkaXRcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnUGF0cm9sbGVyJywgJ01hbmFnZXInLCAnRGlzcGF0Y2hlciddXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ3VzZXJfYWRkJywge1xuICAgICAgICAgICAgICAgIHVybDogJy91c2Vycy9hZGQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogdXNlcl9hZGRcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlciddXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ3Jlc29ydF9zZXR0aW5ncycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvcmVzb3J0cy97cmVzb3J0SWQ6WzAtOUEtWmEtei1dK30vc2V0dGluZ3MnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogcmVzb3J0X3NldHRpbmdzXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ01hbmFnZXInXVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLnN0YXRlKCdpbmNpZGVudHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2luY2lkZW50cycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBpbmNpZGVudHNcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnaW5jaWRlbnRfZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaW5jaWRlbnRzL3tpbmNpZGVudElkOlswLTlBLVphLXotXSt9L2VkaXQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogaW5jaWRlbnRfZWRpdFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgncmVwb3J0aW5nJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9yZXBvcnRpbmcnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogcmVwb3J0aW5nXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgncmVwb3J0X2VkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3JlcG9ydGluZy97cmVwb3J0SWQ6WzAtOUEtWmEtei1dK30vJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IHJlcG9ydGluZ1xuXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ01hbmFnZXInLCAnRGlzcGF0Y2hlciddXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2NoYXJ0cycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2hhcnRzJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGNoYXJ0XG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnY2FzZS1zdGF0dXMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Nhc2Utc3RhdHVzJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGNhc2Vfc3RhdHVzXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnY2hhcnRfZWRpdCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvY2hhcnRzL3tyZXBvcnRJZDpbMC05QS1aYS16LV0rfS8nLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogY2hhcnRcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLnN0YXRlKCdtYXAnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL21hcCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBnZW9tYXBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnaGVhdG1hcCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvaGVhdG1hcCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBoZWF0bWFwXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ2FyZWFzJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9hcmVhcycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBhcmVhX2xpc3RcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9hc3NldF9tYW5hZ2VtZW50J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgnYXJlYV9lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9hcmVhcy97YXJlYUlkOlswLTlBLVphLXotXSt9L2VkaXQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogYXJlYV9lZGl0XG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2Fzc2V0X21hbmFnZW1lbnQnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2FyZWFfYWRkJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9hcmVhcy9hZGQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogYXJlYV9hZGRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2Fzc2V0X21hbmFnZW1lbnQnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2xvY2F0aW9ucycsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvbG9jYXRpb25zP2FyZWFJZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBsb2NhdGlvbl9saXN0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2Fzc2V0X21hbmFnZW1lbnQnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdsb2NhdGlvbl9lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9sb2NhdGlvbnMve2xvY2F0aW9uSWQ6WzAtOUEtWmEtei1dK30vZWRpdCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBsb2NhdGlvbl9lZGl0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlclxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9hc3NldF9tYW5hZ2VtZW50J1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLnN0YXRlKCdsb2NhdGlvbl9hZGQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2xvY2F0aW9ucy9hZGQnLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgICAgICdoZWFkZXInOiBoZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50JzogbG9jYXRpb25fYWRkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBjdXJyZW50VXNlclxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9hc3NldF9tYW5hZ2VtZW50J1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLnN0YXRlKCdjb250cm9sbGVkX3N1YnN0YW5jZXMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2NvbnRyb2xsZWQtc3Vic3RhbmNlcycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBjb250cm9sbGVkX3N1YnN0YW5jZXNfbGlzdFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9jb250cm9sbGVkX3N1YnN0YW5jZXMnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdjb250cm9sbGVkX3N1YnN0YW5jZV9lZGl0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jb250cm9sbGVkLXN1YnN0YW5jZXMve2NvbnRyb2xsZWRTdWJzdGFuY2VJZDpbMC05QS1aYS16LV0rfS9lZGl0JyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGNvbnRyb2xsZWRfc3Vic3RhbmNlX2VkaXRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2NvbnRyb2xsZWRfc3Vic3RhbmNlcydcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC5zdGF0ZSgnY29udHJvbGxlZF9zdWJzdGFuY2VfYWRkJywge1xuICAgICAgICAgICAgICAgIHVybDogJy9jb250cm9sbGVkLXN1YnN0YW5jZXMvYWRkJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGNvbnRyb2xsZWRfc3Vic3RhbmNlX2FkZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnUGF0cm9sbGVyJywgJ01hbmFnZXInLCAnRGlzcGF0Y2hlciddLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRQZXJtaXNzaW9uczogJ3VzZXJfY29udHJvbGxlZF9zdWJzdGFuY2VzJ1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLnN0YXRlKCdhc3NldHMnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Fzc2V0cycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBhc3NldF9saXN0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2Fzc2V0X21hbmFnZW1lbnQnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2Fzc2V0X2VkaXQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2Fzc2V0cy97YXNzZXRJZDpbMC05QS1aYS16LV0rfS9lZGl0JyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGFzc2V0X2VkaXRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2Fzc2V0X21hbmFnZW1lbnQnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2Fzc2V0X2FkZCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvYXNzZXRzL2FkZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBhc3NldF9hZGRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXI6IGN1cnJlbnRVc2VyXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJvbGVzOiBbJ1BhdHJvbGxlcicsICdNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUGVybWlzc2lvbnM6ICd1c2VyX2Fzc2V0X21hbmFnZW1lbnQnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ3N0b2NrX2FkZCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3RvY2svYWRkJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IHN0b2NrX2FkZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRTdWJzdGFuY2VzOiBjb250cm9sbGVkU3Vic3RhbmNlcyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25zOmxvY2F0aW9uc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9jb250cm9sbGVkX3N1YnN0YW5jZXMnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ3N0b2NrX2NoZWNrb3V0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9zdG9jay9jaGVja291dD9jb250cm9sbGVkU3Vic3RhbmNlU3RvY2tJZCZjb250cm9sbGVkU3Vic3RhbmNlSWQmbG9jYXRpb25JZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBzdG9ja19jaGVja291dFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRTdWJzdGFuY2VzOiBjb250cm9sbGVkU3Vic3RhbmNlcyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25zOmxvY2F0aW9uc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9jb250cm9sbGVkX3N1YnN0YW5jZXMnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ3N0b2NrX3JlcG9ydCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvc3RvY2svcmVwb3J0JyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IHN0b2NrX3JlcG9ydFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnUGF0cm9sbGVyJywgJ01hbmFnZXInLCAnRGlzcGF0Y2hlciddLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRQZXJtaXNzaW9uczogJ3VzZXJfY29udHJvbGxlZF9zdWJzdGFuY2VzJ1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLnN0YXRlKCdhdWRpdF9sb2cnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL2F1ZGl0JyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGF1ZGl0X2xvZ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydQYXRyb2xsZXInLCAnTWFuYWdlcicsICdEaXNwYXRjaGVyJ10sXG4gICAgICAgICAgICAgICAgYWxsb3dlZFBlcm1pc3Npb25zOiAndXNlcl9jb250cm9sbGVkX3N1YnN0YW5jZXMnXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAuc3RhdGUoJ2Rhc2hib2FyZCcsIHtcbiAgICAgICAgICAgICAgICB1cmw6ICcvJyxcbiAgICAgICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICAgICAnaGVhZGVyJzogaGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAnY29udGVudCc6IGRhc2hib2FyZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRSb2xlczogWydNYW5hZ2VyJywgJ0Rpc3BhdGNoZXInXVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdGF0ZSgncGF0cm9sbGVyc19yZXBvcnQnLCB7XG4gICAgICAgICAgICAgICAgdXJsOiAnL3JlcG9ydHMvcGF0cm9sbGVycycsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2hlYWRlcic6IGhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBwYXRyb2xsZXJzX3JlcG9ydFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlcjogY3VycmVudFVzZXIsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uczpsb2NhdGlvbnNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkUm9sZXM6IFsnTWFuYWdlcicsICdEaXNwYXRjaGVyJ11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgO1xuICAgIH0pXG5cbiAgICAucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkaHR0cCwgJGNvb2tpZXMsICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkd2luZG93LCAkc2NlLCAkdHJhbnNsYXRlLCAkbG9nLCBJZGxlLCBncm93bCwgVXNlclNlcnZpY2UsIExTLCAkbW9kYWwsIGhvdGtleXMsICRpbnRlcmNvbSkge1xuICAgICAgICAvLyBzdGFydCB3YXRjaGluZyB3aGVuIHRoZSBhcHAgcnVucy4gYWxzbyBzdGFydHMgdGhlICRrZWVwYWxpdmUgc2VydmljZSBieSBkZWZhdWx0LlxuICAgICAgICAkcm9vdFNjb3BlLiRvbignSWRsZVN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUud2FybmluZykge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUud2FybmluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS53YXJuaW5nID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHJvb3RTY29wZS53YXJuaW5nID0gJG1vZGFsKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJTZXNzaW9uIFRpbWVvdXRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIllvdSdsbCBiZSBsb2dnZWQgb3V0IGluIDIgbWludXRlcy5cIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCdJZGxlRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUud2FybmluZykge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUud2FybmluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS53YXJuaW5nID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kb24oJ0lkbGVUaW1lb3V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdGhlIHVzZXIgaGFzIHRpbWVkIG91dCAobWVhbmluZyBpZGxlRHVyYXRpb24gKyB3YXJuaW5nRHVyYXRpb24gaGFzIHBhc3NlZCB3aXRob3V0IGFueSBhY3Rpdml0eSlcbiAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLndhcm5pbmcpIHtcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLndhcm5pbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUud2FybmluZyA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgd2hlcmUgeW91J2QgbG9nIHRoZW1cbiAgICAgICAgICAgICRpbnRlcmNvbS5zaHV0ZG93bigpO1xuICAgICAgICAgICAgVXNlclNlcnZpY2UubG9nb3V0KDApXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgTFMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnbG9naW4nKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBJZGxlLndhdGNoKCk7XG5cbi8vICAgICAgICAkcm9vdFNjb3BlLm9ubGluZSA9IG5hdmlnYXRvci5vbkxpbmU7XG4vL1xuLy8gICAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5vbmxpbmUgPSBmYWxzZTtcbi8vICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgfSwgZmFsc2UpO1xuLy9cbi8vICAgICAgICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5vbmxpbmUgPSB0cnVlO1xuLy8gICAgICAgICAgICB9KTtcbi8vICAgICAgICB9LCBmYWxzZSk7XG5cbi8vICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUNTUkZUb2tlbiddID0gJGNvb2tpZXMuY3NyZnRva2VuO1xuICAgICAgICAkcm9vdFNjb3BlLiRzdGF0ZSA9ICRzdGF0ZTtcbiAgICAgICAgJHJvb3RTY29wZS4kc3RhdGVQYXJhbXMgPSAkc3RhdGVQYXJhbXM7XG5cblxuICAgICAgICAkcm9vdFNjb3BlLiRvbihcIiRzdGF0ZUNoYW5nZVN0YXJ0XCIsXG4gICAgICAgICAgICBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9TdGF0ZS5hdXRoZW50aWNhdGUgJiYgIVVzZXJTZXJ2aWNlLmlzX2F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnbG9naW4nKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9TdGF0ZS5oYXNPd25Qcm9wZXJ0eSgnYWxsb3dlZFJvbGVzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVc2VyU2VydmljZS5jdXJyZW50Um9sZSgpICYmICQuaW5BcnJheShVc2VyU2VydmljZS5jdXJyZW50Um9sZSgpLCB0b1N0YXRlLmFsbG93ZWRSb2xlcykgPj0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBwZXJtaXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSBVc2VyU2VydmljZS5jdXJyZW50VXNlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodG9TdGF0ZS5oYXNPd25Qcm9wZXJ0eSgnYWxsb3dlZFBlcm1pc3Npb25zJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih1c2VyLmhhc093blByb3BlcnR5KHRvU3RhdGUuYWxsb3dlZFBlcm1pc3Npb25zKSAmJiB1c2VyW3RvU3RhdGUuYWxsb3dlZFBlcm1pc3Npb25zXSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVXNlclNlcnZpY2UuY3VycmVudFJvbGUoKSA9PSBcIlBhdHJvbGxlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnaW5jaWRlbnRzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCdtYXAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKFwiUGVybWlzc2lvbiBkZW5pZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVXNlclNlcnZpY2UuY3VycmVudFJvbGUoKSA9PSBcIlBhdHJvbGxlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2luY2lkZW50cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnbWFwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKFwiUGVybWlzc2lvbiBkZW5pZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaG90a2V5cy5iaW5kVG8oJHJvb3RTY29wZSkuYWRkKHtcbiAgICAgICAgICAgIGNvbWJvOiAnc2hpZnQrbScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RvZ2dsZSBtZW51JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zaWRlcmJ0biA9ICEkcm9vdFNjb3BlLnNpZGVyYnRuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcnNpc3RlbnQ6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHJvb3RTY29wZS5zdHJpcHVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIC8vIHN0cmlwcyBvZmYgdGhlIGh0dHA6Ly8gYW5kIC8gb2ZmIHRoZSBlbmQgb2YgdXJsc1xuICAgICAgICAgICAgdmFyIHIgPSAvaHR0cHM/XFw6XFwvXFwvKC4rKVxcLy87XG4gICAgICAgICAgICByZXR1cm4gci50ZXN0KHVybCkgPyByLmV4ZWModXJsKVsxXSA6IHVybDtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLnNhZmVIdG1sID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY2UudHJ1c3RBc0h0bWwodmFsKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLmNoYW5nZUxhbmd1YWdlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgJHRyYW5zbGF0ZS51c2Uoa2V5KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvL1VuaXQgY29udmVyc2lvblxuICAgICAgICAkcm9vdFNjb3BlLktNMk0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMC42MjEgKiAxMCkgLyAxMDtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLk0yS00gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMS42MDkgKiAxMCkgLyAxMDtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLk0yRlQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMy4yODA4ICogMTApIC8gMTA7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS5GVDJNID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDAuMzA0OCAqIDEwKSAvIDEwO1xuICAgICAgICB9O1xuXG4gICAgICAgICRyb290U2NvcGUuS00yRlQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBtID0gTWF0aC5yb3VuZCh2YWx1ZSAqIDAuNjIxICogMTApIC8gMTA7XG4gICAgICAgICAgICByZXR1cm4gJHJvb3RTY29wZS5NMkZUKG0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRyb290U2NvcGUuRlQyS00gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBtID0gTWF0aC5yb3VuZCh2YWx1ZSAqIDAuMzA0OCAqIDEwKSAvIDEwO1xuICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuTTJLTShtKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLkMyRiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHZhbHVlICogMS44ICsgMzIpICogMTApIC8gMTA7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS5GMkMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKCgodmFsdWUgLSAzMikgLyAxLjgpICogMTApIC8gMTA7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHJvb3RTY29wZS5LRzJMQiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAyLjIwNSAqIDEwKSAvIDEwO1xuICAgICAgICB9O1xuXG4gICAgICAgICRyb290U2NvcGUuTEIyS0cgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMC40NTMgKiAxMCkgLyAxMDtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLmlzQXV0aGVudGljYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhKCRyb290U2NvcGUudXNlciA9PSBudWxsIHx8ICRyb290U2NvcGUudXNlciA9PSB1bmRlZmluZWQgKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLnRvVVRDID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdHogPSBqc3R6LmRldGVybWluZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudC50eih2YWx1ZSwgJ1lZWVktTU0tREQgSEg6bW06c3MnLCB0ei5uYW1lKCkpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRyb290U2NvcGUudG9Mb2NhbFRpbWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB0eiA9IGpzdHouZGV0ZXJtaW5lKCk7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50LnV0Yyh2YWx1ZSkudHoodHoubmFtZSgpKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLm9uX2Vycm9yID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgJGxvZy5sb2cocmVhc29uKTtcbi8vXG4vLyAgICAgICAgaWYgKHJlYXNvbi5lcnJvcnMuRXJyb3IuaW5kZXhPZihcImV4cGlyZWRcIikgIT09IC0xKSB7XG4vLyAgICAgICAgICAgICRsb2cubG9nKCdleHBpcmVkJyk7XG4vLyAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2xvZ2luJyk7XG4vLyAgICAgICAgfVxuICAgICAgICB9O1xuXG4vL1xuLy8gICAgJHJvb3RTY29wZS5oYXNSb2xlID0gZnVuY3Rpb24gKHJvbGUpIHtcbi8vICAgICAgICByZXR1cm4gKCRyb290U2NvcGUuaXNBdXRoZW50aWNhdGVkKCkgJiYgJHJvb3RTY29wZS51c2VyLlJvbGVbMF0gPT0gcm9sZSlcbi8vICAgIH07XG5cbi8vICAgICRzdGF0ZS5lcnJvckdvID0gZnVuY3Rpb24gKHRvLCBwYXJtcykge1xuLy8gICAgICAgIHJldHVybiAkc3RhdGUudHJhbnNpdGlvblRvKHRvLCBwYXJtcywge2xvY2F0aW9uOiBmYWxzZSwgaW5oZXJpdDogdHJ1ZSwgcmVsYXRpdmU6ICRzdGF0ZS4kY3VycmVudCwgbm90aWZ5OiB0cnVlfSk7XG4vLyAgICB9O1xuICAgIH0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwLnNlcnZpY2VzJywgW10pO1xuIiwiLyoqXG4gKiBEaXJlY3RpdmVzXG4gKiBBdXRob3I6IFNoaXJpc2ggR295YWxcbiAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXG4gICAgICAgIC5kaXJlY3RpdmUoJ2JhY2tlbmRFcnJvcicsIGJhY2tlbmRFcnJvcilcbiAgICAgICAgLmRpcmVjdGl2ZShcInBhc3N3b3JkVmVyaWZ5XCIsIHBhc3N3b3JkVmVyaWZ5KVxuICAgICAgICAuZGlyZWN0aXZlKFwiY29uZmlybU9uRXhpdFwiLCBjb25maXJtT25FeGl0KVxuICAgICAgICAuZGlyZWN0aXZlKFwicHJldmVudE1vdXNld2hlZWxcIiwgcHJldmVudE1vdXNld2hlZWwpXG4gICAgICAgIC5kaXJlY3RpdmUoXCJuZ0NvbmZpcm1cIiwgbmdDb25maXJtKVxuICAgICAgICAuZGlyZWN0aXZlKFwiZmlsZU1vbml0b3JcIiwgZmlsZU1vbml0b3IpXG4gICAgO1xuXG4gICAgZnVuY3Rpb24gZmlsZU1vbml0b3IoKSB7XG4gICAgICAgIHZhciBkYXRhVVJJdG9CbG9iID0gZnVuY3Rpb24gKGRhdGFVUkkpIHtcbiAgICAgICAgICAgIC8vIGNvbnZlcnQgYmFzZTY0L1VSTEVuY29kZWQgZGF0YSBjb21wb25lbnQgdG8gcmF3IGJpbmFyeSBkYXRhIGhlbGQgaW4gYSBzdHJpbmdcbiAgICAgICAgICAgIHZhciBieXRlU3RyaW5nO1xuXG4gICAgICAgICAgICBpZiAoZGF0YVVSSS5zcGxpdCgnLCcpWzBdLmluZGV4T2YoJ2Jhc2U2NCcpID49IDApIHtcbiAgICAgICAgICAgICAgICBieXRlU3RyaW5nID0gZGF0YVVSSS5zcGxpdCgnLCcpWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBieXRlU3RyaW5nID0gZGF0YVVSSS5zcGxpdCgnLCcpWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYnl0ZVN0cmluZztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZmlsZUNoYW5nZWQgPSBmdW5jdGlvbiAoZmlsZXMsIHNjb3BlLCBjdHJsLCBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IGZpbGVzWzBdLFxuICAgICAgICAgICAgICAgIHN1cHBvcnRlZEZpbGVUeXBlID0gW1xuICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ltYWdlL2dpZicsXG4gICAgICAgICAgICAgICAgICAgICdpbWFnZS9qcGVnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ltYWdlL2pwZycsXG4gICAgICAgICAgICAgICAgICAgICdpbWFnZS9wbmcnLFxuICAgICAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0L2h0bWwnLFxuICAgICAgICAgICAgICAgICAgICAnYXVkaW8vbXAzJyxcbiAgICAgICAgICAgICAgICAgICAgJ3ZpZGVvL21wNCcsXG4gICAgICAgICAgICAgICAgICAgICdhdWRpby9tcDQnXG4gICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZmlsZS50eXBlKTtcblxuICAgICAgICAgICAgaWYgKHN1cHBvcnRlZEZpbGVUeXBlLmluZGV4T2YoZmlsZS50eXBlKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlU2l6ZUxpbWl0ID0gMTAyNCAqIDEwMjQgKiAxMDsgLy9tYlxuXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlLnNpemUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuc2l6ZSA+IGZpbGVTaXplTGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0ZpbGUgc2l6ZSBpcyB0b28gbGFyZ2UgYW5kIG1heCBzaXplIGFsbG93ZWQgaXMgJyArIChmaWxlU2l6ZUxpbWl0IC8gKDEwMjQgKiAxMDI0KSkgKyAnIG1iJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdDaGVja2VyID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsZVJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGxlZCB3aGVuIGFmdGVyIHJlYWRBc0RhdGFVUkwgb24gZmlsZVJlYWRlclxuICAgICAgICAgICAgICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gKHJlcy50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm5nTW9kZWwgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaHJvdyBmaWxlIG5vdCBzdXBwb3J0ZWQgZXJyb3JcblxuICAgICAgICAgICAgICAgIGFsZXJ0KCdGaWxlIHR5cGUgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvLyBEZWNsYXJlZCBhcyBhdHRyaWJ1dGUgdG8gYWN0aXZhdGVcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG5cbiAgICAgICAgICAgIC8vIFNjb3BlIHZhbHVlc1xuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBuZ01vZGVsOiAnPScsXG4gICAgICAgICAgICAgICAgb25GaWxlQ2hhbmdlOiAnJidcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBvbkZpbGVDaGFuZ2UoZXZlbnQudGFyZ2V0LmZpbGVzKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIFVzZSBuYXRpdmUgZXZlbnQgb25kcm9wIGluc3RlYWQgb2YgYW5ndWxhcmpzXG4gICAgICAgICAgICAgICAgZWxlbWVudFswXS5vbmRyb3AgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgb25GaWxlQ2hhbmdlKGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlcyk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0ub25kcmFnZW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0ub25kcmFnb3ZlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25GaWxlQ2hhbmdlKGZpbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlQ2hhbmdlZChmaWxlcywgc2NvcGUsIGN0cmwsIGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB2YWx1ZSBvbiB0aGUgaW5wdXQgZmllbGQgdG8gYWxsb3cgcmUtdXBsb2FkIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0cigndHlwZScsICdmaWxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSBiYWNrZW5kRXJyb3JcbiAgICAgKiBAZGVzYyBDbGVhciBiYWNrZW5kIGVycm9yIGlmIGlucHV0IHZhbHVlIGhhcyBiZWVuIG1vZGlmaWVkLlxuICAgICAqICAgICAgIFRoaXMgaGVscHMgaW4gZW5zdXJpbmcgZmllbGQgaXMgcmUtdmFsaWRhdGVkIGZyb20gYmFja2VuZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhY2tlbmRFcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgICAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwuJHNldFZhbGlkaXR5KCdiYWNrZW5kJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3N3b3JkVmVyaWZ5KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHBhc3N3b3JkVmVyaWZ5OiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbWJpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY29wZS5wYXNzd29yZFZlcmlmeSB8fCBjdHJsLiR2aWV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkID0gc2NvcGUucGFzc3dvcmRWZXJpZnkgKyAnXycgKyBjdHJsLiR2aWV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVkO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbiAodmlld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHNjb3BlLnBhc3N3b3JkVmVyaWZ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW4gIT09IHZpZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eShcInBhc3N3b3JkVmVyaWZ5XCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eShcInBhc3N3b3JkVmVyaWZ5XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlld1ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJldmVudE1vdXNld2hlZWwoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCAkZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50Lm9uKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KHRoaXMpLm9uKCdtb3VzZXdoZWVsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJGVsZW1lbnQub24oJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCh0aGlzKS5vZmYoJ21vdXNld2hlZWwnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maXJtT25FeGl0KCkge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGNvbmZpcm1PbkV4aXQ6ICcmJyxcbiAgICAgICAgICAgICAgICBjb25maXJtTWVzc2FnZVdpbmRvdzogJ0AnLFxuICAgICAgICAgICAgICAgIGNvbmZpcm1NZXNzYWdlUm91dGU6ICdAJyxcbiAgICAgICAgICAgICAgICBjb25maXJtTWVzc2FnZTogJ0AnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgZWxlbSwgYXR0cnMpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY29uZmlybU9uRXhpdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNvbmZpcm1NZXNzYWdlV2luZG93IHx8ICRzY29wZS5jb25maXJtTWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgJGxvY2F0aW9uQ2hhbmdlU3RhcnRVbmJpbmQgPSAkc2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgbmV4dCwgY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNvbmZpcm1PbkV4aXQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25maXJtKCRzY29wZS5jb25maXJtTWVzc2FnZVJvdXRlIHx8ICRzY29wZS5jb25maXJtTWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uYmVmb3JldW5sb2FkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uQ2hhbmdlU3RhcnRVbmJpbmQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZ0NvbmZpcm0oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIGxpbms6IHtcbiAgICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zZyA9IGF0dHJzLm5nQ29uZmlybSB8fCBcIkFyZSB5b3Ugc3VyZT9cIjtcblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm0obXNnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuZmlsdGVyKCdzdGFydEZyb20nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIHN0YXJ0KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDAgKyBzdGFydDsgLy9wYXJzZSB0byBpbnRcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfSlcbiAgICAuZmlsdGVyKCdyYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgdG90YWwpIHtcbiAgICAgICAgICAgIHRvdGFsID0gcGFyc2VJbnQodG90YWwpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdG90YWw7IGkrKylcbiAgICAgICAgICAgICAgICBpbnB1dC5wdXNoKGkpO1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcigndG9Mb2NhbCcsIGZ1bmN0aW9uICgkZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCAmJiBpbnB1dC5pbmRleE9mKCdUJyk+MCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKGlucHV0KS5sb2NhbCgpLmZvcm1hdChcImhoOm1tIEFcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxuICAgIC5maWx0ZXIoJ3RvTG9jYWxEYXRlVGltZScsIGZ1bmN0aW9uICgkZmlsdGVyLFVzZXJTZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciB0eiA9IGpzdHouZGV0ZXJtaW5lKCk7XG5cbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKGlucHV0KS50eih0ei5uYW1lKCkpLmZvcm1hdChVc2VyU2VydmljZS5jdXJyZW50VXNlcigpLnJlc29ydHNbMF0uZGF0ZXRpbWVfZm9ybWF0LmtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxuICAgIC5maWx0ZXIoJ3RvRWxhcHNlZFRpbWUnLCBmdW5jdGlvbiAoJGZpbHRlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBmcm9tID0gbW9tZW50LnV0YyhpbnB1dCk7XG4gICAgICAgICAgICAgICAgdmFyIG5vdyA9IG1vbWVudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAgbW9tZW50LmR1cmF0aW9uKG5vdy5kaWZmKGZyb20sIFwic2Vjb25kc1wiKSwgXCJzZWNvbmRzXCIpLmZvcm1hdChmb3JtYXQpIDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcigndG9UaXRsZWNhc2UnLCBmdW5jdGlvbiAoJGZpbHRlcikge1xuXG4gICAgICAgIFN0cmluZy5wcm90b3R5cGUudG9UaXRsZUNhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9cXHdcXFMqL2csIGZ1bmN0aW9uKHR4dCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCAmJiAodHlwZW9mIGlucHV0ID09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXCJcIitpbnB1dCkudG9UaXRsZUNhc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcigna2V5c09ubHknLCBmdW5jdGlvbiAoJGZpbHRlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAvL3ZhciBkYXRhID0gICQuZ3JlcChpbnB1dCwgZnVuY3Rpb24odikge1xuICAgICAgICAgICAgICAgIC8vICAgIHJldHVybiB2LnNlbGVjdGVkID09PSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIga2V5cyA9IF8ucGx1Y2soaW5wdXQsIFwia2V5XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXlzLmpvaW4oXCIsIFwiKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSlcbiAgICAuZmlsdGVyKCd0cmFuc2Zvcm1Jbmp1cnknLCBmdW5jdGlvbiAoJGZpbHRlciwgJHRyYW5zbGF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICQubWFwKCBpbnB1dCwgZnVuY3Rpb24oIHZhbCwgaSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGUuaW5zdGFudCh2YWwuaW5qdXJ5X2xvY2F0aW9uKSArIFwiIFwiICsgJHRyYW5zbGF0ZS5pbnN0YW50KHZhbC5ib2R5X3BhcnQpICsgXCIgXCIgKyAkdHJhbnNsYXRlLmluc3RhbnQodmFsLmluanVyeV90eXBlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmpvaW4gKFwiLCBcIik7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcigndHJhbnNmb3JtSW5qdXJ5Rmlyc3QnLCBmdW5jdGlvbiAoJGZpbHRlciwgJHRyYW5zbGF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICQubWFwKCBpbnB1dCwgZnVuY3Rpb24oIHZhbCwgaSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGUuaW5zdGFudCh2YWwuaW5qdXJ5X2xvY2F0aW9uKSArIFwiIFwiICsgJHRyYW5zbGF0ZS5pbnN0YW50KHZhbC5ib2R5X3BhcnQpICsgXCIgXCIgKyAkdHJhbnNsYXRlLmluc3RhbnQodmFsLmluanVyeV90eXBlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhWzBdO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxuICAgIC5maWx0ZXIoJ3RyYW5zZm9ybUluanVyeUxvY2F0aW9uUGFydCcsIGZ1bmN0aW9uICgkZmlsdGVyLCAkdHJhbnNsYXRlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJC5tYXAoIGlucHV0LCBmdW5jdGlvbiggdmFsLCBpICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHRyYW5zbGF0ZS5pbnN0YW50KHZhbC5pbmp1cnlfbG9jYXRpb24pICsgXCIgXCIgKyAkdHJhbnNsYXRlLmluc3RhbnQodmFsLmJvZHlfcGFydCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5qb2luIChcIiwgXCIpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxuICAgIC5maWx0ZXIoJ3RyYW5zZm9ybUluanVyeVR5cGUnLCBmdW5jdGlvbiAoJGZpbHRlciwgJHRyYW5zbGF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICQubWFwKCBpbnB1dCwgZnVuY3Rpb24oIHZhbCwgaSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGUuaW5zdGFudCh2YWwuaW5qdXJ5X3R5cGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuam9pbiAoXCIsIFwiKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSlcbiAgICAuZmlsdGVyKCd0cmFuc2Zvcm1UcmVhdG1lbnQnLCBmdW5jdGlvbiAoJGZpbHRlciwgJHRyYW5zbGF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICQubWFwKCBpbnB1dCwgZnVuY3Rpb24oIHZhbCwgaSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGUuaW5zdGFudChfLnZhbHVlcyh2YWwpWzBdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmpvaW4gKFwiLCBcIik7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pXG4gICAgLmZpbHRlcigndHJhbnNmb3JtUGF0aWVudCcsIGZ1bmN0aW9uICgkZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC5uYW1lO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQ2FzZVN0YXR1c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHEsICR3aW5kb3csICRpbnRlcmNvbSwgJHRyYW5zbGF0ZSwgSW5jaWRlbnRTZXJ2aWNlLCBEYXRlUmFuZ2VTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsIGluY2lkZW50U3RhdHVzLCBmaWx0ZXJGaWx0ZXIpIHtcblxuICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdXNlcl9pZDogY3VycmVudFVzZXIudXNlcl9pZCxcbiAgICAgICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgZGFzaGJvYXJkX2ZlYXR1cmVfbGFzdF91c2VkOiBcIkNhc2VTdGF0dXNcIlxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGF0ZV9mb3JtYXRfbWFwcGluZyA9IHtcbiAgICAgICAgICAgIFwiTU0vREQvWVlZWVwiOiBcIk1NL2RkL3l5eXlcIixcbiAgICAgICAgICAgIFwiREQvTU0vWVlZWVwiOiBcImRkL01NL3l5eXlcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXNvcnQgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdO1xuICAgICAgICAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0ID0gcmVzb3J0LmRhdGV0aW1lX2Zvcm1hdC5rZXk7XG4gICAgICAgIHZhciBkYXRlX2Zvcm1hdCA9ICRzY29wZS5kYXRldGltZV9mb3JtYXQuc2xpY2UoMCwgMTApO1xuICAgICAgICAkc2NvcGUuZGF0ZV9mb3JtYXQgPSBkYXRlX2Zvcm1hdF9tYXBwaW5nW2RhdGVfZm9ybWF0XTtcbiAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICBmdW5jdGlvbiB0b1VUQyh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB0cnkgeyB2YWx1ZSA9IHZhbHVlLmZvcm1hdCgpOyB9IGNhdGNoIChlKXsgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudHoodmFsdWUsICdZWVlZLU1NLUREIEhIOm1tOnNzJywgdHoubmFtZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvTG9jYWxUaW1lKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50LnV0Yyh2YWx1ZSkudHoodHoubmFtZSgpKS5mb3JtYXQoZGF0ZV9mb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmRhdGVfcmFuZ2Vfb3B0aW9ucyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KFwibGFzdF9zZXZlbl9kYXlzXCIpLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJhXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6ICR0cmFuc2xhdGUuaW5zdGFudChcImxhc3RfdGhpcnR5X2RheXNcIiksXG4gICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KFwibGFzdF9zaXhfbW9udGhzXCIpLFxuICAgICAgICAgICAgICAgIFwidmFsdWVcIjogXCJjXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6ICR0cmFuc2xhdGUuaW5zdGFudChcImxhc3RfdHdlbHZlX21vbnRoc1wiKSxcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwiZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibmFtZVwiOiAkdHJhbnNsYXRlLmluc3RhbnQoXCJjdXN0b21fZGF0ZV9yYW5nZVwiKSxcbiAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwiZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkX2RhdGVfcmFuZ2Vfb3B0aW9uID0gXCJiXCI7XG5cbiAgICAgICAgJHNjb3BlLmRhdGVmcm9tID0gbW9tZW50KCkuc3VidHJhY3QoMzAsICdkYXlzJyk7IC8vICsgJ1QwMDowMDowMC4wMDBaJztcbiAgICAgICAgJHNjb3BlLmRhdGV0byA9IG1vbWVudCgpOy8vLnR6KHR6Lm5hbWUoKSkuZm9ybWF0KCdZWVlZLU1NLUREJykrICdUMjM6NTk6NTkuOTk5Wic7XG5cbiAgICAgICAgJHNjb3BlLmluY2lkZW50U3RhdHVzID0gW107XG5cbiAgICAgICAgJHNjb3BlLmluY2lkZW50U3RhdHVzID0gaW5jaWRlbnRTdGF0dXMubWFwKGZ1bmN0aW9uKGN1cnJlbnRWYWx1ZSwgSW5kZXgpe1xuICAgICAgICAgICAgaWYoY3VycmVudFZhbHVlLm9yZGVyID09IDkpe1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKGN1cnJlbnRWYWx1ZS5vcmRlciA9PSA4KXtcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWVbXCJzZWxlY3RlZFwiXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlW1wic2VsZWN0ZWRcIl0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5pbmNpZGVudFN0YXR1cy5wb3AoKTtcblxuICAgICAgICAvLyBzZWxlY3RlZCBmcnVpdHNcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkU3RhdHVzID0gW107XG5cbiAgICAgICAgLy8gd2F0Y2ggZnJ1aXRzIGZvciBjaGFuZ2VzXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2luY2lkZW50U3RhdHVzfGZpbHRlcjp7c2VsZWN0ZWQ6dHJ1ZX0nLCBmdW5jdGlvbiAobnYpIHtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFN0YXR1cyA9IG52Lm1hcChmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1cy5vcmRlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAvLyBXYXRjaCBkYXRlZnJvbSBhbmQgZGF0ZXRvXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3NlbGVjdGVkX2RhdGVfcmFuZ2Vfb3B0aW9uJywgZnVuY3Rpb24obnYpIHtcbiAgICAgICAgICAgIHN3aXRjaChudi52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZWZyb20gPSBtb21lbnQoKS5zdWJ0cmFjdCg3LCAnZGF5cycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVmcm9tID0gbW9tZW50KCkuc3VidHJhY3QoMzAsICdkYXlzJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZWZyb20gPSBtb21lbnQoKS5zdWJ0cmFjdCgxODAsICdkYXlzJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZWZyb20gPSBtb21lbnQoKS5zdWJ0cmFjdCgxLCAneWVhcicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgaW5jaWRlbnRzOiBbXSxcbiAgICAgICAgICAgIHN1bW1hcnk6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDIwLFxuICAgICAgICAgICAgZmlsdGVyZWRJdGVtczogMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDAsXG4gICAgICAgICAgICB0b3RhbFBhZ2VzOiAwLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3I6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNlYXJjaCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5mZXRjaFN0YXR1c1JlcG9ydCh0b1VUQygkc2NvcGUuZGF0ZWZyb20pLCB0b1VUQygkc2NvcGUuZGF0ZXRvKSwgJHNjb3BlLnNlbGVjdGVkU3RhdHVzLnRvU3RyaW5nKCksICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSwgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UsICdqc29uJykudGhlbihcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEucmVzdWx0cywgZnVuY3Rpb24oZWxlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0c1tpbmRleF1bJ2R0X2NyZWF0ZWQnXSA9IHRvTG9jYWxUaW1lKG1vbWVudChlbGVtWydkdF9jcmVhdGVkJ10sICdZWVlZLU1NLUREIEhIOm1tOnNzJykpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pbmNpZGVudHMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnN1bW1hcnkgPSBkYXRhLnN1bW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgPSAoJHNjb3BlLmxpc3QuaW5jaWRlbnRzID09IG51bGwpID8gMCA6ICRzY29wZS5saXN0LmluY2lkZW50cy5sZW5ndGg7IC8vSW5pdGlhbGx5IGZvciBubyBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoZGF0YS5jb3VudCAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heF9jb3VudCA9IGRhdGEuc3VtbWFyeS5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmNvdW50ID4gYi5jb3VudCA/IGEgOiBiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUubGlzdC5zdW1tYXJ5LCBmdW5jdGlvbihlbGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbS5jb3VudCAhPSBtYXhfY291bnQuY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5zdW1tYXJ5W2luZGV4XVsnd2lkdGgnXSA9IG1heF9jb3VudC5jb3VudCAhPSAwID8gKChlbGVtLmNvdW50ICogMTAwKSAvIG1heF9jb3VudC5jb3VudCkgKyAyNSA6IDI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnN1bW1hcnlbaW5kZXhdWydoZWlnaHQnXSA9IG1heF9jb3VudC5jb3VudCAhPSAwID8gKChlbGVtLmNvdW50ICogMTAwKSAvIG1heF9jb3VudC5jb3VudCkgKyAyNSA6IDI1O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5zdW1tYXJ5W2luZGV4XVsnd2lkdGgnXSA9IG1heF9jb3VudC5jb3VudCAhPSAwID8gKChlbGVtLmNvdW50ICogMTAwKSAvIG1heF9jb3VudC5jb3VudCkgOiAyNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5zdW1tYXJ5W2luZGV4XVsnaGVpZ2h0J10gPSBtYXhfY291bnQuY291bnQgIT0gMCA/ICgoZWxlbS5jb3VudCAqIDEwMCkgLyBtYXhfY291bnQuY291bnQpIDogMjU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICl9O1xuXG4gICAgICAgICRzY29wZS5zdGF0dXNGaWx0ZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRTdGF0dXMgPSBpZDtcbiAgICAgICAgICAgICRzY29wZS5pbmNpZGVudFN0YXR1cyA9ICRzY29wZS5pbmNpZGVudFN0YXR1cy5tYXAoZnVuY3Rpb24oY3VycmVudFZhbHVlLCBJbmRleCl7XG4gICAgICAgICAgICAgICAgaWYoY3VycmVudFZhbHVlLm9yZGVyID09IGlkKXtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlW1wic2VsZWN0ZWRcIl0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZVtcInNlbGVjdGVkXCJdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS5zZWFyY2goKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUub25QcmludCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkd2luZG93LnByaW50KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm9uRG93bmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmZldGNoU3RhdHVzUmVwb3J0KHRvVVRDKCRzY29wZS5kYXRlZnJvbSksIHRvVVRDKCRzY29wZS5kYXRldG8pLCAkc2NvcGUuc2VsZWN0ZWRTdGF0dXMudG9TdHJpbmcoKSwgJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgJ2NzdicpLnRoZW4oXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gYW5ndWxhci5lbGVtZW50KCc8YS8+Jyk7XG4gICAgICAgICAgICAgICAgICAgIGFuY2hvci5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICdkYXRhOmF0dGFjaG1lbnQvY3N2O2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSShkYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogJ19ibGFuaycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZDogJ3N0YXR1cy1yZXBvcnQuY3N2J1xuICAgICAgICAgICAgICAgICAgICB9KVswXS5jbGljaygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0Lml0ZW1zUGVyUGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5jdXJyZW50UGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgfSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQ2hhcnRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRxLCAkd2luZG93LCAkaW50ZXJjb20sICR0cmFuc2xhdGUsIEluY2lkZW50U2VydmljZSwgRGF0ZVJhbmdlU2VydmljZSwgcXVlc3Rpb25zLCBjdXJyZW50VXNlciwgZ3Jvd2wsIFJlcG9ydFNlcnZpY2UpIHtcblxuICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdXNlcl9pZDogY3VycmVudFVzZXIudXNlcl9pZCxcbiAgICAgICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgZGFzaGJvYXJkX2ZlYXR1cmVfbGFzdF91c2VkOiBcIkNoYXJ0c1wiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICB2YXIgcmVzb3J0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXTtcbiAgICAgICAgdmFyIHJlc29ydF9pZCA9IHJlc29ydC5yZXNvcnRfaWQ7XG5cbiAgICAgICAgdmFyIGRhdGVfZm9ybWF0X21hcHBpbmcgPSB7XG4gICAgICAgICAgICBcIk1NL0REL1lZWVlcIjogXCJNTS9kZC95eXl5XCIsXG4gICAgICAgICAgICBcIkREL01NL1lZWVlcIjogXCJkZC9NTS95eXl5XCJcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0ID0gcmVzb3J0LmRhdGV0aW1lX2Zvcm1hdC5rZXk7XG4gICAgICAgIHZhciBkYXRlX2Zvcm1hdCA9ICRzY29wZS5kYXRldGltZV9mb3JtYXQuc2xpY2UoMCwgMTApO1xuICAgICAgICAkc2NvcGUuZGF0ZV9mb3JtYXQgPSBkYXRlX2Zvcm1hdF9tYXBwaW5nW2RhdGVfZm9ybWF0XTtcblxuICAgICAgICBmdW5jdGlvbiB0b1VUQyh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudC50eih2YWx1ZSwgJ1lZWVktTU0tREQgSEg6bW06c3MnLCB0ei5uYW1lKCkpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdG9Mb2NhbFRpbWUodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHZhbHVlKS50eih0ei5uYW1lKCkpLmZvcm1hdChkYXRlX2Zvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuaWQgPSAkc3RhdGVQYXJhbXMucmVwb3J0SWQ7XG5cbiAgICAgICAgJHNjb3BlLnNjYWxlcyA9IFtcbiAgICAgICAgICAgIHtrZXk6ICdkYXRlJywgdmFsdWU6ICdEYXRlJ30sXG4gICAgICAgICAgICB7a2V5OiAnZGF5JywgdmFsdWU6ICdEYXknfSxcbiAgICAgICAgICAgIHtrZXk6ICdob3VyJywgdmFsdWU6ICdIb3VyJ30sXG4gICAgICAgICAgICB7a2V5OiAnZGF5X29mX3dlZWsnLCB2YWx1ZTogJ1dlZWtkYXknfSxcbiAgICAgICAgICAgIHtrZXk6ICd3ZWVrX29mX3llYXInLCB2YWx1ZTogJ1dlZWsgb2YgWWVhcid9LFxuICAgICAgICAgICAge2tleTogJ21vbnRoX29mX3llYXInLCB2YWx1ZTogJ01vbnRoJ30sXG4gICAgICAgICAgICB7a2V5OiAneWVhcicsIHZhbHVlOiAnWWVhcid9LFxuICAgICAgICAgICAge2tleTogJ2hvdXJfb2ZfZGF5X29mX3dlZWsnLCB2YWx1ZTogJ0hvdXIgb2YgRGF5IG9mIFdlZWsnfVxuICAgICAgICBdO1xuXG4gICAgICAgICRzY29wZS5zY2FsZSA9ICRzY29wZS5zY2FsZXNbMF07XG5cbiAgICAgICAgJHNjb3BlLnNjaGVtYSA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXSxcbiAgICAgICAgICAgIHByb3BlcnRpZXNfYWx0ZXI6IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzX2FsdGVyLnB1c2goe1xuICAgICAgICAgICAgJ3RpdGxlJzogJ0luY2lkZW50cyAtIFRvdGFsJyxcbiAgICAgICAgICAgICd0eXBlJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnb3JkZXInOiAwLFxuICAgICAgICAgICAgJ2Z1bGxrZXknOiAndG90YWxfaW5jaWRlbnQnLFxuICAgICAgICAgICAgJ2tleSc6ICd0b3RhbF9pbmNpZGVudCcsXG4gICAgICAgICAgICAnZm9ybXR5cGUnOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICcnLFxuICAgICAgICAgICAgJ3RpdGxlTWFwJzogW11cbiAgICAgICAgfSk7XG5cblxuLy8gICAgICAgIFNjaGVtYVx0Rm9ybSB0eXBlXG4vLyAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcdHRleHRcbi8vICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlx0bnVtYmVyXG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiXHRudW1iZXJcbi8vICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcdGNoZWNrYm94XG4vLyAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCJcdGZpZWxkc2V0XG4vLyAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIgYW5kIGEgXCJlbnVtXCJcdHNlbGVjdFxuLy8gICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIgYW5kIGEgXCJlbnVtXCIgaW4gYXJyYXkgdHlwZVx0Y2hlY2tib3hlc1xuLy8gICAgICAgIFwidHlwZVwiOiBcImFycmF5XCJcdGFycmF5XG5cbiAgICAgICAgdmFyIHNjaGVtYV90eXBlID0ge1xuICAgICAgICAgICAgJ3RleHQnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICd0ZXh0YXJlYSc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ251bWJlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ3JhbmdlJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnYXJyb3dzJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnc2VsZWN0JzogJ3N0cmluZycsXG4gICAgICAgICAgICAnbXVsdGlfc2VsZWN0JzogJ3N0cmluZycsXG4gICAgICAgICAgICAncmFkaW8nOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdyYWRpb19idXR0b24nOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdnZW5kZXInOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdpbWFnZSc6ICdvYmplY3QnLFxuICAgICAgICAgICAgJ2RhdGVfcGlja2VyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnZGF0ZV90aW1lX3BpY2tlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2dvb2dsZV9tYXAnOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICdmaWxlJzogJ3N0cmluZydcbiAgICAgICAgfTtcblxuLy8gICAgICAgIEZvcm0gVHlwZVx0QmVjb21lc1xuLy8gICAgICAgIGZpZWxkc2V0XHRhIGZpZWxkc2V0IHdpdGggbGVnZW5kXG4vLyAgICAgICAgc2VjdGlvblx0anVzdCBhIGRpdlxuLy8gICAgICAgIGNvbmRpdGlvbmFsXHRhIHNlY3Rpb24gd2l0aCBhIG5nLWlmXG4vLyAgICAgICAgYWN0aW9uc1x0aG9yaXpvbnRhbCBidXR0b24gbGlzdCwgY2FuIG9ubHkgc3VibWl0IGFuZCBidXR0b25zIGFzIGl0ZW1zXG4vLyAgICAgICAgdGV4dFx0aW5wdXQgd2l0aCB0eXBlIHRleHRcbi8vICAgICAgICB0ZXh0YXJlYVx0YSB0ZXh0YXJlYVxuLy8gICAgICAgIG51bWJlclx0aW5wdXQgdHlwZSBudW1iZXJcbi8vICAgICAgICBwYXNzd29yZFx0aW5wdXQgdHlwZSBwYXNzd29yZFxuLy8gICAgICAgIGNoZWNrYm94XHRhIGNoZWNrYm94XG4vLyAgICAgICAgY2hlY2tib3hlc1x0bGlzdCBvZiBjaGVja2JveGVzXG4vLyAgICAgICAgc2VsZWN0XHRhIHNlbGVjdCAoc2luZ2xlIHZhbHVlKVxuLy8gICAgICAgIHN1Ym1pdFx0YSBzdWJtaXQgYnV0dG9uXG4vLyAgICAgICAgYnV0dG9uXHRhIGJ1dHRvblxuLy8gICAgICAgIHJhZGlvc1x0cmFkaW8gYnV0dG9uc1xuLy8gICAgICAgIHJhZGlvcy1pbmxpbmVcdHJhZGlvIGJ1dHRvbnMgaW4gb25lIGxpbmVcbi8vICAgICAgICByYWRpb2J1dHRvbnNcdHJhZGlvIGJ1dHRvbnMgd2l0aCBib290c3RyYXAgYnV0dG9uc1xuLy8gICAgICAgIGhlbHBcdGluc2VydCBhcmJpdHJhcnkgaHRtbFxuLy8gICAgICAgIHRhYlx0dGFicyB3aXRoIGNvbnRlbnRcbi8vICAgICAgICBhcnJheVx0YSBsaXN0IHlvdSBjYW4gYWRkLCByZW1vdmUgYW5kIHJlb3JkZXJcbi8vICAgICAgICB0YWJhcnJheVx0YSB0YWJiZWQgdmVyc2lvbiBvZiBhcnJheVxuXG4gICAgICAgIHZhciBmb3JtX3R5cGUgPSB7XG4gICAgICAgICAgICAndGV4dCc6ICd0ZXh0JyxcbiAgICAgICAgICAgICdyYW5nZSc6ICd0ZXh0JyxcbiAgICAgICAgICAgICd0ZXh0YXJlYSc6ICd0ZXh0JyxcbiAgICAgICAgICAgICdudW1iZXInOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICdhcnJvd3MnOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICdzZWxlY3QnOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICdtdWx0aV9zZWxlY3QnOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICdyYWRpbyc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ3JhZGlvX2J1dHRvbic6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ2dlbmRlcic6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ2ltYWdlJzogJ2ZpbGVfdXBsb2FkJyxcbiAgICAgICAgICAgICdtZXNzYWdlJzogJ2hlbHAnLFxuICAgICAgICAgICAgJ2RhdGVfcGlja2VyJzogJ2RhdGVfcGlja2VyJyxcbiAgICAgICAgICAgICdkYXRlX3RpbWVfcGlja2VyJzogJ2RhdGVfdGltZV9waWNrZXInLFxuICAgICAgICAgICAgJ2dvb2dsZV9tYXAnOiAnZ29vZ2xlbWFwJyxcbiAgICAgICAgICAgICdmaWxlJzogJ3RleHQnXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNob3NlblR5cGVzID0gW1xuICAgICAgICAgICAgJ3JhbmdlJyxcbiAgICAgICAgICAgICdhcnJvd3MnLFxuICAgICAgICAgICAgJ3NlbGVjdCcsXG4gICAgICAgICAgICAnbXVsdGlfc2VsZWN0JyxcbiAgICAgICAgICAgICdyYWRpbycsXG4gICAgICAgICAgICAncmFkaW9fYnV0dG9uJyxcbiAgICAgICAgICAgICdnZW5kZXInXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIHRhYnMgPSBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXM7XG5cbiAgICAgICAgdmFyIGdldENob2ljZU1hcCA9IGZ1bmN0aW9uIChtYXBWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBfY2hvaWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgIF90aXRsZW1hcCA9IFtdO1xuXG4gICAgICAgICAgICAvLyBMb29wIGFuZCBidWlsZCBjaG9pY2VzIGFuZCB0aXRsZW1hcFxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcFZhbHVlcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihcImNvbnRyb2xsZWRcIikgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hvaWNlcy5wdXNoKHtcImlkXCI6IGtleSwgXCJuYW1lXCI6ICR0cmFuc2xhdGUuaW5zdGFudCh2YWx1ZVtrZXldKX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RpdGxlbWFwLnB1c2goe1widmFsdWVcIjoga2V5LCBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlW2tleV0pfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcImNob2ljZXNcIjogX2Nob2ljZXMsXG4gICAgICAgICAgICAgICAgXCJ0aXRsZW1hcFwiOiBfdGl0bGVtYXBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGFicykge1xuICAgICAgICAgICAgaWYgKHRhYnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbiBpbiB0YWJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XS5oYXNPd25Qcm9wZXJ0eShxdWVzdGlvbikgJiYgKHF1ZXN0aW9uID09ICdRdWVzdGlvbnMnIHx8IHF1ZXN0aW9uID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNfcXVlc3Rpb24gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbSBpbiB0YWJzW2tleV1bcXVlc3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XVtxdWVzdGlvbl0uaGFzT3duUHJvcGVydHkobSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aXRsZW1hcCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3NlbGVjdCcgfHwgcS5UeXBlID09ICdtdWx0aV9zZWxlY3QnIHx8IHEuVHlwZSA9PSAnYXJyb3dzJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkxIGluIHEuVmFsdWVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5WYWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5MSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlTWFwID0gZ2V0Q2hvaWNlTWFwKHEuVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzID0gY2hvaWNlTWFwLmNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwID0gY2hvaWNlTWFwLnRpdGxlbWFwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdnZW5kZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJNYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJNYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJGZW1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZlbWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiWWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdyYWRpb19idXR0b24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlllc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwibm9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJ1bmtub3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJVbmtub3duXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNob3NlblR5cGVzLmluZGV4T2YocS5UeXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXEuaGFzT3duUHJvcGVydHkoJ1BhcmVudEtleScpIHx8IChxLmhhc093blByb3BlcnR5KCdQYXJlbnRLZXknKSAmJiB0YWJzW2tleV1bcXVlc3Rpb25dLmhhc093blByb3BlcnR5KHFbJ1BhcmVudEtleSddKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnUGFyZW50S2V5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmtleSA9PSBxWydQYXJlbnRLZXknXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdWxsa2V5ID0gbTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbiA9PSAnUmVwZWF0aW5nUXVlc3Rpb25zJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsa2V5ID0ga2V5ICsgJ19fX18nICsgbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5oYXNPd25Qcm9wZXJ0eSgnY2hpbGRGaWVsZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzX3F1ZXN0aW9uW2luZGV4XVsnY2hpbGRGaWVsZCddW3FbJ1Nob3dJZiddW3FbJ1BhcmVudEtleSddXV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbltpbmRleF1bJ2NoaWxkRmllbGQnXVtxWydTaG93SWYnXVtxWydQYXJlbnRLZXknXV1dWydzZWxlY3QnXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uX25hbWUgPSBxWydTaG93SWYnXVtxWydQYXJlbnRLZXknXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNfcXVlc3Rpb25baW5kZXhdWydjaGlsZEZpZWxkJ10gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNfcXVlc3Rpb25baW5kZXhdWydjaGlsZEZpZWxkJ11bc2VsZWN0aW9uX25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCkgKyAnIC0gJyArICR0cmFuc2xhdGUuaW5zdGFudChxLkxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbGtleSc6IGZ1bGxrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAna2V5JzogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNfcXVlc3Rpb25baW5kZXhdWydjaGlsZEZpZWxkJ11bc2VsZWN0aW9uX25hbWVdWydzZWxlY3QnXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdWxsa2V5ID0gbTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24gPT0gJ1JlcGVhdGluZ1F1ZXN0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxrZXkgPSBrZXkgKyAnX19fXycgKyBtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHNjaGVtYV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JkZXInOiBxLk9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBmdWxsa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tleSc6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybXR5cGUnOiBmb3JtX3R5cGVbcS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSBcInJlcGVhdGVyXCIgJiYgcS5oYXNPd25Qcm9wZXJ0eSgnUmVwZWF0aW5nUXVlc3Rpb25zJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbjEgaW4gdGFic1trZXldW3F1ZXN0aW9uXVttXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldW3F1ZXN0aW9uXVttXS5oYXNPd25Qcm9wZXJ0eShxdWVzdGlvbjEpICYmIChxdWVzdGlvbjEgPT0gJ1F1ZXN0aW9ucycgfHwgcXVlc3Rpb24xID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gaW4gdGFic1trZXldW3F1ZXN0aW9uXVttXVtxdWVzdGlvbjFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bcXVlc3Rpb24xXS5oYXNPd25Qcm9wZXJ0eShuKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxMSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bcXVlc3Rpb24xXVtuXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ3NlbGVjdCcgfHwgcTEuVHlwZSA9PSAnbXVsdGlfc2VsZWN0JyB8fCBxMS5UeXBlID09ICdhcnJvd3MnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleTExIGluIHExLlZhbHVlcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkxMSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VNYXAgPSBnZXRDaG9pY2VNYXAocTEuVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzID0gY2hvaWNlTWFwLmNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwID0gY2hvaWNlTWFwLnRpdGxlbWFwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ2dlbmRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1hbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIkZlbWFsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVtYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiWWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3JhZGlvX2J1dHRvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInllc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWWVzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJub1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTm9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInVua25vd25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlVua25vd25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxMS5oYXNPd25Qcm9wZXJ0eSgnUGFyZW50S2V5JykgfHwgKHExLmhhc093blByb3BlcnR5KCdQYXJlbnRLZXknKSAmJiB0YWJzW2tleV1bcXVlc3Rpb25dW21dW3F1ZXN0aW9uMV0uaGFzT3duUHJvcGVydHkocTFbJ1BhcmVudEtleSddKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxMS5oYXNPd25Qcm9wZXJ0eSgnUGFyZW50S2V5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hvc2VuVHlwZXMuaW5kZXhPZihxMS5UeXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5rZXkgPT0gcVsnUGFyZW50S2V5J10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5oYXNPd25Qcm9wZXJ0eSgnY2hpbGRGaWVsZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzW2luZGV4XVsnY2hpbGRGaWVsZCddW3FbJ1Nob3dJZiddW3FbJ1BhcmVudEtleSddXV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHExLkxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogbSArICdfX19fJyArIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAna2V5JzogbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxMS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGVNYXAnOiB0aXRsZW1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzW2luZGV4XVsnY2hpbGRGaWVsZCddW3ExWydTaG93SWYnXVtxMVsnUGFyZW50S2V5J11dXVsnc2VsZWN0J10gPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCkgKyAnIC0gJyArICR0cmFuc2xhdGUuaW5zdGFudChxMS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBmdWxsa2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb25fbmFtZSA9IHExWydTaG93SWYnXVtxMVsnUGFyZW50S2V5J11dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzW2luZGV4XVsnY2hpbGRGaWVsZCddID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzW2luZGV4XVsnY2hpbGRGaWVsZCddW3NlbGVjdGlvbl9uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocTEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBtICsgJ19fX18nICsgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHExLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNbaW5kZXhdWydjaGlsZEZpZWxkJ11bc2VsZWN0aW9uX25hbWVdWydzZWxlY3QnXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHExLkxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbGtleSc6IGZ1bGxrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaG9zZW5UeXBlcy5pbmRleE9mKHExLlR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocTEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBzY2hlbWFfdHlwZVtxMS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHExLk9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBtICsgJ19fX18nICsgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm10eXBlJzogZm9ybV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHExLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlbWEucHJvcGVydGllcyA9ICRzY29wZS5zY2hlbWEucHJvcGVydGllcy5jb25jYXQodGVtcF9zY2hlbWFfcHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXNfYWx0ZXIgPSAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXNfYWx0ZXIuY29uY2F0KHRlbXBfc2NoZW1hX3Byb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzID0gJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzLmNvbmNhdCh0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzX3F1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlbWEucHJvcGVydGllc19hbHRlciA9ICRzY29wZS5zY2hlbWEucHJvcGVydGllc19hbHRlci5jb25jYXQodGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUub25TdWJtaXQgPSBmdW5jdGlvbiAoZm9ybSkge1xuICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm9uRG93bmxvYWQgPSBmdW5jdGlvbiAoZm9ybSkge1xuICAgICAgICAgICAgJHNjb3BlLm9uUHJvY2Vzcygkc2NvcGUuY2hhcnRfdHlwZSk7XG5cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJHNjb3BlLmZpbmFsbW9kZWxbMF0uZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyh7fSwgJHNjb3BlLmZpbmFsbW9kZWxbMF0uZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBncm93bC5lcnJvcihcIkF0bGVhc3Qgb25lIGZpbHRlciBtdXN0IGJlIHNlbGVjdGVkIHRvIHByb2NlZWRcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmZldGNoQ2hhcnRDU1YoJHNjb3BlLmZpbmFsbW9kZWwsICRzY29wZS5jaGFydF90eXBlLCByZXNvcnRfaWQsICdjc3YnKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9nLmxvZyhkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IGFuZ3VsYXIuZWxlbWVudCgnPGEvPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICdkYXRhOmF0dGFjaG1lbnQvY3N2O2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSShkYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiAnY2hhcnQuY3N2J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlbMF0uY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmNoYXJ0X3R5cGUgPSAndGltZWxpbmUnO1xuXG4gICAgICAgICRzY29wZS5tb2RlbCA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb21wYXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZWZyb206IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UuZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgIGRhdGV0bzogRGF0ZVJhbmdlU2VydmljZS5yYW5nZS5kYXRlVG9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbXBhcmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZWZyb206IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UuZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgIGRhdGV0bzogRGF0ZVJhbmdlU2VydmljZS5yYW5nZS5kYXRlVG9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgJHNjb3BlLmZpbmFsbW9kZWwgPSBudWxsO1xuXG4gICAgICAgICRzY29wZS5hZGRGaWVsZCA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2goe30pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5yZW1vdmVGaWVsZCA9IGZ1bmN0aW9uIChmaWx0ZXJzLCBpbmRleCkge1xuICAgICAgICAgICAgZmlsdGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgJHNjb3BlLm9uUmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUubW9kZWwgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlZnJvbTogRGF0ZVJhbmdlU2VydmljZS5yYW5nZS5kYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0bzogRGF0ZVJhbmdlU2VydmljZS5yYW5nZS5kYXRlVG9cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb21wYXJlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZWZyb206IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UuZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRldG86IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UuZGF0ZVRvXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgJHNjb3BlLm9uUHJvY2VzcyA9IGZ1bmN0aW9uIChjaGFydF90eXBlKSB7XG4gICAgICAgICAgICAkc2NvcGUuZmluYWxtb2RlbCA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgZGlmZkRheXMgPSAwO1xuXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLm1vZGVsLCBmdW5jdGlvbiAobW9kZWxfZmlsdGVyLCBrZXkpIHtcblxuICAgICAgICAgICAgICAgIGlmIChtb2RlbF9maWx0ZXIuY29tcGFyZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG1vbWVudChtb2RlbF9maWx0ZXIuZGF0ZS5kYXRlZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gbW9tZW50KG1vZGVsX2ZpbHRlci5kYXRlLmRhdGV0byk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmRGF5cyA9IGIuZGlmZihhLCAnZGF5cycpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IGFuZ3VsYXIuY29weShhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuYWRkKGRpZmZEYXlzLCAnZGF5cycpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0X3RpbWUgPSB0b1VUQyhhLmZvcm1hdCgnWVlZWS1NTS1ERCAwMDowMDowMCcpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZF90aW1lID0gdG9VVEMoYi5mb3JtYXQoJ1lZWVktTU0tREQgMjM6NTk6NTknKSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRlZnJvbSc6IHN0YXJ0X3RpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGF0ZXRvJzogZW5kX3RpbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVycyA9IHt9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGVsX2ZpbHRlci5kYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICBpZihjaGFydF90eXBlICE9ICdwaWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobW9kZWxfZmlsdGVyLmRhdGEsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLmZpZWxkICYmIHZhbHVlLmZpZWxkLmZ1bGxrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyc1t2YWx1ZS5maWVsZC5mdWxsa2V5XSA9IGZpbHRlcnNbdmFsdWUuZmllbGQuZnVsbGtleV0gfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuZmllbGQuZnVsbGtleV0ucHVzaCh2YWx1ZS52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdjaGlsZEZpZWxkJykgJiYgdmFsdWUuY2hpbGRGaWVsZC52YWx1ZSAmJiAodmFsdWUuY2hpbGRGaWVsZC52YWx1ZSAhPSAnYWxsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuY2hpbGRGaWVsZC5maWVsZC5mdWxsa2V5XSA9IGZpbHRlcnNbdmFsdWUuY2hpbGRGaWVsZC5maWVsZC5mdWxsa2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuY2hpbGRGaWVsZC5maWVsZC5mdWxsa2V5XS5wdXNoKHZhbHVlLmNoaWxkRmllbGQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtb2RlbF9maWx0ZXIuZGF0YSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuZmllbGQgJiYgdmFsdWUuZmllbGQuZnVsbGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZS5maWVsZC5oYXNPd25Qcm9wZXJ0eSgnY2hpbGRGaWVsZCcpICYmIHZhbHVlLnZhbHVlICYmIHZhbHVlLmZpZWxkLmNoaWxkRmllbGQuaGFzT3duUHJvcGVydHkodmFsdWUudmFsdWUpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuZmllbGQuY2hpbGRGaWVsZFt2YWx1ZS52YWx1ZV0uZnVsbGtleV0gPSBmaWx0ZXJzW3ZhbHVlLmZpZWxkLmNoaWxkRmllbGRbdmFsdWUudmFsdWVdLmZ1bGxrZXldIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyc1t2YWx1ZS5maWVsZC5jaGlsZEZpZWxkW3ZhbHVlLnZhbHVlXS5mdWxsa2V5XS5wdXNoKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzW3ZhbHVlLmZpZWxkLmZ1bGxrZXldID0gZmlsdGVyc1t2YWx1ZS5maWVsZC5mdWxsa2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuZmllbGQuZnVsbGtleV0ucHVzaChcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogJHNjb3BlLnNjYWxlLmtleVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFydF90eXBlID09ICdwaWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZpbmFsbW9kZWwubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maW5hbG1vZGVsLnB1c2gobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbmFsbW9kZWwucHVzaChtb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbW9kZWwnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9uUHJvY2Vzcygkc2NvcGUuY2hhcnRfdHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuY3NzID0gXCJoZWlnaHQ6NDAwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtcIjtcblxuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgcmFuZ2U6IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UsXG4gICAgICAgICAgICBpbmNpZGVudHM6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDIwLFxuICAgICAgICAgICAgZmlsdGVyZWRJdGVtczogMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDAsXG4gICAgICAgICAgICB0b3RhbFBhZ2VzOiAwLFxuICAgICAgICAgICAgcHJlZGljYXRlOiAnZHRfY3JlYXRlZCcsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBlcnJvcjogJycsXG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdmZXRjaGluZyBpbmNpZGVudHMuLi4nKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5vblByb2Nlc3MoJHNjb3BlLmNoYXJ0X3R5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygkc2NvcGUuZmluYWxtb2RlbFswXS5kYXRhKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyh7fSwgJHNjb3BlLmZpbmFsbW9kZWxbMF0uZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoXCJBdGxlYXN0IG9uZSBmaWx0ZXIgbXVzdCBiZSBzZWxlY3RlZCB0byBwcm9jZWVkXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmZldGNoQ2hhcnQoJHNjb3BlLmZpbmFsbW9kZWwsICRzY29wZS5jaGFydF90eXBlLCByZXNvcnRfaWQpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jaGFydF90eXBlID09ICd0aW1lbGluZScgfHwgJHNjb3BlLmNoYXJ0X3R5cGUgPT0gJ2JhcicpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1ucyA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucyA9IGRhdGFbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm93cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImRhdGVcIiwgbGFiZWw6ICRzY29wZS5zY2FsZS52YWx1ZSwgdHlwZTogXCJzdHJpbmdcIiwgJ3JvbGUnOiAnZG9tYWluJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbHVtbnM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29scy5wdXNoKHtpZDogXCJjb3VudFwiLCBsYWJlbDogXCJDb3VudFwiLCB0eXBlOiBcIm51bWJlclwifSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9vbHRpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29scy5wdXNoKHt0eXBlOiBcInN0cmluZ1wiLCAncm9sZSc6ICd0b29sdGlwJywgJ3AnOiB7J2h0bWwnOiB0cnVlfX0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sdW1ucy5wdXNoKCRzY29wZS5zY2FsZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sdW1ucy5wdXNoKCdJbmNpZGVudCBDb3VudCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sdW1ucy5wdXNoKCdEZXZpYXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNjYWxlLmtleSA9PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnB1c2goe3Y6IG1vbWVudChpdGVtWzBdLmNvbHVtbmRldGFpbCwgJ1lZWVktTU0tREQnKS5mb3JtYXQoZGF0ZV9mb3JtYXQpfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnB1c2goe3Y6IGl0ZW1bMF0uY29sdW1uZGV0YWlsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKCRzY29wZS5zY2FsZS5rZXkgPT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBjLnB1c2goe3Y6IGl0ZW1bMF0uY29sdW1uZGV0YWlsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBjLnB1c2goe3Y6IGl0ZW1bMF0uY29sdW1uZGV0YWlsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL31cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2x0aXAgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2x1bW5zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnB1c2goe3Y6IGl0ZW1baV0uY291bnR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwID0gJzxwIHN0eWxlPVwid2lkdGg6MTAwcHg7cGFkZGluZzo1cHg7XCI+PHN0cm9uZz4gJyArIGl0ZW1baV0uY29sdW1uZGV0YWlsICsgJzwvc3Ryb25nPjxici8+PHN0cm9uZz4gQ291bnQ6PC9zdHJvbmc+ICcgKyBpdGVtW2ldLmNvdW50ICsgJzwvcD4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9vbHRpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMucHVzaCh7djogdG9vbHRpcH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zY2FsZS5rZXkgPT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKG1vbWVudChpdGVtW2ldLmNvbHVtbmRldGFpbCwgJ1lZWVktTU0tREQnKS5mb3JtYXQoZGF0ZV9mb3JtYXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKGl0ZW1baV0uY29sdW1uZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cucHVzaChpdGVtW2ldLmNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LnB1c2goKChyb3dbM10gLSByb3dbMV0pICogMTAwIC8gKHJvd1szXSA9PSAwID8gMSA6IHJvd1szXSkpLnRvRml4ZWQoMCkgKyAnJScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm93cy5wdXNoKHJvdyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcnRfbWFwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWVsaW5lJzogJ0xpbmVDaGFydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFyJzogJ0NvbHVtbkNoYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwaWUnOiAnUGllQ2hhcnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYXJ0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY2hhcnRfbWFwWyRzY29wZS5jaGFydF90eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbHNcIjogY29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJvd3NcIjogcm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuLy8gICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIixcbi8vICAgICAgICAgICAgICBcImZpbGxcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllSG9sZTogMC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheUV4YWN0VmFsdWVzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2QXhpc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIiwgXCJncmlkbGluZXNcIjoge1wiY291bnRcIjogNn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzVGFyZ2V0OiAnY2F0ZWdvcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtpc0h0bWw6IHRydWV9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaEF4aXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6ICRzY29wZS5zY2FsZS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvcnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzM1YmZiZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjZmQ0MjNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNmZmI2NDgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzk0OWZiMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjNGM1MjYxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcnM6IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQSUUgY2hhcnRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29sdW1ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbFswXS5kYXRhWzBdLmZpZWxkLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJvd3MgPSBkYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdHJhbnNsYXRlLmluc3RhbnQoaXRlbS5uYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvdW50XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6ICR0cmFuc2xhdGUuaW5zdGFudChpdGVtLm5hbWUpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGl0ZW0uY291bnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRzY29wZS5tb2RlbFswXS5kYXRhWzBdLmZpZWxkLnRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyb3dzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBpZUNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcIm5hbWVcIiwgbGFiZWw6ICRzY29wZS5tb2RlbFswXS5kYXRhWzBdLmZpZWxkLnRpdGxlLCB0eXBlOiBcInN0cmluZ1wifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImNvdW50XCIsIGxhYmVsOiBcIkNvdW50XCIsIHR5cGU6IFwibnVtYmVyXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwgXCJyb3dzXCI6IHJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbi8vICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWVIb2xlOiAwLjUsXG4vLyAgICAgICAgICAgICAgICBcImZpbGxcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5RXhhY3RWYWx1ZXNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvdW50IG9mIEluY2lkZW50c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImhBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiAkc2NvcGUubW9kZWxbMF0uZGF0YVswXS5maWVsZC50aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvcnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZkNDIzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjMzViZmJmJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNmZmI2NDgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzk0OWZiMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjNGM1MjYxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcnM6IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pbmNpZGVudHMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgPSAoJHNjb3BlLmxpc3QuaW5jaWRlbnRzID09IG51bGwpID8gMCA6ICRzY29wZS5saXN0LmluY2lkZW50cy5sZW5ndGg7IC8vSW5pdGlhbGx5IGZvciBubyBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IDE7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNvcnRfYnkoJ2R0X2NyZWF0ZWQnKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucmV2ZXJzZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUub25fZXJyb3IocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pbmNpZGVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZXJyb3IgPSByZWFzb24uZXJyb3JzLkVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHByaW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICAkbG9nLmxvZygncHJpbnRpbmcgaW5jaWRlbnQgJyArIGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChpZCAhPT0gbnVsbCB8fCBpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5wcmludChpZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhLmRhdGEuVVJMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd2luZG93Lm9wZW4oZGF0YS5kYXRhLlVSTCwgJ19ibGFuaycsICcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuLy8gICAgICAgICRzY29wZS4kd2F0Y2goXG4vLyAgICAgICAgICAgICdsaXN0Lml0ZW1zUGVyUGFnZScsXG4vLyAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbi8vICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICApO1xuLy9cbi8vICAgICAgICAkc2NvcGUuJHdhdGNoKFxuLy8gICAgICAgICAgICAnbGlzdC5jdXJyZW50UGFnZScsXG4vLyAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbi8vICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICApO1xuXG4gICAgICAgIC8vJHNjb3BlLnJlcG9ydCA9IHtcbiAgICAgICAgLy8gICAgXCJjb25maWdcIjoge1xuICAgICAgICAvLyAgICAgICAgXCJ1cmxcIjoge1xuICAgICAgICAvLyAgICAgICAgICAgIFwiZGF0ZXJhbmdlXCI6IFwiLTdkXCIsXG4gICAgICAgIC8vICAgICAgICAgICAgXCJncm91cF9ieVwiOiBcImZpZWxkXzUyY2E0MzA0NjJiOWFcIixcbiAgICAgICAgLy8gICAgICAgICAgICBcImdyb3VwX2J5XzJcIjogXCJmaWVsZF81NGIwODRmYjJkMjU1XCIsXG4gICAgICAgIC8vICAgICAgICAgICAgXCJjb21wYXJlX3dpdGhcIjogXCJmaWVsZF81MmNhM2ZjYzU5ZDI5XCIsXG4gICAgICAgIC8vICAgICAgICAgICAgXCJkYXRlY29tcGFyZWZyb21cIjogXCIyMDE1LTA0LTIxIDA3OjM4OjE1XCIsXG4gICAgICAgIC8vICAgICAgICAgICAgXCJkYXRlY29tcGFyZXRvXCI6IFwiMjAxNS0wNC0yMiAwNzozODoxNVwiLFxuICAgICAgICAvLyAgICAgICAgICAgIFwiZGF0ZWNvbXBhcmVyYW5nZVwiOiBcIi03ZFwiLFxuICAgICAgICAvLyAgICAgICAgICAgIFwiZGlzcGxheVwiOiBcImZpZWxkXzUyZDQ3YTY1NGQxZmNcIixcbiAgICAgICAgLy8gICAgICAgICAgICBcImNvbXBhcmVfdG9cIjogXCJmaWVsZF81MmNhM2ZjYzU5ZDI5XCIsXG4gICAgICAgIC8vICAgICAgICAgICAgXCJzaG93X2NvdW50XCI6IDVcbiAgICAgICAgLy8gICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICBcImJvZHlcIjoge1xuICAgICAgICAvLyAgICAgICAgICAgIFwibmFtZVwiOiBbXCJLcmlzaFwiLCBcIlNoYXVuXCJdLFxuICAgICAgICAvLyAgICAgICAgICAgIFwib2NjdXBhdGlvblwiOiBbXCJTb2Z0d2FyZSBEZXZlbG9wZXJcIiwgXCJQYWludGVyXCJdLFxuICAgICAgICAvLyAgICAgICAgICAgIFwibm90ZXNfX19fZmllbGRfNTJjYTQ0OGRnOTRqYTNcIjogW1wibmV3IG5vdGVcIl0sXG4gICAgICAgIC8vICAgICAgICAgICAgXCJmaWVsZF81MmNhNDU2OTYyYmE4X19fX2xhdFwiOiBbXCItMzcuNzE4MjQ0XCIsIFwiNDAuMDAwMFwiXSxcbiAgICAgICAgLy8gICAgICAgICAgICBcImZpZWxkXzUyY2E0NTY5NjJiYThfX19fbG9uZ1wiOiBbXCIxNDQuOTYxOTE3OTk5OTk5OTdcIl0sXG4gICAgICAgIC8vICAgICAgICAgICAgXCJmaWVsZF81MmNhNDQ1ZDYyYmE2XCI6IFtcIkdvb2RcIl0sXG4gICAgICAgIC8vICAgICAgICAgICAgXCJmaWVsZF81MmRkOGMwNDliMDA1XCI6IFs1MF0sXG4gICAgICAgIC8vICAgICAgICAgICAgXCJmaWVsZF81MmNhNDQ1ZDYyYmExXCI6IFtcIjIzXCJdLFxuICAgICAgICAvLyAgICAgICAgICAgIFwiZmllbGRfNTJkNDc5OGY2ZDIyN19fX19wcmVleGlzdGluZ19pbmp1cnlcIjogW1wiODE3XCIsIFwiODIwXCJdXG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy99O1xuXG4gICAgICAgICRzY29wZS5yZXBvcnQgPSB7XG4gICAgICAgICAgICBsYWJlbDogXCJcIixcbiAgICAgICAgICAgIGdsb2JhbDogMCxcbiAgICAgICAgICAgIHR5cGU6ICd0aW1lbGluZScsXG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICB1cmw6IHt9LFxuICAgICAgICAgICAgICAgIGJvZHk6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmdldFJlcG9ydCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgUmVwb3J0U2VydmljZS5mZXRjaChpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImNoYXJ0X2ZldGNoZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoYXJ0X3R5cGUgPSAkc2NvcGUucmVwb3J0LnR5cGU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydC5nbG9iYWwgPSAkc2NvcGUucmVwb3J0Lmdsb2JhbCA+IDA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucmFuZ2UuZGF0ZUZyb20gPSB0b0xvY2FsVGltZSgkc2NvcGUucmVwb3J0LmNvbmZpZy51cmwuZGF0ZWZyb20pO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJhbmdlLmRhdGVUbyA9IHRvTG9jYWxUaW1lKCRzY29wZS5yZXBvcnQuY29uZmlnLnVybC5kYXRldG8pO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1vZGVsID0gJHNjb3BlLnJlcG9ydC5jb25maWcuYm9keTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY3JlYXRlUmVwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0X3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QucmFuZ2UuZGF0ZUZyb20pLmZvcm1hdCgnWVlZWS1NTS1ERCAwMDowMDowMCcpKTtcbiAgICAgICAgICAgIHZhciBlbmRfdGltZSA9IHRvVVRDKG1vbWVudCgkc2NvcGUubGlzdC5yYW5nZS5kYXRlVG8pLmZvcm1hdCgnWVlZWS1NTS1ERCAyMzo1OTo1OScpKTtcblxuICAgICAgICAgICAgdmFyIHJlcG9ydCA9IGFuZ3VsYXIuY29weSgkc2NvcGUucmVwb3J0KTtcbiAgICAgICAgICAgIHJlcG9ydC5nbG9iYWwgPSAkc2NvcGUucmVwb3J0Lmdsb2JhbCA/IDEgOiAwO1xuICAgICAgICAgICAgcmVwb3J0LnR5cGUgPSAkc2NvcGUuY2hhcnRfdHlwZTtcbiAgICAgICAgICAgIHJlcG9ydC5jb25maWcgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGF0ZWZyb21cIjogc3RhcnRfdGltZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRldG9cIjogZW5kX3RpbWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5tb2RlbFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCRzY29wZS5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgUmVwb3J0U2VydmljZS51cGRhdGUoJHNjb3BlLmlkLCByZXBvcnQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJjaGFydF91cGRhdGVkX3N1Y2Nlc3NmdWxseVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlcG9ydHMtdXBkYXRlZCcpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFJlcG9ydFNlcnZpY2UuY3JlYXRlKHJlcG9ydCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImNoYXJ0X2NyZWF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgncmVwb3J0cy11cGRhdGVkJyk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoJHNjb3BlLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICRzY29wZS5nZXRSZXBvcnQoJHNjb3BlLmlkKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignRGFzaGJvYXJkQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRzdGF0ZSwgJHRpbWVvdXQsICRsb2csICRpbnRlcmNvbSwgQW5hbHl0aWNzU2VydmljZSwgUXVlc3Rpb25TZXJ2aWNlLCBncm93bCwgRGF0ZVJhbmdlU2VydmljZSwgY3VycmVudFVzZXIsICR0cmFuc2xhdGUpIHtcblxuICAgICAgICBmdW5jdGlvbiBjaGVja05lc3RlZChvYmogLyosIGxldmVsMSwgbGV2ZWwyLCAuLi4gbGV2ZWxOKi8pIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvYmogfHwgIW9iai5oYXNPd25Qcm9wZXJ0eShhcmdzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iaiA9IG9ialthcmdzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhcnJheVRvT2JqKGFycmF5KSB7XG4gICAgICAgICAgICB2YXIgbWFwID0ge307XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gJC5tYXAoYXJyYXksIGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcFtrZXldID0gdmFsW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXBbXCJcIl0gPSAkdHJhbnNsYXRlLmluc3RhbnQoXCJVbmtub3duXCIpO1xuICAgICAgICAgICAgbWFwW1wiVW5rbm93blwiXSA9ICR0cmFuc2xhdGUuaW5zdGFudChcIlVua25vd25cIik7XG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9XG5cbiAgICAgICAgJGludGVyY29tLnVwZGF0ZSh7XG4gICAgICAgICAgICBlbWFpbDogY3VycmVudFVzZXIuZW1haWwsXG4gICAgICAgICAgICBuYW1lOiBjdXJyZW50VXNlci5uYW1lLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHVzZXJfaWQ6IGN1cnJlbnRVc2VyLnVzZXJfaWQsXG4gICAgICAgICAgICBjb21wYW55OiB7XG4gICAgICAgICAgICAgICAgaWQ6IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X25hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb2xlOiBjdXJyZW50VXNlci5yb2xlX2lkWzBdLmtleSxcbiAgICAgICAgICAgIGRhc2hib2FyZF9mZWF0dXJlX2xhc3RfdXNlZDogXCJEYXNoYm9hcmRcIlxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGF0ZV9mb3JtYXRfbWFwcGluZyA9IHtcbiAgICAgICAgICAgIFwiTU0vREQvWVlZWVwiOiBcIk1NL2RkL3l5eXlcIixcbiAgICAgICAgICAgIFwiREQvTU0vWVlZWVwiOiBcImRkL01NL3l5eXlcIlxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5kYXRldGltZV9mb3JtYXQgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdLmRhdGV0aW1lX2Zvcm1hdC5rZXk7XG4gICAgICAgIHZhciBkYXRlX2Zvcm1hdCA9ICRzY29wZS5kYXRldGltZV9mb3JtYXQuc2xpY2UoMCwxMCk7XG4gICAgICAgICRzY29wZS5kYXRlX2Zvcm1hdCA9IGRhdGVfZm9ybWF0X21hcHBpbmdbZGF0ZV9mb3JtYXRdO1xuXG4gICAgICAgIHZhciByZXNvcnRfaWQgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9pZDtcblxuICAgICAgICB2YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4gICAgICAgIHZhciB0aW1lciA9IG51bGw7XG5cbiAgICAgICAgJHNjb3BlLmxpc3QgPSBEYXRlUmFuZ2VTZXJ2aWNlLnJhbmdlO1xuXG4gICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBncm93bC5pbmZvKCdTWU5DSU5HX0RBVEEnKTtcblxuICAgICAgICAgICAgUXVlc3Rpb25TZXJ2aWNlLmZldGNoKCkudGhlbihmdW5jdGlvbiAocXVlc3Rpb25zKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRfdGltZSA9IG1vbWVudCgkc2NvcGUubGlzdC5kYXRlRnJvbSkuZm9ybWF0KCdZWVlZLU1NLUREIGhoOm1tOnNzJyk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZF90aW1lID0gbW9tZW50KCRzY29wZS5saXN0LmRhdGVUbykuZm9ybWF0KCdZWVlZLU1NLUREIGhoOm1tOnNzJyk7XG5cbiAgICAgICAgICAgICAgICBBbmFseXRpY3NTZXJ2aWNlLmZldGNoU2V4KHN0YXJ0X3RpbWUsIGVuZF90aW1lLCByZXNvcnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dzID0gcmVzdWx0LmRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IG1vbnRoc1tpdGVtLm1vbnRoIC0gMV0gKyAnLCAnICsgaXRlbS55ZWFyfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGl0ZW0ubWFsZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBpdGVtLmZlbWFsZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBpdGVtLnVua25vd259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYnlfaW5jaWRlbnRzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJMaW5lQ2hhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aWQ6IFwibW9udGhcIiwgbGFiZWw6IFwiTW9udGhcIiwgdHlwZTogXCJzdHJpbmdcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJpbmNpZGVudHMtbnVtLTFcIiwgbGFiZWw6IFwiTWFsZVwiLCB0eXBlOiBcIm51bWJlclwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImluY2lkZW50cy1udW0tMlwiLCBsYWJlbDogXCJGZW1hbGVcIiwgdHlwZTogXCJudW1iZXJcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJpbmNpZGVudHMtbnVtLTNcIiwgbGFiZWw6IFwiVW5rbm93blwiLCB0eXBlOiBcIm51bWJlclwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIFwicm93c1wiOiByb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4vLyAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiSW5jaWRlbnRzXCIsXG4vLyAgICAgICAgICAgICAgICBcImZpbGxcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5RXhhY3RWYWx1ZXNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkluY2lkZW50c1wiLCBcImdyaWRsaW5lc1wiOiB7XCJjb3VudFwiOiA2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgICAgICAgICBcImhBeGlzXCI6IHtcbi8vICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiRGF0ZVwiXG4vLyAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyMzNWJmYmYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZmYjU0NycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjNGM1MjYxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcnM6IHt9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBBbmFseXRpY3NTZXJ2aWNlLmZldGNoQWN0aXZpdHkoc3RhcnRfdGltZSwgZW5kX3RpbWUsIHJlc29ydF9pZCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrTmVzdGVkKHF1ZXN0aW9ucywgJ0Rhc2hib2FyZEl0ZW1zJywgJ2ZpZWxkXzUyY2E0MTc5MGExNmMnLCAnUXVlc3Rpb25zJywgJ2ZpZWxkXzUyY2EzZGM4YWM0MzcnLCAnVmFsdWVzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXAgPSBhcnJheVRvT2JqKHF1ZXN0aW9ucy5EYXNoYm9hcmRJdGVtcy5maWVsZF81MmNhNDE3OTBhMTZjLlF1ZXN0aW9ucy5maWVsZF81MmNhM2RjOGFjNDM3LlZhbHVlcyk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3MgPSByZXN1bHQuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJHRyYW5zbGF0ZS5pbnN0YW50KG1hcFtpdGVtLmFjdGl2aXR5XSl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IHBhcnNlRmxvYXQoaXRlbS5wZXJjZW50KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYnlfYWN0aXZpdGllcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBpZUNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwiaGVpZ2h0OjQ1MHB4OyB3aWR0aDozMDBweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJhY3Rpdml0eVwiLCBsYWJlbDogXCJBY3Rpdml0eVwiLCB0eXBlOiBcInN0cmluZ1wifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJudW1cIiwgbGFiZWw6IFwiRXZlbnRzXCIsIHR5cGU6IFwibnVtYmVyXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicm93c1wiOiByb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbi8vICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllSG9sZTogMC41LFxuLy8gICAgICAgICAgICAgICAgXCJmaWxsXCI6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlFeGFjdFZhbHVlc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJOby4gb2YgSW5jaWRlbnRzXCIsIFwiZ3JpZGxpbmVzXCI6IHtcImNvdW50XCI6IDZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaEF4aXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkRhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZkNDIzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzM1YmZiZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZmYjY0OCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzk0OWZiMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzRjNTI2MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXJzOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgQW5hbHl0aWNzU2VydmljZS5mZXRjaFBhdHJvbGxlcnMoc3RhcnRfdGltZSwgZW5kX3RpbWUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGF0cm9sbGVycyA9IHJlc3VsdC5kYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgQW5hbHl0aWNzU2VydmljZS5mZXRjaEluanVyeShzdGFydF90aW1lLCBlbmRfdGltZSwgcmVzb3J0X2lkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tOZXN0ZWQocXVlc3Rpb25zLCAnRGFzaGJvYXJkSXRlbXMnLCAnZmllbGRfNTJkNDc5OGY2ZDIyOScsICdRdWVzdGlvbnMnLCAnZmllbGRfNTJkNDc5OGY2ZDIyNycsICdSZXBlYXRpbmdRdWVzdGlvbnMnLCAnaW5qdXJ5X3R5cGUnLCAnVmFsdWVzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXAgPSBhcnJheVRvT2JqKHF1ZXN0aW9ucy5EYXNoYm9hcmRJdGVtcy5maWVsZF81MmQ0Nzk4ZjZkMjI5LlF1ZXN0aW9ucy5maWVsZF81MmQ0Nzk4ZjZkMjI3LlJlcGVhdGluZ1F1ZXN0aW9ucy5pbmp1cnlfdHlwZS5WYWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHJlc3VsdC5kYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiAkdHJhbnNsYXRlLmluc3RhbnQobWFwWyhpdGVtLmluanVyeSkucmVwbGFjZSgvXCIvZywgJycpXSkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBpdGVtLm51bX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYnlfaW5qdXJ5X3R5cGVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQ29sdW1uQ2hhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NTdHlsZTogXCJoZWlnaHQ6NDUwcHg7IHdpZHRoOjMwMHB4O2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImluanVyeVwiLCBsYWJlbDogXCJJbmp1cnlcIiwgdHlwZTogXCJzdHJpbmdcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aWQ6IFwibnVtXCIsIGxhYmVsOiBcIkluanVyeVwiLCB0eXBlOiBcIm51bWJlclwifVxuLy8gICAgICAgICAgICAgICAgICAgICAgICB7cm9sZTogXCJzdHlsZVwiLCB0eXBlOiBcInN0cmluZ1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLCBcInJvd3NcIjogcm93c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4vLyAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiSW5jaWRlbnRzXCIsXG4vLyAgICAgICAgICAgICAgICBcImZpbGxcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheUV4YWN0VmFsdWVzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidkF4aXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvdW50XCIsIFwiZ3JpZGxpbmVzXCI6IHtcImNvdW50XCI6IDZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4vLyAgICAgICAgICAgICAgICBcImhBeGlzXCI6IHtcbi8vICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiRGF0ZVwiXG4vLyAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZkNDIzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzM1YmZiZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZmYjY0OCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzk0OWZiMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzRjNTI2MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXJzOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgQW5hbHl0aWNzU2VydmljZS5mZXRjaFJlZmVycmVkKHN0YXJ0X3RpbWUsIGVuZF90aW1lLCByZXNvcnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja05lc3RlZChxdWVzdGlvbnMsICdEYXNoYm9hcmRJdGVtcycsICdmaWVsZF81MmNhNDI2YzBhMTc4JywgJ1F1ZXN0aW9ucycsICdmaWVsZF81MmQ0ODA3N2ExNmJlJywgJ1ZhbHVlcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFwID0gYXJyYXlUb09iaihxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXMuZmllbGRfNTJjYTQyNmMwYTE3OC5RdWVzdGlvbnMuZmllbGRfNTJkNDgwNzdhMTZiZS5WYWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHJlc3VsdC5kYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiAkdHJhbnNsYXRlLmluc3RhbnQobWFwW2l0ZW0ucmVmZXJyZWRfdG9dKX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogcGFyc2VGbG9hdChpdGVtLnBlcmNlbnQpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ieV9yZWZlcnJlZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBpZUNoYXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwiaGVpZ2h0OjQwMHB4OyB3aWR0aDozMDBweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJtb250aFwiLCBsYWJlbDogXCJNb250aFwiLCB0eXBlOiBcInN0cmluZ1wifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJpbmNpZGVudHMtbnVtLTFcIiwgbGFiZWw6IFwiUGFydHkxXCIsIHR5cGU6IFwibnVtYmVyXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIFwicm93c1wiOiByb3dzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbi8vICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllSG9sZTogMC41LFxuLy8gICAgICAgICAgICAgICAgXCJmaWxsXCI6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlFeGFjdFZhbHVlc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJOby4gb2YgSW5jaWRlbnRzXCIsIFwiZ3JpZGxpbmVzXCI6IHtcImNvdW50XCI6IDZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaEF4aXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkRhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZkNDIzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzM1YmZiZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZmYjY0OCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzk0OWZiMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzRjNTI2MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXJzOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgQW5hbHl0aWNzU2VydmljZS5mZXRjaEFnZShzdGFydF90aW1lLCBlbmRfdGltZSwgcmVzb3J0X2lkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJ5X2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiQ29sdW1uQ2hhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1N0eWxlOiBcImhlaWdodDo0MDBweDsgd2lkdGg6MzAwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aWQ6IFwibW9udGhcIiwgbGFiZWw6IFwiTW9udGhcIiwgdHlwZTogXCJzdHJpbmdcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJpbmNpZGVudHMtbnVtLTFcIiwgbGFiZWw6IFwiQWdlXCIsIHR5cGU6IFwibnVtYmVyXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cm9sZTogXCJzdHlsZVwiLCB0eXBlOiBcInN0cmluZ1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sIFwicm93c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogXCIwLTEwXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBkYXRhLmcwXzEwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJyNmZDQyM2UnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IFwiMTEtMTVcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGRhdGEuZzExXzE1fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJyMzNWJmYmYnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IFwiMTYtMThcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGRhdGEuZzE2XzE4fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJyNmZmI2NDgnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IFwiMTktMjFcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGRhdGEuZzE5XzIxfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJyM5NDlmYjMnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IFwiMjItMzBcIn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGRhdGEuZzIyXzMwfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJyM0YzUyNjEnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IFwiMzEtXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBkYXRhLmczMV99LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiAnIzAwMDAwMCd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4vLyAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiSW5jaWRlbnRzXCIsXG4vLyAgICAgICAgICAgICAgICBcImZpbGxcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5RXhhY3RWYWx1ZXNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvdW50XCIsIFwiZ3JpZGxpbmVzXCI6IHtcImNvdW50XCI6IDZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICAgICAgIFwiaEF4aXNcIjoge1xuLy8gICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJEYXRlXCJcbi8vICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2xvcnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZkNDIzZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjMzViZmJmJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyNmZmI2NDgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIzk0OWZiMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjNGM1MjYxJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyMwMDAwMDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyczoge31cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIEFuYWx5dGljc1NlcnZpY2UuZmV0Y2hBbGNvaG9sKHN0YXJ0X3RpbWUsIGVuZF90aW1lLCByZXNvcnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHJlc3VsdC5kYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBtb250aHNbaXRlbS5tb250aF0gKyAnLCAnICsgaXRlbS55ZWFyfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGl0ZW0uYWxjb2hvbH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt2OiBpdGVtLmRydWdzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmJ5X2RydWdzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJDb2x1bW5DaGFydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwiaGVpZ2h0OjQwMHB4OyB3aWR0aDozMDBweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZDogXCJtb250aFwiLCBsYWJlbDogXCJNb250aFwiLCB0eXBlOiBcInN0cmluZ1wifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImNvdW50LWFsY29ob2xcIiwgbGFiZWw6IFwiQWxjb2hvbFwiLCB0eXBlOiBcIm51bWJlclwifSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImNvdW50LWRydWdzXCIsIGxhYmVsOiBcIkRydWdzXCIsIHR5cGU6IFwibnVtYmVyXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwgXCJyb3dzXCI6IHJvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbi8vICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIixcbi8vICAgICAgICAgICAgICAgIFwiZmlsbFwiOiAyMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc3BsYXlFeGFjdFZhbHVlc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidkF4aXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwiQ291bnRcIiwgXCJncmlkbGluZXNcIjoge1wiY291bnRcIjogNn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuLy8gICAgICAgICAgICAgICAgXCJoQXhpc1wiOiB7XG4vLyAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkRhdGVcIlxuLy8gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbG9yc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjZmQ0MjNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyMzNWJmYmYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnI2ZmYjY0OCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjOTQ5ZmIzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyM0YzUyNjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuXG5cbi8vICAgICAgICAgICAgdGltZXIgPSAkdGltZW91dCgkc2NvcGUuaW5pdCwgMTUwMDApO1xuLy9cbi8vICAgICAgICAgICAgJHNjb3BlLiRvbihcbi8vICAgICAgICAgICAgICAgIFwiJGRlc3Ryb3lcIixcbi8vICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApIHtcbi8vXG4vLyAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKCB0aW1lciApO1xuLy9cbi8vICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUub25fZXJyb3IocmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY3NzID0gXCJoZWlnaHQ6MjcwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtcIjtcblxuICAgIH0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSByaiBvbiAxMy85LzE2LlxuICovXG5cbid1c2Ugc3RyaWN0JztcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdQYXRyb2xsZXJzUmVwb3J0Q3RybCcsIFsnJHNjb3BlJywgJyRsb2cnLCAnY3VycmVudFVzZXInLCAnZ3Jvd2wnLCAnJHdpbmRvdycsICckdHJhbnNsYXRlJywgJ1JlcG9ydFNlcnZpY2UnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9nLCBjdXJyZW50VXNlciwgZ3Jvd2wsICR3aW5kb3csICR0cmFuc2xhdGUsIFJlcG9ydFNlcnZpY2UpIHtcbiAgICAgICAgdmFyIGRhdGVfZm9ybWF0X21hcHBpbmcgPSB7XG4gICAgICAgICAgICBcIk1NL0REL1lZWVlcIjogXCJNTS9kZC95eXl5XCIsXG4gICAgICAgICAgICBcIkREL01NL1lZWVlcIjogXCJkZC9NTS95eXl5XCJcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXS5kYXRldGltZV9mb3JtYXQua2V5O1xuICAgICAgICB2YXIgZGF0ZV9mb3JtYXQgPSAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0LnNsaWNlKDAsMTApO1xuICAgICAgICAkc2NvcGUuZGF0ZV9mb3JtYXQgPSBkYXRlX2Zvcm1hdF9tYXBwaW5nW2RhdGVfZm9ybWF0XTtcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmRhdGVfZm9ybWF0KVxuICAgICAgICAkc2NvcGUuY3NzID0gXCJoZWlnaHQ6MTc1cHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtcIjtcbiAgICAgICAgJHNjb3BlLnByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBkYXRlX3JhbmdlOntcbiAgICAgICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgeyBpZDogMCwgdGV4dDogJHRyYW5zbGF0ZS5pbnN0YW50KCdsYXN0X3NldmVuX2RheXMnKSwgdmFsdWU6ICdMQVNUXzdfREFZUycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgaWQ6IDEsIHRleHQ6ICR0cmFuc2xhdGUuaW5zdGFudCgnbGFzdF90aGlydHlfZGF5cycpLCB2YWx1ZTogJ0xBU1RfMzBfREFZUycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgaWQ6IDIsIHRleHQ6ICR0cmFuc2xhdGUuaW5zdGFudCgnbGFzdF9zaXhfbW9udGhzJyksIHZhbHVlOiAnTEFTVF82X01PTlRIUycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgaWQ6IDMsIHRleHQ6ICR0cmFuc2xhdGUuaW5zdGFudCgnbGFzdF90d2VsdmVfbW9udGhzJyksIHZhbHVlOiAnTEFTVF8xMl9NT05USFMnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGlkOiA0LCB0ZXh0OiAkdHJhbnNsYXRlLmluc3RhbnQoJ2N1c3RvbV9kYXRlX3JhbmdlJyksIHZhbHVlOiAnQ1VTVE9NJyB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsX3ZhbHVlOiB7IGlkOiAwLCB0ZXh0OiAkdHJhbnNsYXRlLmluc3RhbnQoJ2xhc3Rfc2V2ZW5fZGF5cycpLCB2YWx1ZTogJ0xBU1RfN19EQVlTJyB9LFxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24odGV4dF9yYW5nZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IG1vbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gbW9tZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2godGV4dF9yYW5nZS52YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTEFTVF83X0RBWVMnOiB7IGZyb20uc3VidHJhY3QoNywgJ2RheXMnKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMQVNUXzMwX0RBWVMnOiB7IGZyb20uc3VidHJhY3QoMzAsICdkYXlzJyk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTEFTVF82X01PTlRIUyc6IHsgZnJvbS5zdWJ0cmFjdCg2LCAnbW9udGhzJyk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTEFTVF8xMl9NT05USFMnOiB7ZnJvbS5zdWJ0cmFjdCgxMiwgJ21vbnRocycpOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSA9IG1vbWVudCgkc2NvcGUucHJvcGVydGllcy5kYXRlX3JhbmdlLmZyb20sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb3BlcnRpZXMuZGF0ZV9yYW5nZS5mcm9tID0gZnJvbS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0aWVzLmRhdGVfcmFuZ2UudG8gPSB0by5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBkYXRlX2Zvcm1hdCxcbiAgICAgICAgICAgICAgICBmcm9tOiBtb21lbnQoKS5zdWJ0cmFjdCg3LCAnZGF5cycpLmZvcm1hdCgpLFxuICAgICAgICAgICAgICAgIHRvOiBtb21lbnQoKS5mb3JtYXQoKSxcbiAgICAgICAgICAgICAgICBwaWNrZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb250SGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvcGVydGllcy5kYXRlX3JhbmdlLnBpY2tlcnMuZnJvbnRIYW5kbGVkID0gdmFsdWUgPT0gJ2Zyb250SGFuZGxlZCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5yZXBvcnQgPSB7XG4gICAgICAgICAgICBwYXJhbXMgOiB7XG4gICAgICAgICAgICAgICAgb3V0cHV0X2Zvcm1hdDogJ2pzb24nLFxuICAgICAgICAgICAgICAgIGRhdGVmcm9tOiBtb21lbnQoKS5zdWJ0cmFjdCg3LCAnZGF5cycpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCswMDowMDowMCcpLFxuICAgICAgICAgICAgICAgIGRhdGV0bzogbW9tZW50KCkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREKzIzOjU5OjU5JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdwcm9wZXJ0aWVzLmRhdGVfcmFuZ2UuZnJvbScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSl7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnByb3BlcnRpZXMgJiYgJHNjb3BlLnByb3BlcnRpZXMuZGF0ZV9yYW5nZS5waWNrZXJzLmZyb250SGFuZGxlZCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0aWVzLmRhdGVfcmFuZ2Uuc2VsZWN0Lm1vZGVsX3ZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb3BlcnRpZXMuZGF0ZV9yYW5nZS5zZWxlY3Qub3B0aW9uc1soJHNjb3BlLnByb3BlcnRpZXMuZGF0ZV9yYW5nZS5zZWxlY3Qub3B0aW9ucy5sZW5ndGggLSAxKV07XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb3BlcnRpZXMuZGF0ZV9yYW5nZS5waWNrZXJzLmZyb250SGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydC5wYXJhbXMuZGF0ZWZyb20gPSBtb21lbnQobmV3VmFsdWUpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCswMDowMDowMCcpO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgncHJvcGVydGllcy5kYXRlX3JhbmdlLnRvJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKXtcbiAgICAgICAgICAgIGlmICgkc2NvcGUucHJvcGVydGllcyAmJiAkc2NvcGUucHJvcGVydGllcy5kYXRlX3JhbmdlLnBpY2tlcnMuZnJvbnRIYW5kbGVkKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb3BlcnRpZXMuZGF0ZV9yYW5nZS5zZWxlY3QubW9kZWxfdmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvcGVydGllcy5kYXRlX3JhbmdlLnNlbGVjdC5vcHRpb25zWygkc2NvcGUucHJvcGVydGllcy5kYXRlX3JhbmdlLnNlbGVjdC5vcHRpb25zLmxlbmd0aCAtIDEpXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucHJvcGVydGllcy5kYXRlX3JhbmdlLnBpY2tlcnMuZnJvbnRIYW5kbGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0LnBhcmFtcy5kYXRldG8gPSBtb21lbnQobmV3VmFsdWUpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCsyMzo1OTo1OScpO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDIwLFxuICAgICAgICAgICAgdG90YWxJdGVtczogMCxcbiAgICAgICAgICAgIHRvdGFsUGFnZXM6IDAsXG4gICAgICAgICAgICBwcmVkaWNhdGU6ICduYW1lJyxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgcmV2ZXJzZTogZmFsc2UsXG5cbiAgICAgICAgICAgIHNldFBhZ2U6IGZ1bmN0aW9uIChwYWdlTnVtKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UgPSBwYWdlTnVtO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc29ydEJ5OiBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJldmVyc2UgPSAhJHNjb3BlLmxpc3QucmV2ZXJzZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdmZXRjaGluZyBpdGVtcy4uLicpO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfUEFUUk9MTEVSU19SRVBPUlRcIik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydC5wYXJhbXMub3V0cHV0X2Zvcm1hdCA9ICdqc29uJztcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0LnBhcmFtcy5vZmZzZXQgPSAoJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UgLSAxKSAqICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0LnBhcmFtcy5jaHVuayA9ICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0LnBhcmFtcy5vcmRlcl9ieSA9ICRzY29wZS5saXN0LnByZWRpY2F0ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0LnBhcmFtcy5vcmRlcl9ieV9kaXJlY3Rpb24gPSAkc2NvcGUubGlzdC5yZXZlcnNlPyAnZGVzYycgOiAnYXNjJztcbiAgICAgICAgICAgICAgICBSZXBvcnRTZXJ2aWNlLmZldGNoUGF0cm9sbGVycygkc2NvcGUucmVwb3J0LnBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuaXRlbXMgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxJdGVtcyA9IHJlc3BvbnNlLnRvdGFsX3Jvd3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LnRvdGFsSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG93bmxvYWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkRPV05MT0FESU5HX1BBVFJPTExFUlNfUkVQT1JUXCIpO1xuICAgICAgICAgICAgICAgIFJlcG9ydFNlcnZpY2UuZmV0Y2hQYXRyb2xsZXJzKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZWZyb206ICRzY29wZS5yZXBvcnQucGFyYW1zLmRhdGVmcm9tLFxuICAgICAgICAgICAgICAgICAgICBkYXRldG86ICRzY29wZS5yZXBvcnQucGFyYW1zLmRhdGV0byxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0X2Zvcm1hdDogJ2NzdidcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3IgPSBhbmd1bGFyLmVsZW1lbnQoJzxhLz4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAnZGF0YTphdHRhY2htZW50L2NzdjtjaGFyc2V0PXV0Zi04LCcgKyBlbmNvZGVVUkkoZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnX2JsYW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZDogJ3BhdHJvbGxlcnNfcmVwb3J0LmNzdidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pWzBdLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJpbnQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHdpbmRvdy5wcmludCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5pdGVtc1BlclBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5jdXJyZW50UGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgfSk7XG4gICAgfV0pOyIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1JlcG9ydEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHN0YXRlUGFyYW1zLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHEsICR3aW5kb3csICRpbnRlcmNvbSwgJHRyYW5zbGF0ZSwgSW5jaWRlbnRTZXJ2aWNlLCBEYXRlUmFuZ2VTZXJ2aWNlLCBSZXBvcnRTZXJ2aWNlLCBxdWVzdGlvbnMsIGN1cnJlbnRVc2VyLCBncm93bCkge1xuXG4gICAgICAgICRpbnRlcmNvbS51cGRhdGUoe1xuICAgICAgICAgICAgZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxuICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIubmFtZSxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICB1c2VyX2lkOiBjdXJyZW50VXNlci51c2VyX2lkLFxuICAgICAgICAgICAgY29tcGFueToge1xuICAgICAgICAgICAgICAgIGlkOiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9uYW1lXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm9sZTogY3VycmVudFVzZXIucm9sZV9pZFswXS5rZXksXG4gICAgICAgICAgICBkYXNoYm9hcmRfZmVhdHVyZV9sYXN0X3VzZWQ6IFwiUmVwb3J0c1wiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICB2YXIgcmVzb3J0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXTtcbiAgICAgICAgdmFyIHJlc29ydF9pZCA9IHJlc29ydC5yZXNvcnRfaWQ7XG5cbiAgICAgICAgZnVuY3Rpb24gdG9VVEModmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudHoodmFsdWUsICdZWVlZLU1NLUREIEhIOm1tOnNzJywgdHoubmFtZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvTG9jYWxUaW1lKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50LnV0Yyh2YWx1ZSkudHoodHoubmFtZSgpKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5pZCA9ICRzdGF0ZVBhcmFtcy5yZXBvcnRJZDtcblxuICAgICAgICAkc2NvcGUuc2NoZW1hID0ge1xuICAgICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRhdGVfZm9ybWF0X21hcHBpbmcgPSB7XG4gICAgICAgICAgICBcIk1NL0REL1lZWVlcIjogXCJNTS9kZC95eXl5XCIsXG4gICAgICAgICAgICBcIkREL01NL1lZWVlcIjogXCJkZC9NTS95eXl5XCJcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXS5kYXRldGltZV9mb3JtYXQua2V5O1xuICAgICAgICB2YXIgZGF0ZV9mb3JtYXQgPSAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0LnNsaWNlKDAsMTApO1xuICAgICAgICAkc2NvcGUuZGF0ZV9mb3JtYXQgPSBkYXRlX2Zvcm1hdF9tYXBwaW5nW2RhdGVfZm9ybWF0XTtcblxuXG4vLyAgICAgICAgU2NoZW1hXHRGb3JtIHR5cGVcbi8vICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlx0dGV4dFxuLy8gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXHRudW1iZXJcbi8vICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcdG51bWJlclxuLy8gICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlx0Y2hlY2tib3hcbi8vICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlx0ZmllbGRzZXRcbi8vICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIiBhbmQgYSBcImVudW1cIlx0c2VsZWN0XG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIiBhbmQgYSBcImVudW1cIiBpbiBhcnJheSB0eXBlXHRjaGVja2JveGVzXG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlx0YXJyYXlcblxuICAgICAgICB2YXIgc2NoZW1hX3R5cGUgPSB7XG4gICAgICAgICAgICAndGV4dCc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnbnVtYmVyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAncmFuZ2UnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdhcnJvd3MnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdzZWxlY3QnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdtdWx0aV9zZWxlY3QnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdyYWRpbyc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ3JhZGlvX2J1dHRvbic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2dlbmRlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2ltYWdlJzogJ29iamVjdCcsXG4gICAgICAgICAgICAnZGF0ZV9waWNrZXInOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdkYXRlX3RpbWVfcGlja2VyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnZ29vZ2xlX21hcCc6ICdvYmplY3QnLFxuICAgICAgICAgICAgJ2ZpbGUnOiAnc3RyaW5nJ1xuICAgICAgICB9O1xuXG4vLyAgICAgICAgRm9ybSBUeXBlXHRCZWNvbWVzXG4vLyAgICAgICAgZmllbGRzZXRcdGEgZmllbGRzZXQgd2l0aCBsZWdlbmRcbi8vICAgICAgICBzZWN0aW9uXHRqdXN0IGEgZGl2XG4vLyAgICAgICAgY29uZGl0aW9uYWxcdGEgc2VjdGlvbiB3aXRoIGEgbmctaWZcbi8vICAgICAgICBhY3Rpb25zXHRob3Jpem9udGFsIGJ1dHRvbiBsaXN0LCBjYW4gb25seSBzdWJtaXQgYW5kIGJ1dHRvbnMgYXMgaXRlbXNcbi8vICAgICAgICB0ZXh0XHRpbnB1dCB3aXRoIHR5cGUgdGV4dFxuLy8gICAgICAgIHRleHRhcmVhXHRhIHRleHRhcmVhXG4vLyAgICAgICAgbnVtYmVyXHRpbnB1dCB0eXBlIG51bWJlclxuLy8gICAgICAgIHBhc3N3b3JkXHRpbnB1dCB0eXBlIHBhc3N3b3JkXG4vLyAgICAgICAgY2hlY2tib3hcdGEgY2hlY2tib3hcbi8vICAgICAgICBjaGVja2JveGVzXHRsaXN0IG9mIGNoZWNrYm94ZXNcbi8vICAgICAgICBzZWxlY3RcdGEgc2VsZWN0IChzaW5nbGUgdmFsdWUpXG4vLyAgICAgICAgc3VibWl0XHRhIHN1Ym1pdCBidXR0b25cbi8vICAgICAgICBidXR0b25cdGEgYnV0dG9uXG4vLyAgICAgICAgcmFkaW9zXHRyYWRpbyBidXR0b25zXG4vLyAgICAgICAgcmFkaW9zLWlubGluZVx0cmFkaW8gYnV0dG9ucyBpbiBvbmUgbGluZVxuLy8gICAgICAgIHJhZGlvYnV0dG9uc1x0cmFkaW8gYnV0dG9ucyB3aXRoIGJvb3RzdHJhcCBidXR0b25zXG4vLyAgICAgICAgaGVscFx0aW5zZXJ0IGFyYml0cmFyeSBodG1sXG4vLyAgICAgICAgdGFiXHR0YWJzIHdpdGggY29udGVudFxuLy8gICAgICAgIGFycmF5XHRhIGxpc3QgeW91IGNhbiBhZGQsIHJlbW92ZSBhbmQgcmVvcmRlclxuLy8gICAgICAgIHRhYmFycmF5XHRhIHRhYmJlZCB2ZXJzaW9uIG9mIGFycmF5XG5cbiAgICAgICAgdmFyIGZvcm1fdHlwZSA9IHtcbiAgICAgICAgICAgICd0ZXh0JzogJ3RleHQnLFxuICAgICAgICAgICAgJ3JhbmdlJzogJ3RleHQnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJzogJ3RleHQnLFxuICAgICAgICAgICAgJ251bWJlcic6ICdudW1iZXInLFxuICAgICAgICAgICAgJ2Fycm93cyc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ3NlbGVjdCc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ211bHRpX3NlbGVjdCc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ3JhZGlvJzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAncmFkaW9fYnV0dG9uJzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAnZ2VuZGVyJzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAnaW1hZ2UnOiAnZmlsZV91cGxvYWQnLFxuICAgICAgICAgICAgJ21lc3NhZ2UnOiAnaGVscCcsXG4gICAgICAgICAgICAnZGF0ZV9waWNrZXInOiAnZGF0ZV9waWNrZXInLFxuICAgICAgICAgICAgJ2RhdGVfdGltZV9waWNrZXInOiAnZGF0ZV90aW1lX3BpY2tlcicsXG4gICAgICAgICAgICAnZ29vZ2xlX21hcCc6ICdnb29nbGVtYXAnLFxuICAgICAgICAgICAgJ2ZpbGUnOiAndGV4dCdcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hvc2VuVHlwZXMgPSBbXG4gICAgICAgICAgICAndGV4dCcsXG4gICAgICAgICAgICAncmFuZ2UnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJyxcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICAgICAgJ2RlY2ltYWwnLFxuICAgICAgICAgICAgJ2Fycm93cycsXG4gICAgICAgICAgICAnc2VsZWN0JyxcbiAgICAgICAgICAgICdtdWx0aV9zZWxlY3QnLFxuICAgICAgICAgICAgJ3JhZGlvJyxcbiAgICAgICAgICAgICdyYWRpb19idXR0b24nLFxuICAgICAgICAgICAgJ2dlbmRlcicsXG4gICAgICAgICAgICAnZGF0ZV9waWNrZXInLFxuICAgICAgICAgICAgJ2RhdGVfdGltZV9waWNrZXInXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIHRhYnMgPSBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXM7XG5cbiAgICAgICAgdmFyIGdldENob2ljZU1hcCA9IGZ1bmN0aW9uIChtYXBWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBfY2hvaWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgIF90aXRsZW1hcCA9IFtdO1xuXG4gICAgICAgICAgICAvLyBMb29wIGFuZCBidWlsZCBjaG9pY2VzIGFuZCB0aXRsZW1hcFxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcFZhbHVlcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihcImNvbnRyb2xsZWRcIikgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2hvaWNlcy5wdXNoKHtcImlkXCI6IGtleSwgXCJuYW1lXCI6ICR0cmFuc2xhdGUuaW5zdGFudCh2YWx1ZVtrZXldKX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RpdGxlbWFwLnB1c2goe1widmFsdWVcIjoga2V5LCBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlW2tleV0pfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBcImNob2ljZXNcIjogX2Nob2ljZXMsXG4gICAgICAgICAgICAgICAgXCJ0aXRsZW1hcFwiOiBfdGl0bGVtYXBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGFicykge1xuICAgICAgICAgICAgaWYgKHRhYnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbiBpbiB0YWJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XS5oYXNPd25Qcm9wZXJ0eShxdWVzdGlvbikgJiYgKHF1ZXN0aW9uID09ICdRdWVzdGlvbnMnIHx8IHF1ZXN0aW9uID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNfcXVlc3Rpb24gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbSBpbiB0YWJzW2tleV1bcXVlc3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XVtxdWVzdGlvbl0uaGFzT3duUHJvcGVydHkobSkpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxID0gdGFic1trZXldW3F1ZXN0aW9uXVttXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGVtYXAgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdzZWxlY3QnIHx8IHEuVHlwZSA9PSAnbXVsdGlfc2VsZWN0JyB8fCBxLlR5cGUgPT0gJ2Fycm93cycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5MSBpbiBxLlZhbHVlcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVmFsdWVzLmhhc093blByb3BlcnR5KGtleTEpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNob2ljZU1hcCA9IGdldENob2ljZU1hcChxLlZhbHVlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hvaWNlcyA9IGNob2ljZU1hcC5jaG9pY2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcCA9IGNob2ljZU1hcC50aXRsZW1hcDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnZ2VuZGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTWFsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiRmVtYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGZW1hbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIlllc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiWWVzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJOb1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTm9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdyYWRpb19idXR0b24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlllc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwibm9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJ1bmtub3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJVbmtub3duXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNob3NlblR5cGVzLmluZGV4T2YocS5UeXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighcS5oYXNPd25Qcm9wZXJ0eSgnUGFyZW50S2V5JykgfHwgKHEuaGFzT3duUHJvcGVydHkoJ1BhcmVudEtleScpICYmIHRhYnNba2V5XVtxdWVzdGlvbl0uaGFzT3duUHJvcGVydHkocVsnUGFyZW50S2V5J10pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHEuaGFzT3duUHJvcGVydHkoJ1BhcmVudEtleScpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbi5mb3JFYWNoKGZ1bmN0aW9uKGN1cnJlbnQsIGluZGV4LCBhcnJheSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50LmtleSA9PSBxWydQYXJlbnRLZXknXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bGxrZXkgPSBtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxrZXkgPSBrZXkgKyAnX19fXycgKyBtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnQuaGFzT3duUHJvcGVydHkoJ2NoaWxkRmllbGQnKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkFsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzX3F1ZXN0aW9uW2luZGV4XVsnY2hpbGRGaWVsZCddW3FbJ1Nob3dJZiddW3FbJ1BhcmVudEtleSddXV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbltpbmRleF1bJ2NoaWxkRmllbGQnXVtxWydTaG93SWYnXVtxWydQYXJlbnRLZXknXV1dWydzZWxlY3QnXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb25fbmFtZSA9IHFbJ1Nob3dJZiddW3FbJ1BhcmVudEtleSddXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbltpbmRleF1bJ2NoaWxkRmllbGQnXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcImFsbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbltpbmRleF1bJ2NoaWxkRmllbGQnXVtzZWxlY3Rpb25fbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc19xdWVzdGlvbltpbmRleF1bJ2NoaWxkRmllbGQnXVtzZWxlY3Rpb25fbmFtZV1bJ3NlbGVjdCddID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBmdWxsa2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbGtleSA9IG07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsa2V5ID0ga2V5ICsgJ19fX18nICsgbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNfcXVlc3Rpb24ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBzY2hlbWFfdHlwZVtxLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm10eXBlJzogZm9ybV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGVNYXAnOiB0aXRsZW1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09IFwicmVwZWF0ZXJcIiAmJiBxLmhhc093blByb3BlcnR5KCdSZXBlYXRpbmdRdWVzdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHF1ZXN0aW9uMSBpbiB0YWJzW2tleV1bcXVlc3Rpb25dW21dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV1bcXVlc3Rpb25dW21dLmhhc093blByb3BlcnR5KHF1ZXN0aW9uMSkgJiYgKHF1ZXN0aW9uMSA9PSAnUXVlc3Rpb25zJyB8fCBxdWVzdGlvbjEgPT0gJ1JlcGVhdGluZ1F1ZXN0aW9ucycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcF9zY2hlbWFfcHJvcGVydGllcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0YWJzW2tleV1bcXVlc3Rpb25dW21dW3F1ZXN0aW9uMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldW3F1ZXN0aW9uXVttXVtxdWVzdGlvbjFdLmhhc093blByb3BlcnR5KG4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxMSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bcXVlc3Rpb24xXVtuXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGVtYXAgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocTEuVHlwZSA9PSAnc2VsZWN0JyB8fCBxMS5UeXBlID09ICdtdWx0aV9zZWxlY3QnIHx8IHExLlR5cGUgPT0gJ2Fycm93cycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5MTEgaW4gcTEuVmFsdWVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocTEuVmFsdWVzLmhhc093blByb3BlcnR5KGtleTExKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VNYXAgPSBnZXRDaG9pY2VNYXAocTEuVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzID0gY2hvaWNlTWFwLmNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwID0gY2hvaWNlTWFwLnRpdGxlbWFwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ2dlbmRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1hbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIkZlbWFsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVtYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiWWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAncmFkaW9fYnV0dG9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwieWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJub1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTm9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInVua25vd25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlVua25vd25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXExLmhhc093blByb3BlcnR5KCdQYXJlbnRLZXknKSB8fCAocTEuaGFzT3duUHJvcGVydHkoJ1BhcmVudEtleScpICYmIHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bcXVlc3Rpb24xXS5oYXNPd25Qcm9wZXJ0eShxMVsnUGFyZW50S2V5J10pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLmhhc093blByb3BlcnR5KCdQYXJlbnRLZXknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaG9zZW5UeXBlcy5pbmRleE9mKHExLlR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmtleSA9PSBxWydQYXJlbnRLZXknXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Lmhhc093blByb3BlcnR5KCdjaGlsZEZpZWxkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNbaW5kZXhdWydjaGlsZEZpZWxkJ11bcVsnU2hvd0lmJ11bcVsnUGFyZW50S2V5J11dXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocTEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBtICsgJ19fX18nICsgbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHExLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNbaW5kZXhdWydjaGlsZEZpZWxkJ11bcTFbJ1Nob3dJZiddW3ExWydQYXJlbnRLZXknXV1dWydzZWxlY3QnXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHExLkxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbGtleSc6IGZ1bGxrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbl9uYW1lID0gcTFbJ1Nob3dJZiddW3ExWydQYXJlbnRLZXknXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNbaW5kZXhdWydjaGlsZEZpZWxkJ10gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBfc2NoZW1hX3Byb3BlcnRpZXNbaW5kZXhdWydjaGlsZEZpZWxkJ11bc2VsZWN0aW9uX25hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCkgKyAnIC0gJyArICR0cmFuc2xhdGUuaW5zdGFudChxMS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbGtleSc6IG0gKyAnX19fXycgKyBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tleSc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocTEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcF9zY2hlbWFfcHJvcGVydGllc1tpbmRleF1bJ2NoaWxkRmllbGQnXVtzZWxlY3Rpb25fbmFtZV1bJ3NlbGVjdCddID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocTEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNob3NlblR5cGVzLmluZGV4T2YocTEuVHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCkgKyAnIC0gJyArICR0cmFuc2xhdGUuaW5zdGFudChxMS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHNjaGVtYV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcTEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbGtleSc6IG0gKyAnX19fXycgKyBuICxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm10eXBlJzogZm9ybV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHExLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCFxMS5oYXNPd25Qcm9wZXJ0eSgnUGFyZW50S2V5JykgfHwgKHExLmhhc093blByb3BlcnR5KCdQYXJlbnRLZXknKSAmJiB0YWJzW2tleV1bcXVlc3Rpb25dW21dW3F1ZXN0aW9uMV0uaGFzT3duUHJvcGVydHkocTFbJ1BhcmVudEtleSddKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIGlmKHExLmhhc093blByb3BlcnR5KCdQYXJlbnRLZXknKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYgKGNob3NlblR5cGVzLmluZGV4T2YocTEuVHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYgKGNob3NlblR5cGVzLmluZGV4T2YocTEuVHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICB0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCkgKyAnIC0gJyArICR0cmFuc2xhdGUuaW5zdGFudChxMS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAndHlwZSc6IHNjaGVtYV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgJ29yZGVyJzogcTEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAnZnVsbGtleSc6IG0gKyAnX19fXycgKyBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgJ2tleSc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAnZm9ybXR5cGUnOiBmb3JtX3R5cGVbcTEuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocTEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXMgPSAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXMuY29uY2F0KHRlbXBfc2NoZW1hX3Byb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzID0gJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzLmNvbmNhdCh0ZW1wX3NjaGVtYV9wcm9wZXJ0aWVzX3F1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5tb2RlbCA9IHtcbiAgICAgICAgICAgIGZpbHRlcnM6IFtcbiAgICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5vblN1Ym1pdCA9IGZ1bmN0aW9uIChmb3JtKSB7XG4gICAgICAgICAgICAkbG9nLmxvZygkc2NvcGUubW9kZWwpO1xuXG4gICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUub25SZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5tb2RlbC5maWx0ZXJzID0gW1xuICAgICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5vbkRvd25sb2FkID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgICAgICAgICAgIHZhciBzdGFydF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LnJhbmdlLmRhdGVGcm9tKS5mb3JtYXQoJ1lZWVktTU0tREQgMDA6MDA6MDAnKSk7XG4gICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QucmFuZ2UuZGF0ZVRvKS5mb3JtYXQoJ1lZWVktTU0tREQgMjM6NTk6NTknKSk7XG4gICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UuZmV0Y2hSZXBvcnQoc3RhcnRfdGltZSwgZW5kX3RpbWUsICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSwgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UsICRzY29wZS5tb2RlbC5maWx0ZXJzLCByZXNvcnRfaWQsICdjc3YnKS50aGVuKFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3IgPSBhbmd1bGFyLmVsZW1lbnQoJzxhLz4nKTtcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogJ2RhdGE6YXR0YWNobWVudC9jc3Y7Y2hhcnNldD11dGYtOCwnICsgZW5jb2RlVVJJKGRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnX2JsYW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiAncmVwb3J0LmNzdidcbiAgICAgICAgICAgICAgICAgICAgfSlbMF0uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgIH07XG5cbi8vICAgICAgICBmdW5jdGlvbiBsYXp5TG9hZEV4cG9ydERhdGEoKSB7XG4vLyAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4vL1xuLy8gICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UuZmV0Y2hSZXBvcnQoJHNjb3BlLm1vZGVsLmRhdGVGcm9tLCAkc2NvcGUubW9kZWwuZGF0ZVRvLCB0ei5uYW1lKCksICRzY29wZS5tb2RlbClcbi8vICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG4vL1xuLy8gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWFwKGZ1bmN0aW9uIChpbmNpZGVudCkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaW5jaWRlbnQuaWQsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRpbWU6IGluY2lkZW50LmRhdGV0aW1lLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc3VhbHR5OiBpbmNpZGVudC5jYXN1YWx0eSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmp1cnk6IGluY2lkZW50LmluanVyeSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbmNpZGVudC50eXBlLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5OiBpbmNpZGVudC5hY3Rpdml0eSxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGluY2lkZW50LnN0YXR1c1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgfSlcbi8vICAgICAgICAgICAgICAgICAgICApO1xuLy9cbi8vICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvckRhdGEpIHtcbi8vICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3JEYXRhKTtcbi8vICAgICAgICAgICAgICAgIH0pO1xuLy9cbi8vXG4vLyAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuLy8gICAgICAgIH1cblxuXG4gICAgICAgICRzY29wZS5hZGRGaWVsZCA9IGZ1bmN0aW9uIChmaWx0ZXJzKSB7XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2goe30pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5yZW1vdmVGaWVsZCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgJHNjb3BlLm1vZGVsLmZpbHRlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUubGlzdCA9IHtcbiAgICAgICAgICAgIHJhbmdlOiBEYXRlUmFuZ2VTZXJ2aWNlLnJhbmdlLFxuICAgICAgICAgICAgaW5jaWRlbnRzOiBbXSxcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgICAgICAgICAgaXRlbXNQZXJQYWdlOiAyMCxcbiAgICAgICAgICAgIGZpbHRlcmVkSXRlbXM6IDAsXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiAwLFxuICAgICAgICAgICAgdG90YWxQYWdlczogMCxcbiAgICAgICAgICAgIHByZWRpY2F0ZTogJ2R0X2NyZWF0ZWQnLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3I6ICcnLFxuXG4gICAgICAgICAgICBzZXRQYWdlOiBmdW5jdGlvbiAocGFnZU51bSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmN1cnJlbnRQYWdlID0gcGFnZU51bTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyA9ICRzY29wZS5saXN0LmZpbHRlcmVkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzb3J0X2J5OiBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJldmVyc2UgPSAhJHNjb3BlLmxpc3QucmV2ZXJzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdmZXRjaGluZyBpbmNpZGVudHMuLi4nKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHZhciBzdGFydF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LnJhbmdlLmRhdGVGcm9tKS5mb3JtYXQoJ1lZWVktTU0tREQgMDA6MDA6MDAnKSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LnJhbmdlLmRhdGVUbykuZm9ybWF0KCdZWVlZLU1NLUREIDIzOjU5OjU5JykpO1xuXG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmZldGNoUmVwb3J0KHN0YXJ0X3RpbWUsIGVuZF90aW1lLCAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UsICRzY29wZS5saXN0LmN1cnJlbnRQYWdlLCAkc2NvcGUubW9kZWwuZmlsdGVycywgcmVzb3J0X2lkLCAnanNvbicpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YS5yZXN1bHRzLCBmdW5jdGlvbihlbGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0c1tpbmRleF1bJ2R0X2NyZWF0ZWQnXSA9IG1vbWVudChlbGVtWydkdF9jcmVhdGVkJ10sICdZWVlZLU1NLUREIEhIOm1tOnNzJykuZm9ybWF0KCRzY29wZS5kYXRldGltZV9mb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmluY2lkZW50cyA9IGRhdGEucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgPSAoJHNjb3BlLmxpc3QuaW5jaWRlbnRzID09IG51bGwpID8gMCA6ICRzY29wZS5saXN0LmluY2lkZW50cy5sZW5ndGg7IC8vSW5pdGlhbGx5IGZvciBubyBmaWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNvcnRfYnkoJ2R0X2NyZWF0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJldmVyc2UgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKHJlYXNvbi5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pbmNpZGVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmVycm9yID0gcmVhc29uLmRldGFpbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwcmludDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3ByaW50aW5nIGluY2lkZW50ICcgKyBpZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaWQgIT09IG51bGwgfHwgaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UucHJpbnQoaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YS5kYXRhLlVSTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy5vcGVuKGRhdGEuZGF0YS5VUkwsICdfYmxhbmsnLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0Lml0ZW1zUGVyUGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuY3VycmVudFBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLnJlcG9ydCA9IHtcbiAgICAgICAgICAgIGxhYmVsOiBcIlwiLFxuICAgICAgICAgICAgZ2xvYmFsOiAwLFxuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgdXJsOiB7fSxcbiAgICAgICAgICAgICAgICBib2R5OiB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5nZXRSZXBvcnQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIFJlcG9ydFNlcnZpY2UuZmV0Y2goaWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcblxuICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJyZXBvcnRfZmV0Y2hlZF9zdWNjZXNzZnVsbHlcIik7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0ID0gZGF0YTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0Lmdsb2JhbCA9ICRzY29wZS5yZXBvcnQuZ2xvYmFsID4gMDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5yYW5nZS5kYXRlRnJvbSA9IHRvTG9jYWxUaW1lKCRzY29wZS5yZXBvcnQuY29uZmlnLnVybC5kYXRlZnJvbSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucmFuZ2UuZGF0ZVRvID0gdG9Mb2NhbFRpbWUoJHNjb3BlLnJlcG9ydC5jb25maWcudXJsLmRhdGV0byk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kZWwuZmlsdGVycyA9ICRzY29wZS5yZXBvcnQuY29uZmlnLmJvZHk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcblxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmNyZWF0ZVJlcG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGFydF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LnJhbmdlLmRhdGVGcm9tKS5mb3JtYXQoJ1lZWVktTU0tREQgMDA6MDA6MDAnKSk7XG4gICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QucmFuZ2UuZGF0ZVRvKS5mb3JtYXQoJ1lZWVktTU0tREQgMjM6NTk6NTknKSk7XG5cbiAgICAgICAgICAgIHZhciByZXBvcnQgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLnJlcG9ydCk7XG4gICAgICAgICAgICByZXBvcnQuZ2xvYmFsID0gJHNjb3BlLnJlcG9ydC5nbG9iYWwgPyAxIDogMDtcbiAgICAgICAgICAgIHJlcG9ydC5jb25maWcgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGF0ZWZyb21cIjogc3RhcnRfdGltZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkYXRldG9cIjogZW5kX3RpbWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5tb2RlbC5maWx0ZXJzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBSZXBvcnRTZXJ2aWNlLnVwZGF0ZSgkc2NvcGUuaWQsIHJlcG9ydCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcInJlcG9ydF91cGRhdGVkX3N1Y2Nlc3NmdWxseVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlcG9ydHMtdXBkYXRlZCcpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFJlcG9ydFNlcnZpY2UuY3JlYXRlKHJlcG9ydCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcInJlcG9ydF9jcmVhdGVkX3N1Y2Nlc3NmdWxseVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3JlcG9ydHMtdXBkYXRlZCcpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCRzY29wZS5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAkc2NvcGUuZ2V0UmVwb3J0KCRzY29wZS5pZCk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ0FuYWx5dGljc1NlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJyRsb2cnLCAnTFMnLCAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkbG9nLCBMUywgQ09ORklHLCBBcGlTZXJ2aWNlKSB7XG5cblxuICAgICAgICB2YXIgQVBJID0ge1xuICAgICAgICAgICAgYmFzZTogQ09ORklHLkFQSV9VUkwgKyAnL2FuYWx5dGljcycsXG4gICAgICAgICAgICBnZXRVcmw6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnLycgKyBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgUkVQT1JUX0FQSSA9IHtcbiAgICAgICAgICAgIGJhc2U6IENPTkZJRy5BUElfVVJMICsgJy9yZXBvcnRzJ1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBmZXRjaFNleDogZnVuY3Rpb24gKGRhdGVGcm9tLCBkYXRlVG8sIHJlc29ydF9pZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgJy9nZW5kZXInLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZWZyb206IGRhdGVGcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRvOiBkYXRlVG8sXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvcnRfaWQ6IHJlc29ydF9pZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmZXRjaEFjdGl2aXR5OiBmdW5jdGlvbiAoZGF0ZUZyb20sIGRhdGVUbywgcmVzb3J0X2lkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQVBJLmJhc2UgKyAnL2FjdGl2aXR5Jywge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVmcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0bzogZGF0ZVRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3J0X2lkOiByZXNvcnRfaWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2hJbmp1cnk6IGZ1bmN0aW9uIChkYXRlRnJvbSwgZGF0ZVRvLCByZXNvcnRfaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSArICcvaW5qdXJ5X3R5cGVzJywge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVmcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0bzogZGF0ZVRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3J0X2lkOiByZXNvcnRfaWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2hSZWZlcnJlZDogZnVuY3Rpb24gKGRhdGVGcm9tLCBkYXRlVG8sIHJlc29ydF9pZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgJy9yZWZlcnJlZF90bycsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlZnJvbTogZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRldG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoQWdlOiBmdW5jdGlvbiAoZGF0ZUZyb20sIGRhdGVUbywgcmVzb3J0X2lkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQVBJLmJhc2UgKyAnL2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlZnJvbTogZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRldG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoQWxjb2hvbDogZnVuY3Rpb24gKGRhdGVGcm9tLCBkYXRlVG8sIHJlc29ydF9pZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgJy9hbGNvaG9sJywge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVmcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0bzogZGF0ZVRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3J0X2lkOiByZXNvcnRfaWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2hQYXRyb2xsZXJzOiBmdW5jdGlvbiAoZGF0ZUZyb20sIGRhdGVUbykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIFJFUE9SVF9BUEkuYmFzZSArICcvcGF0cm9sbGVycy8nLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0X2Zvcm1hdDogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZWZyb206IGRhdGVGcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRvOiBkYXRlVG8sXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVuazogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieTogXCJuYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IFwiYXNjXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICB9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwLnNlcnZpY2VzJylcbiAgICAuc2VydmljZSgnUmVwb3J0U2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCAnJGxvZycsICdVc2VyU2VydmljZScsICdMUycsICAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkbG9nLCBVc2VyU2VydmljZSwgTFMsIENPTkZJRywgQXBpU2VydmljZSkge1xuXG4gICAgICAgIHZhciBBUEkgPSB7XG4gICAgICAgICAgICBiYXNlOiAgQ09ORklHLkFQSV9VUkwgKyAnL3JlcG9ydHMvJyxcbiAgICAgICAgICAgIGdldFVybDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcvJyArIGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmZXRjaEFsbDogZnVuY3Rpb24gKGRhdGVGcm9tLCBkYXRlVG8sIHJlc29ydF9pZCwgY2h1bmssIHBhZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgaWQgKyAnLycpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoUGF0cm9sbGVyczogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBwYXJhbXMpe1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5wdXNoKGtleSArICc9JyArIHBhcmFtc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQVBJLmJhc2UgKyAncGF0cm9sbGVycy8/JyArIHF1ZXJ5LmpvaW4oJyYnKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBkYXRhIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoaWQsIGRhdGEpIHtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBkYXRhIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQVBJLmJhc2UgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XSk7XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdBcmVhQWRkQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIEFyZWFTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wpIHtcbiAgICAgICAgJHNjb3BlLmFkZEFyZWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBncm93bC5pbmZvKFwiQUREX0FSRUFcIik7XG5cbiAgICAgICAgICAgIEFyZWFTZXJ2aWNlLmFkZCgkc2NvcGUuYXJlYV9uYW1lKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJhcmVhX2NyZWF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oXCJhcmVhc1wiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKGVycm9yLmRldGFpbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9HbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKGVycm9yLmhhc093blByb3BlcnR5KCdkZXRhaWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAkc2NvcGUuZXJyb3IgPSBlcnJvci5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICRzY29wZS5mb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vYW5ndWxhci5mb3JFYWNoKGVycm9yLCBmdW5jdGlvbiAoZXJyb3JzLCBmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBpZiAoZmllbGQgPT0gJ25vbl9maWVsZF9lcnJvcnMnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAvLyBHbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvcnMuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICRzY29wZS5mb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgLy9GaWVsZCBsZXZlbCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICRzY29wZS5mb3JtW2ZpZWxkXS4kc2V0VmFsaWRpdHkoJ2JhY2tlbmQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICRzY29wZS5lcnJvcnNbZmllbGRdID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy99KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQXJlYUVkaXRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgQXJlYVNlcnZpY2UsIGN1cnJlbnRVc2VyLCBncm93bCkge1xuICAgICAgICB2YXIgaWQgPSAkc3RhdGVQYXJhbXMuYXJlYUlkO1xuXG4gICAgICAgICRzY29wZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19BUkVBXCIpO1xuICAgICAgICAgICAgICAgIEFyZWFTZXJ2aWNlLmZldGNoKGlkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXJlYSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlQXJlYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJVUERBVEVfQVJFQVwiKTtcbiAgICAgICAgICAgICAgICBBcmVhU2VydmljZS51cGRhdGUoaWQsICRzY29wZS5hcmVhLmFyZWFfbmFtZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJhcmVhX3VwZGF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQXJlYUxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRsb2cnLCAnJHN0YXRlUGFyYW1zJywgJyRpbnRlcmNvbScsICdBcmVhU2VydmljZScsICdjdXJyZW50VXNlcicsICdncm93bCcsICckdWltb2RhbCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIEFyZWFTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsICRtb2RhbCkge1xuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDIwLFxuICAgICAgICAgICAgdG90YWxJdGVtczogMCxcbiAgICAgICAgICAgIHRvdGFsUGFnZXM6IDAsXG4gICAgICAgICAgICBwcmVkaWNhdGU6ICdhcmVhX25hbWUnLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG5cbiAgICAgICAgICAgIHNldFBhZ2U6IGZ1bmN0aW9uIChwYWdlTnVtKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UgPSBwYWdlTnVtO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zID0gJHNjb3BlLmxpc3QuZmlsdGVyZWQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNvcnRfYnk6IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucmV2ZXJzZSA9ICEkc2NvcGUubGlzdC5yZXZlcnNlO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkbG9nLmxvZygnZmV0Y2hpbmcgaXRlbXMuLi4nKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX0FSRUFcIik7XG4gICAgICAgICAgICAgICAgQXJlYVNlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgJycsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0Lml0ZW1zID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LnRvdGFsSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhcmNoaXZlOiBmdW5jdGlvbihhcmVhX2lkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZW1vdmluZ1wiKTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9hcmVhcy90ZW1wbGF0ZXMvY29uZmlybS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgQXJlYVNlcnZpY2UucmVtb3ZlKGFyZWFfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlYXJjaDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX0FSRUFcIik7XG5cbiAgICAgICAgICAgICAgICBBcmVhU2VydmljZS5mZXRjaEFsbCgkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UsICRzY29wZS5saXN0LmN1cnJlbnRQYWdlLCB0ZXh0LCAkc2NvcGUubGlzdC5wcmVkaWNhdGUsICRzY29wZS5saXN0LnJldmVyc2UpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pdGVtcyA9IGRhdGEucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC50b3RhbEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5pdGVtc1BlclBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0LmN1cnJlbnRQYWdlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHZhciBmaWx0ZXJUZXh0VGltZW91dDtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ3NlYXJjaCcsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJUZXh0VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGZpbHRlclRleHRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclRleHRUaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ2YWx1ZSBjaGFuZ2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3Quc2VhcmNoKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7IC8vIGRlbGF5IDI1MCBtc1xuXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ0FyZWFTZXJ2aWNlJywgWyckaHR0cCcsICckcScsICckd2luZG93JywgJyRpbnRlcmNvbScsICckbG9nJywgJ0xTJywgJ0NPTkZJRycsICdBcGlTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgJHdpbmRvdywgJGludGVyY29tLCAkbG9nLCBMUywgQ09ORklHLCBBcGlTZXJ2aWNlKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBmZXRjaEFsbDogZnVuY3Rpb24gKGNodW5rLCBwYWdlLCB0ZXh0LCBwcmVkaWNhdGUsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZSB8fCAnYXJlYV9uYW1lJztcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXJlYXMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaDp0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5OnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbj8nZGVzYyc6J2FzYydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoaWQsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnYXJlYV9uYW1lJzogbmFtZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5wdXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXJlYXMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnYXJlYV9uYW1lJzogbmFtZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2FyZWFzLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG5cbiAgICAgICAgICAgIGZldGNoOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXJlYXMvJyArIGlkICsgJy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLmRlbGV0ZShBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hcmVhcy8nICsgaWQgKyAnLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfV0pO1xuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQXNzZXRBZGRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgQXNzZXRTZXJ2aWNlLCBjdXJyZW50VXNlciwgYXNzZXRUeXBlcywgYXJlYXMsIGxvY2F0aW9ucywgZ3Jvd2wpIHtcblxuICAgICAgICAkc2NvcGUuYXNzZXRUeXBlcyA9IGFzc2V0VHlwZXMucmVzdWx0cztcbiAgICAgICAgJHNjb3BlLmFzc2V0X3R5cGVfaWQgPSAkc2NvcGUuYXNzZXRUeXBlc1swXS5hc3NldF90eXBlX2lkO1xuXG4gICAgICAgICRzY29wZS5hcmVhcyA9IGFyZWFzLnJlc3VsdHM7XG4gICAgICAgICRzY29wZS5hcmVhX2lkID0gJHNjb3BlLmFyZWFzWzBdLmFyZWFfaWQ7XG5cbiAgICAgICAgdmFyIGFsbExvY2F0aW9ucyA9IGxvY2F0aW9ucy5yZXN1bHRzO1xuXG4gICAgICAgIHJlZnJlc2hMb2NhdGlvbnMoJHNjb3BlLmFyZWFfaWQpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hMb2NhdGlvbnMoYXJlYV9pZCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9ucyA9IF8uZmlsdGVyKGFsbExvY2F0aW9ucywgZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmFyZWEuYXJlYV9pZCA9PSBhcmVhX2lkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IF8uZmluZChhbGxMb2NhdGlvbnMsIGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5hcmVhLmFyZWFfaWQgPT0gJHNjb3BlLmFyZWFfaWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9uX2lkID0gbG9jYXRpb24ubG9jYXRpb25faWQ7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9jYXRpb25faWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnYXJlYV9pZCcsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAmJiBuZXdWYWx1ZSAhPSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlZnJlc2hMb2NhdGlvbnMoJHNjb3BlLmFyZWFfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkFERF9BU1NFVFwiKTtcblxuICAgICAgICAgICAgQXNzZXRTZXJ2aWNlLmFkZCgkc2NvcGUuYXNzZXRfbmFtZSwgJHNjb3BlLmFzc2V0X3R5cGVfaWQsICRzY29wZS5hcmVhX2lkLCAkc2NvcGUubG9jYXRpb25faWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImFzc2V0X2NyZWF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oXCJhc3NldHNcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgJHNjb3BlLmVycm9yID0gZXJyb3IuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL2FuZ3VsYXIuZm9yRWFjaChlcnJvciwgZnVuY3Rpb24gKGVycm9ycywgZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgaWYgKGZpZWxkID09ICdub25fZmllbGRfZXJyb3JzJykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgLy8gR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIC8vRmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJHNldFZhbGlkaXR5KCdiYWNrZW5kJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZXJyb3JzW2ZpZWxkXSA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0Fzc2V0RWRpdEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCBBc3NldFNlcnZpY2UsIGN1cnJlbnRVc2VyLCBhc3NldFR5cGVzLCBhcmVhcywgbG9jYXRpb25zLCBncm93bCkge1xuICAgICAgICB2YXIgaWQgPSAkc3RhdGVQYXJhbXMuYXNzZXRJZDtcblxuICAgICAgICAkc2NvcGUuYXNzZXRUeXBlcyA9IGFzc2V0VHlwZXMucmVzdWx0cztcbiAgICAgICAgLy8kc2NvcGUuYXNzZXRfdHlwZV9pZCA9ICRzY29wZS5hc3NldFR5cGVzWzBdLmFzc2V0X3R5cGVfaWQ7XG5cbiAgICAgICAgJHNjb3BlLmFyZWFzID0gYXJlYXMucmVzdWx0cztcbiAgICAgICAgLy8kc2NvcGUuYXJlYV9pZCA9ICRzY29wZS5hcmVhc1swXS5hcmVhX2lkO1xuXG4gICAgICAgIHZhciBhbGxMb2NhdGlvbnMgPSBsb2NhdGlvbnMucmVzdWx0cztcblxuICAgICAgICBmdW5jdGlvbiByZWZyZXNoTG9jYXRpb25zKGFyZWFfaWQsIGxvY2F0aW9uX2lkKSB7XG4gICAgICAgICAgICAkc2NvcGUubG9jYXRpb25zID0gXy5maWx0ZXIoYWxsTG9jYXRpb25zLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb24uYXJlYS5hcmVhX2lkID09IGFyZWFfaWQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gXy5maW5kKGFsbExvY2F0aW9ucywgZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmFyZWEuYXJlYV9pZCA9PSAkc2NvcGUuYXJlYV9pZDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZihsb2NhdGlvbl9pZCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFzc2V0LmxvY2F0aW9uX2lkID0gbG9jYXRpb25faWQ7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hc3NldC5sb2NhdGlvbl9pZCA9IGxvY2F0aW9uLmxvY2F0aW9uX2lkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hc3NldC5sb2NhdGlvbl9pZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnYXNzZXQuYXJlYV9pZCcsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAmJiBuZXdWYWx1ZSAhPSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlZnJlc2hMb2NhdGlvbnMobmV3VmFsdWUsICRzY29wZS5hc3NldC5sb2NhdGlvbl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19BU1NFVFwiKTtcbiAgICAgICAgICAgICAgICBBc3NldFNlcnZpY2UuZmV0Y2goaWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hc3NldCA9IGRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5hc3NldC5hc3NldF90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFzc2V0LmFzc2V0X3R5cGVfaWQgPSBkYXRhLmFzc2V0X3R5cGUuYXNzZXRfdHlwZV9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLmFzc2V0LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFzc2V0LmFyZWFfaWQgPSBkYXRhLmxvY2F0aW9uLmFyZWEuYXJlYV9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXNzZXQubG9jYXRpb25faWQgPSBkYXRhLmxvY2F0aW9uLmxvY2F0aW9uX2lkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaExvY2F0aW9ucygkc2NvcGUuYXNzZXQuYXJlYV9pZCwgJHNjb3BlLmFzc2V0LmxvY2F0aW9uX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiVVBEQVRFX0FTU0VUXCIpO1xuICAgICAgICAgICAgICAgIEFzc2V0U2VydmljZS51cGRhdGUoaWQsICRzY29wZS5hc3NldC5hc3NldF9uYW1lLCAkc2NvcGUuYXNzZXQuYXNzZXRfdHlwZV9pZCwgJHNjb3BlLmFzc2V0LmxvY2F0aW9uX2lkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImFzc2V0X3VwZGF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQXNzZXRMaXN0Q3RybCcsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJHJvb3RTY29wZScsICckdGltZW91dCcsICckbG9nJywgJyRzdGF0ZVBhcmFtcycsICckaW50ZXJjb20nLCAnQXNzZXRTZXJ2aWNlJywgJ2N1cnJlbnRVc2VyJywgJ2dyb3dsJywgJyR1aW1vZGFsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgQXNzZXRTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsICRtb2RhbCkge1xuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDIwLFxuICAgICAgICAgICAgdG90YWxJdGVtczogMCxcbiAgICAgICAgICAgIHRvdGFsUGFnZXM6IDAsXG4gICAgICAgICAgICBwcmVkaWNhdGU6ICdhc3NldF9uYW1lJyxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuXG4gICAgICAgICAgICBzZXRQYWdlOiBmdW5jdGlvbiAocGFnZU51bSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmN1cnJlbnRQYWdlID0gcGFnZU51bTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyA9ICRzY29wZS5saXN0LmZpbHRlcmVkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzb3J0X2J5OiBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJldmVyc2UgPSAhJHNjb3BlLmxpc3QucmV2ZXJzZTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ2ZldGNoaW5nIGl0ZW1zLi4uJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19BU1NFVFwiKTtcbiAgICAgICAgICAgICAgICBBc3NldFNlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgJycsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0Lml0ZW1zID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LnRvdGFsSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19BU1NFVFwiKTtcblxuICAgICAgICAgICAgICAgIEFzc2V0U2VydmljZS5mZXRjaEFsbCgkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UsICRzY29wZS5saXN0LmN1cnJlbnRQYWdlLCB0ZXh0LCAkc2NvcGUubGlzdC5wcmVkaWNhdGUsICRzY29wZS5saXN0LnJldmVyc2UpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pdGVtcyA9IGRhdGEucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC50b3RhbEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYXJjaGl2ZTogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlbW92aW5nXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL2Fzc2V0cy90ZW1wbGF0ZXMvY29uZmlybS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgQXNzZXRTZXJ2aWNlLnJlbW92ZShpZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5pdGVtc1BlclBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0LmN1cnJlbnRQYWdlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHZhciBmaWx0ZXJUZXh0VGltZW91dDtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ3NlYXJjaCcsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJUZXh0VGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGZpbHRlclRleHRUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclRleHRUaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ2YWx1ZSBjaGFuZ2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3Quc2VhcmNoKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7IC8vIGRlbGF5IDI1MCBtc1xuXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ0Fzc2V0VHlwZVNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJyR3aW5kb3cnLCAnJGludGVyY29tJywgJyRsb2cnLCAnTFMnLCAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkd2luZG93LCAkaW50ZXJjb20sICRsb2csIExTLCBDT05GSUcsIEFwaVNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIGZldGNoQWxsOiBmdW5jdGlvbiAoY2h1bmssIHBhZ2UsIHRleHQsIHByZWRpY2F0ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlIHx8ICdhc3NldF90eXBlX25hbWUnO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvdHlwZXMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaDp0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5OnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbj8nZGVzYyc6J2FzYydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAoaWQsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnYXNzZXRfdHlwZV9uYW1lJzogbmFtZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5wdXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXNzZXRzL3R5cGVzLycgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2Fzc2V0X3R5cGVfbmFtZSc6IG5hbWVcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvdHlwZXMvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvdHlwZXMvJyArIGlkICsgJy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLmRlbGV0ZShBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvdHlwZXMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1dKTtcblxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwLnNlcnZpY2VzJylcbiAgICAuc2VydmljZSgnQXNzZXRTZXJ2aWNlJywgWyckaHR0cCcsICckcScsICckd2luZG93JywgJyRpbnRlcmNvbScsICckbG9nJywgJ0xTJywgJ0NPTkZJRycsICdBcGlTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgJHdpbmRvdywgJGludGVyY29tLCAkbG9nLCBMUywgQ09ORklHLCBBcGlTZXJ2aWNlKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG4gICAgICAgICAgICBmZXRjaEFsbDogZnVuY3Rpb24gKGNodW5rLCBwYWdlLCB0ZXh0LCBwcmVkaWNhdGUsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZSB8fCAnYXNzZXRfbmFtZSc7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2Fzc2V0cy8nLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuazogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAocGFnZSAtIDEpICogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoOnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfYnk6cHJlZGljYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5X2RpcmVjdGlvbjogZGlyZWN0aW9uPydkZXNjJzonYXNjJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChpZCwgbmFtZSwgYXNzZXRfdHlwZV9pZCwgbG9jYXRpb25faWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnYXNzZXRfbmFtZSc6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdhc3NldF90eXBlX2lkJzogYXNzZXRfdHlwZV9pZCxcbiAgICAgICAgICAgICAgICAgICAgJ2xvY2F0aW9uX2lkJzogbG9jYXRpb25faWRcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2Fzc2V0cy8nICsgaWQgKyAnLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCBhc3NldF90eXBlX2lkLCBhcmVhX2lkLCBsb2NhdGlvbl9pZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnYXNzZXRfbmFtZSc6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICdhc3NldF90eXBlX2lkJzogYXNzZXRfdHlwZV9pZCxcbiAgICAgICAgICAgICAgICAgICAgJ2xvY2F0aW9uX2lkJzogbG9jYXRpb25faWRcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvJyArIGlkICsgJy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpZCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLmRlbGV0ZShBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hc3NldHMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1dKTtcblxuXG4iLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0F1ZGl0TG9nTGlzdEN0cmwnLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRyb290U2NvcGUnLCAnJHRpbWVvdXQnLCAnJGxvZycsICckc3RhdGVQYXJhbXMnLCAnJGludGVyY29tJywgJ0F1ZGl0TG9nU2VydmljZScsICdjdXJyZW50VXNlcicsICdncm93bCcsICckdWltb2RhbCcsICdEYXRlUmFuZ2VTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgQXVkaXRMb2dTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsICRtb2RhbCwgRGF0ZVJhbmdlU2VydmljZSkge1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICBmdW5jdGlvbiB0b1VUQyh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudC50eih2YWx1ZSwgJ1lZWVktTU0tREQgSEg6bW06c3MnLCB0ei5uYW1lKCkpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdG9Mb2NhbFRpbWUodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHZhbHVlKS50eih0ei5uYW1lKCkpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmxpc3QgPSB7XG4gICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgICBmaWx0ZXJlZDogW10sXG4gICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcbiAgICAgICAgICAgIGl0ZW1zUGVyUGFnZTogMjAsXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiAwLFxuICAgICAgICAgICAgdG90YWxQYWdlczogMCxcbiAgICAgICAgICAgIHByZWRpY2F0ZTogJ2R0X2FkZGVkJyxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgZGF0ZUZyb206IG1vbWVudChEYXRlUmFuZ2VTZXJ2aWNlLnJhbmdlLmRhdGVGcm9tKS5mb3JtYXQoJ1lZWVktTU0tREQnKSxcbiAgICAgICAgICAgIGRhdGVUbzogbW9tZW50KERhdGVSYW5nZVNlcnZpY2UucmFuZ2UuZGF0ZVRvKS5mb3JtYXQoJ1lZWVktTU0tREQnKSxcblxuICAgICAgICAgICAgc2V0UGFnZTogZnVuY3Rpb24gKHBhZ2VOdW0pIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSA9IHBhZ2VOdW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgPSAkc2NvcGUubGlzdC5maWx0ZXJlZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc29ydF9ieTogZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5yZXZlcnNlID0gISRzY29wZS5saXN0LnJldmVyc2U7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdmZXRjaGluZyBpdGVtcy4uLicpO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfQVJFQVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdGFydF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LmRhdGVGcm9tKS5mb3JtYXQoJ1lZWVktTU0tREQgMDA6MDA6MDAnKSk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LmRhdGVUbykuZm9ybWF0KCdZWVlZLU1NLUREIDIzOjU5OjU5JykpO1xuXG4gICAgICAgICAgICAgICAgQXVkaXRMb2dTZXJ2aWNlLmZldGNoQWxsKCRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSwgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UsICcnLCAkc2NvcGUubGlzdC5wcmVkaWNhdGUsICRzY29wZS5saXN0LnJldmVyc2UsIHN0YXJ0X3RpbWUsIGVuZF90aW1lKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuaXRlbXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlYXJjaDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX0FSRUFcIik7XG5cbiAgICAgICAgICAgICAgICBBdWRpdExvZ1NlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgdGV4dCwgJHNjb3BlLmxpc3QucHJlZGljYXRlLCAkc2NvcGUubGlzdC5yZXZlcnNlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuaXRlbXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFyY2hpdmU6IGZ1bmN0aW9uKGFyZWFJZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZpbmdcIik7XG5cbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvYXJlYXMvdGVtcGxhdGVzL2NvbmZpcm0uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIEF1ZGl0TG9nU2VydmljZS5yZW1vdmUoYXJlYUlkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0LmRhdGVGcm9tJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuZGF0ZVRvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuaXRlbXNQZXJQYWdlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5jdXJyZW50UGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgZmlsdGVyVGV4dFRpbWVvdXQ7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdzZWFyY2gnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVGV4dFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChmaWx0ZXJUZXh0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmFsdWUgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNlYXJjaChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOyAvLyBkZWxheSAyNTAgbXNcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAuc2VydmljZXMnKVxuICAgIC5zZXJ2aWNlKCdBdWRpdExvZ1NlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJyR3aW5kb3cnLCAnJGludGVyY29tJywgJyRsb2cnLCAnTFMnLCAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkd2luZG93LCAkaW50ZXJjb20sICRsb2csIExTLCBDT05GSUcsIEFwaVNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIGZldGNoQWxsOiBmdW5jdGlvbiAoY2h1bmssIHBhZ2UsIHRleHQsIHByZWRpY2F0ZSwgZGlyZWN0aW9uLCBkYXRlX2Zyb20sIGRhdGVfdG8pIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUgfHwgJ2R0X2FkZGVkJztcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvY29udHJvbGxlZF9zdWJzdGFuY2VzL2F1ZGl0bG9nLycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IChwYWdlIC0gMSkgKiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2g6IHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfYnk6IHByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbiA/ICdkZXNjJyA6ICdhc2MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfZnJvbTogZGF0ZV9mcm9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfdG86IGRhdGVfdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLy91cGRhdGU6IGZ1bmN0aW9uIChpZCwgbmFtZSkge1xuICAgICAgICAgICAgLy8gICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAvLyAgICAgICAgJ2FyZWFfbmFtZSc6IG5hbWVcbiAgICAgICAgICAgIC8vICAgIH07XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2FyZWFzLycgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgLy8gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIC8vICAgICAgICB9KVxuICAgICAgICAgICAgLy8gICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgLy8gICAgICAgIH0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICAvL30sXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy9hZGQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAvLyAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAvLyAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgLy8gICAgICAgICdhcmVhX25hbWUnOiBuYW1lXG4gICAgICAgICAgICAvLyAgICB9O1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXJlYXMvJywgcGFyYW1zKVxuICAgICAgICAgICAgLy8gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgIC8vICAgICAgICB9KVxuICAgICAgICAgICAgLy8gICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgLy8gICAgICAgIH0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICAvL30sXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgLy8gICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hcmVhcy8nICsgaWQgKyAnLycpXG4gICAgICAgICAgICAvLyAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vICAgICAgICB9KVxuICAgICAgICAgICAgLy8gICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgLy8gICAgICAgIH0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICAvL30sXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy9yZW1vdmU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgLy8gICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAvLyAgICB9O1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgICRodHRwLmRlbGV0ZShBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hcmVhcy8nICsgaWQgKyAnLycsIHBhcmFtcylcbiAgICAgICAgICAgIC8vICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAvLyAgICAgICAgfSlcbiAgICAgICAgICAgIC8vICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgIC8vICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgLy99XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfV0pO1xuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0F1dGhDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckdGltZW91dCcsICckcm9vdFNjb3BlJywgJyRsb2cnLCAnVXNlclNlcnZpY2UnLCAnTFMnLCAnQ09ORklHJywgJyRodHRwJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHRpbWVvdXQsICRyb290U2NvcGUsICRsb2csIFVzZXJTZXJ2aWNlLCBMUywgQ09ORklHLCAkaHR0cCwgQXBpU2VydmljZSkge1xuXG4gICAgICAgICRzY29wZS5mb3JtID0ge1xuICAgICAgICAgICAgZXJyb3JzOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIEVOVl9NQVBQSU5HID0ge1xuICAgICAgICAgICAgJ1gnOiAnLScsXG4gICAgICAgICAgICAnWSc6ICctZGV2LScsXG4gICAgICAgICAgICAnWic6ICctc3RhZ2luZy0nXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIENPVU5UUllfTUFQUElORyA9IHtcbiAgICAgICAgICAgIDE6ICd1cycsXG4gICAgICAgICAgICAyOiAnYXUnLFxuICAgICAgICAgICAgMzogJ2NhJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkbG9jYXRpb24ucGF0aCgpLnNwbGl0KCcvJylbMl0gPT0gXCJyZXNldFwiKSB7XG4gICAgICAgICAgICB2YXIgdG9rZW4gPSAkbG9jYXRpb24uc2VhcmNoKCkudG9rZW47XG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdmFyIHNlcnZlcl9pZCA9IHRva2VuLnNwbGl0KCctJylbM107XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVpZCA9IHRva2VuLnNwbGl0KCctJylbMF07XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRva2VuID0gdG9rZW4uc3BsaXQoJy0nKVsxXSArIFwiLVwiICsgdG9rZW4uc3BsaXQoJy0nKVsyXTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudXJsID0gXCJodHRwczovL2FwaVwiICsgRU5WX01BUFBJTkdbc2VydmVyX2lkWzBdXSArIENPVU5UUllfTUFQUElOR1tzZXJ2ZXJfaWRbMV1dICsgXCIubWVkaWM1Mi5jb20vcmVzZXQvXCIgKyAkc2NvcGUudWlkICsgXCIvXCIgKyAkc2NvcGUudG9rZW4gKyBcIi9cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2xvZ2luJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbWFpbCA9ICcnO1xuICAgICAgICAgICAgdmFyIHJlbWVtYmVyX21lID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChMUy5nZXQoJ3JlbWVtYmVyX21lJykgPT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgZW1haWwgPSBMUy5nZXQoJ3VzZXJfZW1haWwnKTtcbiAgICAgICAgICAgICAgICByZW1lbWJlcl9tZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS51c2VyID0ge1xuICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogJycsXG4gICAgICAgICAgICAgICAgcmVtZW1iZXJfbWU6IHJlbWVtYmVyX21lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChVc2VyU2VydmljZS5pc19hdXRoZW50aWNhdGVkKSB7XG5cbiAgICAgICAgICAgICAgICAvL1RyYW5zaXRpb24gdG8gTGlzdCBpbmNpZGVudCBpZiBwYXRyb2xsZXIgZWxzZSBnbyB0byBtYXBcbiAgICAgICAgICAgICAgICBpZiAoVXNlclNlcnZpY2UuY3VycmVudFJvbGUoKSA9PSBcIlBhdHJvbGxlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2luY2lkZW50cycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnbWFwJyk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBMUy5zZXQoJ3JlbWVtYmVyX21lJywgJHNjb3BlLnVzZXIucmVtZW1iZXJfbWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS51c2VyLnJlbWVtYmVyX21lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1c2VyX2VtYWlsJywgJHNjb3BlLnVzZXIuZW1haWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1c2VyX2VtYWlsJywgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmRpc2NvdmVyKCRzY29wZS51c2VyLmVtYWlsKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2UubG9naW4oJHNjb3BlLnVzZXIuZW1haWwsICRzY29wZS51c2VyLnBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogQXBpU2VydmljZS5sYXJhdmVsKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcvbGFyYWNvcnM/YXV0aG9yaXphdGlvbj0nICsgZGF0YS51c2VyLnRva2VuICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJnRva2VuPScgKyBMUy5nZXQoJ3Rva2VuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogZGF0YS51c2VyLnRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBMUy5nZXQoJ3Rva2VuJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEudXNlci5yb2xlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RyYW5zaXRpb24gdG8gTGlzdCBpbmNpZGVudCBpZiBwYXRyb2xsZXIgZWxzZSBnbyB0byBtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudXNlci5yb2xlID09IFwiUGF0cm9sbGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2luY2lkZW50cycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnbWFwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybS5lcnJvcnMgPSBlcnJvci5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zaG93X2ZvcmdvdF9wYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ3Bhc3N3b3JkX2ZvcmdvdCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZW5kX3Jlc2V0X3Bhc3N3b3JkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnVzZXIuZW1haWwpIHtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5mb3Jnb3RQYXNzd29yZCgkc2NvcGUudXNlci5lbWFpbClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybS5zdWNjZXNzID0gZGF0YS5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzdGF0ZS50cmFuc2l0aW9uVG8oJ2xvZ2luJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm0uZXJyb3JzID0gZXJyb3IuZGV0YWlsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICgkc2NvcGUucGFzc3dvcmQxICE9ICRzY29wZS5wYXNzd29yZDIpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IFwiUGFzc3dvcmQgYW5kIHJlcGVhdCBwYXNzd29yZCBkbyBub3QgbWF0Y2hcIjtcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQxID0gXCJcIjtcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQyID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJHNjb3BlLnVybCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogJC5wYXJhbSh7XCJuZXdfcGFzc3dvcmQxXCI6ICRzY29wZS5wYXNzd29yZDEsIFwibmV3X3Bhc3N3b3JkMlwiOiAkc2NvcGUucGFzc3dvcmQyfSksICAvLyBwYXNzIGluIGRhdGEgYXMgc3RyaW5nc1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnfSAgLy8gc2V0IHRoZSBoZWFkZXJzIHNvIGFuZ3VsYXIgcGFzc2luZyBpbmZvIGFzIGZvcm0gZGF0YSAobm90IHJlcXVlc3QgcGF5bG9hZClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBcIlBhc3N3b3JkIFJlc2V0IFN1Y2Nlc3NmdWwuIFlvdSBjYW4gbm93IGxvZ2luXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQxID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXNzd29yZDIgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJ2xvZ2luJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gXCJQYXNzd29yZCByZXNldCBsaW5rIGhhcyBleHBpcmVkIChvcikgaW52YWxpZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhc3N3b3JkMSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFzc3dvcmQyID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9XSk7XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignSGVhZGVyQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkbG9nLCAkc2NlLCAkaW50ZXJjb20sIGhvdGtleXMsIFVzZXJTZXJ2aWNlLCBMUywgUmVwb3J0U2VydmljZSkge1xuICAgICAgICAvL3N0YXRlLXRpdGxlIG1hcHBpbmdcblxuICAgICAgICB2YXIgc3RhdGVzID0ge1xuICAgICAgICAgICAgZGFzaGJvYXJkOiAnRGFzaGJvYXJkJyxcblxuICAgICAgICAgICAgbWFwOiAnTWFwJyxcbiAgICAgICAgICAgIGhlYXRtYXA6ICdIZWF0bWFwJyxcbiAgICAgICAgICAgIHBhdHJvbGxlcnNfcmVwb3J0OiAnUGF0cm9sbGVycycsXG4gICAgICAgICAgICBpbmNpZGVudHM6ICdJbmNpZGVudHMnLFxuICAgICAgICAgICAgaW5jaWRlbnRfZWRpdDogJ0luY2lkZW50cycsXG5cbiAgICAgICAgICAgIHVzZXJzOiAnVXNlcnMnLFxuICAgICAgICAgICAgdXNlcl9lZGl0OiAnVXNlcnMnLFxuICAgICAgICAgICAgdXNlcl9hZGQ6ICdVc2VycycsXG4gICAgICAgICAgICByZXBvcnRpbmc6ICdSZXBvcnRzJyxcbiAgICAgICAgICAgIGNoYXJ0czogJ0NoYXJ0cydcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGxhcmF2ZWxIb3N0ID0gTFMuZ2V0KCdMQVJBVkVMX0NPUlMnKTtcbiAgICAgICAgdmFyIGFjY2Vzc190b2tlbiA9IExTLmdldCgnQXV0aG9yaXphdGlvbicpICYmIExTLmdldCgnQXV0aG9yaXphdGlvbicpLnNwbGl0KCcgJykubGVuZ3RoID4gMT9cbiAgICAgICAgICAgIExTLmdldCgnQXV0aG9yaXphdGlvbicpLnNwbGl0KCcgJylbMV0gOiAnJ1xuICAgICAgICB2YXIgcXVlcnkgPSAnP2F1dGhvcml6YXRpb249JyArIExTLmdldCgndG9rZW4nKS5zcGxpdCgnICcpWzFdICsgJyZiZWFyZXI9JyArIGFjY2Vzc190b2tlbjtcbiAgICAgICAgdmFyIGxhcmF2ZWwgPSB7XG4gICAgICAgICAgICBob21lOiBsYXJhdmVsSG9zdCArIHF1ZXJ5LFxuICAgICAgICAgICAgZHVlX3RvZGF5OiBsYXJhdmVsSG9zdCArICcvYXNzZXRzL2R1ZS10b2RheScgKyBxdWVyeSxcbiAgICAgICAgICAgIGFzc2V0czogbGFyYXZlbEhvc3QgKyAnL2Fzc2V0cycgKyBxdWVyeSxcbiAgICAgICAgICAgIGNvbnRyb2xsZWRfc3Vic3RhbmNlczogbGFyYXZlbEhvc3QgKyAnL2NvbnRyb2xsZWQtc3Vic3RhbmNlcycgKyBxdWVyeSxcbiAgICAgICAgICAgIGFyZWFzOiBsYXJhdmVsSG9zdCArICcvYXJlYXMnICsgcXVlcnksXG4gICAgICAgICAgICBsb2NhdGlvbnM6IGxhcmF2ZWxIb3N0ICsgJy9sb2NhdGlvbnMnICsgcXVlcnksXG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5nb1RvID0gZnVuY3Rpb24ocm91dGUpe1xuICAgICAgICAgICAgY29uc29sZS5sb2cobGFyYXZlbFtyb3V0ZV0pO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gbGFyYXZlbFtyb3V0ZV07XG4gICAgICAgIH07XG4vLyAgICAgICAgJHNjb3BlLiR3YXRjaCgnb25saW5lJywgZnVuY3Rpb24oaXNPbmxpbmUpIHtcbi8vICAgICAgICAgICAgJGxvZy5sb2coaXNPbmxpbmUpO1xuLy9cbi8vICAgICAgICAgICAgaWYoIWlzT25saW5lKXtcbi8vICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ3dlX2FyZV90cnlpbmdfdG9fY29ubmVjdCcpO1xuLy8gICAgICAgICAgICB9XG4vLyAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLnBhZ2VfdGl0bGUgPSBzdGF0ZXNbJHN0YXRlLmN1cnJlbnQubmFtZV07XG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IFVzZXJTZXJ2aWNlLmN1cnJlbnRVc2VyKCk7XG4gICAgICAgICRzY29wZS5yb2xlcyA9IFsnJywgJ1BhdHJvbGxlcicsICdEaXNwYXRjaGVyJywgJ01hbmFnZXInXTtcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyLnJvbGUgPSAkc2NvcGUucm9sZXNbJHNjb3BlLmN1cnJlbnRVc2VyLnJvbGVfaWRbMF0udmFsdWVdO1xuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIucm9sZV9pZC5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5LnZhbHVlID09IDMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIuaXNNYW5hZ2VyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLnJlc29ydF9sb2dvID0gJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwoJHNjb3BlLmN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X2xvZ28pO1xuLy8gICAgICAgICRsb2cubG9nKGN1cnJlbnRVc2VyKTtcblxuICAgICAgICAkc2NvcGUubWVudSA9IFtcbi8vICAgICAgICAgICAge1xuLy8gICAgICAgICAgICAgICAgJ3RpdGxlJzogJ0hvbWUnLFxuLy8gICAgICAgICAgICAgICAgJ2xpbmsnOiAnLydcbi8vICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgICRzY29wZS5pc0NvbGxhcHNlZCA9IHRydWU7XG5cbiAgICAgICAgJHNjb3BlLmlzQWN0aXZlID0gZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91dGUgPT09ICRsb2NhdGlvbi5wYXRoKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmlzRGVza3RvcCA9ICh3aW5kb3cuc2NyZWVuLndpZHRoID49IDk5MiApO1xuICAgICAgICAkc2NvcGUuaXNQaG9uZSA9ICh3aW5kb3cuc2NyZWVuLndpZHRoIDw9IDk5Mik7XG5cbiAgICAgICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRpbnRlcmNvbS5zaHV0ZG93bigpO1xuICAgICAgICAgICAgVXNlclNlcnZpY2UubG9nb3V0KDApXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgTFMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnbG9naW4nKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgJGludGVyY29tLmJvb3Qoe1xuICAgICAgICAgICAgZW1haWw6ICRzY29wZS5jdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6ICRzY29wZS5jdXJyZW50VXNlci5uYW1lLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHVzZXJfaWQ6ICRzY29wZS5jdXJyZW50VXNlci51c2VyX2lkLFxuICAgICAgICAgICAgY29tcGFueToge1xuICAgICAgICAgICAgICAgIGlkOiAkc2NvcGUuY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X25hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb2xlOiAkc2NvcGUuY3VycmVudFVzZXIucm9sZV9pZFswXS5rZXksXG4gICAgICAgICAgICBjdXN0b21fbGF1bmNoZXJfc2VsZWN0b3I6IFwiLmludGVyY29tLWljb25cIlxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuaW50ZXJjb21fdG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJGludGVyY29tLnNob3coKTtcbi8vICAgICAgICAgICAgIGlmICgkc2NvcGUuaW50ZXJjb21fb3BlbiA9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmludGVyY29tX29wZW4gPT0gbnVsbCB8fCAhJHNjb3BlLmludGVyY29tX29wZW4pIHtcbi8vXG4vLyAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICRpbnRlcmNvbS5oaWRlKCk7XG4vLyAgICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbigncmVwb3J0cy11cGRhdGVkJywgZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XG4gICAgICAgICAgICBnZXRSZXBvcnRzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdldFJlcG9ydHMoKTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRSZXBvcnRzKCkge1xuICAgICAgICAgICAgUmVwb3J0U2VydmljZS5mZXRjaEFsbCgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0cyA9IF8uZmlsdGVyKGRhdGEucmVzdWx0cywgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnR5cGUgPT0gbnVsbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hhcnRzID0gXy5maWx0ZXIoZGF0YS5yZXN1bHRzLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQudHlwZSAhPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ0FwaVNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJyR3aW5kb3cnLCAnJGxvZycsICdMUycsICdDT05GSUcnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkd2luZG93LCAkbG9nLCBMUywgQ09ORklHKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG5cbiAgICAgICAgICAgIGJhc2U6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHZhciBhcGlfYmFzZSA9IExTLmdldCgnQVBJJywgJycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFhcGlfYmFzZSkge1xuICAgICAgICAgICAgICAgICAgICBhcGlfYmFzZSA9IENPTkZJRy5CQVNFX1VSTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9iYXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhcmF2ZWw6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGxhcmF2ZWxfYmFzZSA9IExTLmdldCgnTEFSQVZFTF9DT1JTJywgJycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxhcmF2ZWxfYmFzZSA9PSBudWxsIHx8IGxhcmF2ZWxfYmFzZSA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBsYXJhdmVsX2Jhc2UgPSBDT05GSUcuTEFSQVZFTF9VUkw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhcmF2ZWxfYmFzZTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfV0pO1xuXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAuc2VydmljZXMnKVxuICAgIC5zZXJ2aWNlKCdEYXRlUmFuZ2VTZXJ2aWNlJywgWyckaHR0cCcsICckcScsICdVc2VyU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsIFVzZXJTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICB2YXIgZGF0ZXRpbWVfZm9ybWF0ID0gVXNlclNlcnZpY2UuY3VycmVudFVzZXIoKS5yZXNvcnRzWzBdLmRhdGV0aW1lX2Zvcm1hdC5rZXk7XG5cbiAgICAgICAgZnVuY3Rpb24gdG9VVEModmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudHoodmFsdWUsIGRhdGV0aW1lX2Zvcm1hdCwgdHoubmFtZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvTG9jYWxUaW1lKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50LnV0Yyh2YWx1ZSkudHoodHoubmFtZSgpKS5mb3JtYXQoZGF0ZXRpbWVfZm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWZmID0gbmV3IERhdGUoY3VycmVudC5nZXRUaW1lKCkgLSAoNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcblxuICAgICAgICB2YXIgc3RhcnQgPSBtb21lbnQoZGlmZik7IC8vICsgJ1QwMDowMDowMC4wMDBaJztcbiAgICAgICAgdmFyIGVuZCA9IG1vbWVudChjdXJyZW50KTsvLy50eih0ei5uYW1lKCkpLmZvcm1hdCgnWVlZWS1NTS1ERCcpKyAnVDIzOjU5OjU5Ljk5OVonO1xuXG4gICAgICAgIHZhciByYW5nZSA9IHtcbiAgICAgICAgICAgIGRhdGVGcm9tOiBzdGFydCxcbiAgICAgICAgICAgIGRhdGVUbzogZW5kXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG5cbiAgICAgICAgICAgIHNldFN0YXJ0OiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlLmRhdGVGcm9tID0gZGF0ZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNldEVuZDogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICByYW5nZS5kYXRlVG8gPSBkYXRlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0U3RhcnQ6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlLmRhdGVGcm9tO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0RW5kOiBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZS5kYXRlVG87XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByYW5nZTogcmFuZ2VcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICB9XSk7XG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KCdsYW5nTG9hZGVyJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgQXBpU2VydmljZSwgQ09ORklHLCBMUykge1xuICAgIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgIHZhciBkYXRhID0gTFMuZ2V0KG9wdGlvbnMua2V5LCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgTFMuc2V0KG9wdGlvbnMua2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvbGFuZ3VhZ2UvJywge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBsYW5nOiBvcHRpb25zLmtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgTFMuc2V0KG9wdGlvbnMua2V5LCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChvcHRpb25zLmtleSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5mYWN0b3J5KFwiTFNcIiwgZnVuY3Rpb24gKCR3aW5kb3csICRyb290U2NvcGUpIHtcbiAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ3N0b3JhZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ3VzZScpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UgJiYgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UgJiYgJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0NvbnRyb2xsZWRTdWJzdGFuY2VBZGRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgQ29udHJvbGxlZFN1YnN0YW5jZVNlcnZpY2UsIGN1cnJlbnRVc2VyLCBncm93bCkge1xuICAgICAgICAkc2NvcGUuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkFERF9DT05UUk9MTEVEX1NVQlNUQU5DRVwiKTtcblxuICAgICAgICAgICAgQ29udHJvbGxlZFN1YnN0YW5jZVNlcnZpY2UuYWRkKCRzY29wZS5jb250cm9sbGVkX3N1YnN0YW5jZV9uYW1lLCAkc2NvcGUudW5pdHMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImNvbnRyb2xsZWRfc3Vic3RhbmNlX2NyZWF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oXCJjb250cm9sbGVkX3N1YnN0YW5jZXNcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgJHNjb3BlLmVycm9yID0gZXJyb3IuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL2FuZ3VsYXIuZm9yRWFjaChlcnJvciwgZnVuY3Rpb24gKGVycm9ycywgZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgaWYgKGZpZWxkID09ICdub25fZmllbGRfZXJyb3JzJykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgLy8gR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIC8vRmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJHNldFZhbGlkaXR5KCdiYWNrZW5kJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZXJyb3JzW2ZpZWxkXSA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0NvbnRyb2xsZWRTdWJzdGFuY2VFZGl0Q3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIENvbnRyb2xsZWRTdWJzdGFuY2VTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wpIHtcbiAgICAgICAgdmFyIGlkID0gJHN0YXRlUGFyYW1zLmNvbnRyb2xsZWRTdWJzdGFuY2VJZDtcblxuICAgICAgICAkc2NvcGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfQ09OVFJPTExFRF9TVUJTVEFOQ0VcIik7XG5cbiAgICAgICAgICAgICAgICBDb250cm9sbGVkU3Vic3RhbmNlU2VydmljZS5mZXRjaChpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiVVBEQVRFX0NPTlRST0xMRURfU1VCU1RBTkNFXCIpO1xuICAgICAgICAgICAgICAgIENvbnRyb2xsZWRTdWJzdGFuY2VTZXJ2aWNlLnVwZGF0ZShcbiAgICAgICAgICAgICAgICAgICAgaWQsICRzY29wZS5jb250cm9sbGVkX3N1YnN0YW5jZS5jb250cm9sbGVkX3N1YnN0YW5jZV9uYW1lLCAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2UudW5pdHMpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImNvbnRyb2xsZWRfc3Vic3RhbmNlX3VwZGF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQ29udHJvbGxlZFN1YnN0YW5jZUxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRsb2cnLCAnJHN0YXRlUGFyYW1zJywgJyRpbnRlcmNvbScsICdDb250cm9sbGVkU3Vic3RhbmNlU2VydmljZScsICdjdXJyZW50VXNlcicsICdncm93bCcsICckdWltb2RhbCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIENvbnRyb2xsZWRTdWJzdGFuY2VTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsICRtb2RhbCkge1xuXG5cblxuICAgICAgICAkc2NvcGUubGlzdCA9IHtcbiAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgIGZpbHRlcmVkOiBbXSxcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgICAgICAgICAgaXRlbXNQZXJQYWdlOiAyMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDAsXG4gICAgICAgICAgICB0b3RhbFBhZ2VzOiAwLFxuICAgICAgICAgICAgcHJlZGljYXRlOiAnY29udHJvbGxlZF9zdWJzdGFuY2VfbmFtZScsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcblxuICAgICAgICAgICAgc2V0UGFnZTogZnVuY3Rpb24gKHBhZ2VOdW0pIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSA9IHBhZ2VOdW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgPSAkc2NvcGUubGlzdC5maWx0ZXJlZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc29ydF9ieTogZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5yZXZlcnNlID0gISRzY29wZS5saXN0LnJldmVyc2U7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdmZXRjaGluZyBpdGVtcy4uLicpO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfQ09OVFJPTExFRF9TVUJTVEFOQ0VcIik7XG4gICAgICAgICAgICAgICAgQ29udHJvbGxlZFN1YnN0YW5jZVNlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgJycsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0Lml0ZW1zID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LnRvdGFsSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19DT05UUk9MTEVEX1NVQlNUQU5DRVwiKTtcblxuICAgICAgICAgICAgICAgIENvbnRyb2xsZWRTdWJzdGFuY2VTZXJ2aWNlLmZldGNoQWxsKCRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSwgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UsIHRleHQsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0Lml0ZW1zID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LnRvdGFsSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhcmNoaXZlOiBmdW5jdGlvbihjb250cm9sbGVkX3N1YnN0YW5jZV9pZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZpbmdcIik7XG5cbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvY29udHJvbGxlZF9zdWJzdGFuY2VzL3RlbXBsYXRlcy9jb25maXJtLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBDb250cm9sbGVkU3Vic3RhbmNlU2VydmljZS5yZW1vdmUoY29udHJvbGxlZF9zdWJzdGFuY2VfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuaXRlbXNQZXJQYWdlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5jdXJyZW50UGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgZmlsdGVyVGV4dFRpbWVvdXQ7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdzZWFyY2gnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVGV4dFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChmaWx0ZXJUZXh0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmFsdWUgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNlYXJjaChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOyAvLyBkZWxheSAyNTAgbXNcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAuc2VydmljZXMnKVxuICAgIC5zZXJ2aWNlKCdDb250cm9sbGVkU3Vic3RhbmNlU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCAnJHdpbmRvdycsICckaW50ZXJjb20nLCAnJGxvZycsICdMUycsICdDT05GSUcnLCAnQXBpU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICR3aW5kb3csICRpbnRlcmNvbSwgJGxvZywgTFMsIENPTkZJRywgQXBpU2VydmljZSkge1xuXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgZmV0Y2hBbGw6IGZ1bmN0aW9uIChjaHVuaywgcGFnZSwgdGV4dCwgcHJlZGljYXRlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUgfHwgJ2NvbnRyb2xsZWRfc3Vic3RhbmNlX25hbWUnO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9jb250cm9sbGVkX3N1YnN0YW5jZXMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaDp0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5OnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbj8nZGVzYyc6J2FzYydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9jb250cm9sbGVkX3N1YnN0YW5jZXMvJyArIGlkICsgJy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChuYW1lLCB1bml0cykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnY29udHJvbGxlZF9zdWJzdGFuY2VfbmFtZSc6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICd1bml0cyc6IHVuaXRzXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvY29udHJvbGxlZF9zdWJzdGFuY2VzLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChpZCwgbmFtZSwgdW5pdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnY29udHJvbGxlZF9zdWJzdGFuY2VfbmFtZSc6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICd1bml0cyc6IHVuaXRzXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLnB1dChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9jb250cm9sbGVkX3N1YnN0YW5jZXMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvY29udHJvbGxlZF9zdWJzdGFuY2VzLycgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICB9XSk7XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQ29uZmlybU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcblxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgIH07XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0luY2lkZW50VXBkYXRlQ3RybCcsXG4gICAgWyckc2NvcGUnLFxuICAgICAgICAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRzdGF0ZVBhcmFtcycsICckbG9nJywgJyRmaWx0ZXInLCAnSW5jaWRlbnRTZXJ2aWNlJyxcbiAgICAgICAgJ3F1ZXN0aW9ucycsICdncm93bCcsICdVcGxvYWRTZXJ2aWNlJywgJyRodHRwJywgJyR0cmFuc2xhdGUnLCAnJGludGVyY29tJywgJ2N1cnJlbnRVc2VyJywgJyRzY2UnLFxuICAgICAgICAnQXBpU2VydmljZScsICdDT05GSUcnLCAnTFMnLCAnJHVpbW9kYWwnLFxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRzdGF0ZVBhcmFtcywgJGxvZywgJGZpbHRlciwgSW5jaWRlbnRTZXJ2aWNlLCBxdWVzdGlvbnMsIGdyb3dsLCBVcGxvYWRTZXJ2aWNlLCAkaHR0cCwgJHRyYW5zbGF0ZSwgJGludGVyY29tLCBjdXJyZW50VXNlciwgJHNjZSwgQXBpU2VydmljZSwgQ09ORklHLCBMUywgJG1vZGFsKSB7XG5cbiAgICAgICAgICAgIGpRdWVyeSgnOmlucHV0W3R5cGU9bnVtYmVyXScpLm9uKCdtb3VzZXdoZWVsJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogY3VycmVudFVzZXIuZW1haWwsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIubmFtZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHVzZXJfaWQ6IGN1cnJlbnRVc2VyLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgY29tcGFueToge1xuICAgICAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X25hbWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgICAgIGRhc2hib2FyZF9mZWF0dXJlX2xhc3RfdXNlZDogXCJJbmNpZGVudHNcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBpZCA9ICRzdGF0ZVBhcmFtcy5pbmNpZGVudElkO1xuICAgICAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICAgICAgdmFyIGRhdGV0aW1lRm9ybWF0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXS5kYXRldGltZV9mb3JtYXQua2V5O1xuICAgICAgICAgICAgJHNjb3BlLmRhdGV0aW1lRm9ybWF0ID0gZGF0ZXRpbWVGb3JtYXQ7XG4gICAgICAgICAgICBMUy5zZXQoJ2RhdGV0aW1lRm9ybWF0JywgZGF0ZXRpbWVGb3JtYXQpO1xuICAgICAgICAgICAgdmFyIGRhdGVGb3JtYXQgPSBkYXRldGltZUZvcm1hdC5zbGljZSgwLDEwKTtcblxuICAgICAgICAgICAgJHNjb3BlLm1vZGVsID0geydkYXRlVGltZUZvcm1hdCc6IGRhdGV0aW1lRm9ybWF0fTtcbiAgICAgICAgICAgICRzY29wZS51c2VyUm9sZSA9IGN1cnJlbnRVc2VyLnJvbGU7XG4gICAgICAgICAgICAkc2NvcGUudXNlckNvbm5lY3RlZCA9IGN1cnJlbnRVc2VyLnVzZXJfY29ubmVjdGVkLmtleTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0RGlydHkoKSB7XG4gICAgICAgICAgICAgICAgLy8kc2NvcGUuY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0Q2xlYW4oKSB7XG4gICAgICAgICAgICAgICAgLy8kc2NvcGUuY2xlYW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICRzY29wZS5vcmlnID0gYW5ndWxhci5jb3B5KCRzY29wZS5tb2RlbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRGlydHkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5vcmlnKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUubW9kZWwpO1xuICAgICAgICAgICAgICAgIHJlbW92ZU51bGxzKG9yaWdDb3B5KTtcbiAgICAgICAgICAgICAgICByZW1vdmVOdWxscyhuZXdDb3B5KTtcblxuICAgICAgICAgICAgICAgIHZhciBkaWZmZXJlbmNlID0gZGlmZi5nZXREaWZmKG9yaWdDb3B5LCBuZXdDb3B5KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAhXy5pc0VtcHR5KGRpZmZlcmVuY2UpO1xuXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gIWFuZ3VsYXIuZXF1YWxzKG9yaWdDb3B5LCBuZXdDb3B5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy92YXIgcXVlc3Rpb25zID0gUXVlc3Rpb25TZXJ2aWNlLmZldGNoKCk7XG5cbiAgICAgICAgICAgIC8vIFBhc3MgdGhpcyBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBpbWFnZW1vZGFsIGFuZFxuICAgICAgICAgICAgLy8gZmlsZSBwbHVnaW4gdG8gcGVyZm9ybSB1cGxvYWQgZnVuY3Rpb24uXG4gICAgICAgICAgICB2YXIgdXBsb2FkRm4gPSBmdW5jdGlvbiAoZm9ybURhdGEsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVXBsb2FkU2VydmljZS51cGxvYWQoaWQsIGZvcm1EYXRhLCB0eXBlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvVVRDKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudC50eih2YWx1ZSwgdHoubmFtZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0RGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQodmFsdWUpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB0b0xvY2FsVGltZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHZhbHVlLCAnWVlZWS1NTS1ERCBISDptbTpzcycpLnR6KHR6Lm5hbWUoKSkudG9EYXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvTG9jYWxEYXRlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudCh2YWx1ZSwgJ1lZWVktTU0tREQnKS50b0RhdGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLnByaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdwcmludGluZyBpbmNpZGVudCAnICsgaWQpO1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ1BSSU5USU5HJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaWQgIT09IG51bGwgfHwgaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvaW5jaWRlbnRzLycgKyBpZCArICcvcHJpbnQvP3RpbWVzdGFtcD0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCksIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdXRob3JpemF0aW9uID0gTFMuZ2V0KCdBdXRob3JpemF0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IExTLmdldCgndG9rZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIGF1dGhvcml6YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcigndG9rZW4nLCB0b2tlbik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQXNrIGZvciB0aGUgcmVzdWx0IGFzIGFuIEFycmF5QnVmZmVyLlxuICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuXG4gICAgICAgICAgICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT2J0YWluIGEgYmxvYjogVVJMIGZvciB0aGUgaW1hZ2UgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2FycmF5QnVmZmVyVmlld10sIHt0eXBlOiAnYXBwbGljYXRpb24vcGRmJ30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybENyZWF0b3IgPSB3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkw7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVVSTCA9IHVybENyZWF0b3IuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVVSTCA9ICRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKGZpbGVVUkwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkZmlsZW5hbWUgPSBpZCArIFwiLnBkZlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gYW5ndWxhci5lbGVtZW50KCc8YS8+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3IuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogZmlsZVVSTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiBkb3dubG9hZGZpbGVuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVswXS5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLnNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyRzY29wZS5tb2RlbCA9IHtcbiAgICAgICAgICAgIC8vICAgIHBob3RvczogW11cbiAgICAgICAgICAgIC8vfTtcblxuICAgICAgICAgICAgLy8gU2NoZW1hIEZvcm0gdHlwZVxuICAgICAgICAgICAgLy8gXCJ0eXBlXCI6IFwic3RyaW5nXCJcdHRleHRcbiAgICAgICAgICAgIC8vIFwidHlwZVwiOiBcIm51bWJlclwiXHRudW1iZXJcbiAgICAgICAgICAgIC8vIFwidHlwZVwiOiBcImludGVnZXJcIlx0bnVtYmVyXG4gICAgICAgICAgICAvLyBcInR5cGVcIjogXCJib29sZWFuXCJcdGNoZWNrYm94XG4gICAgICAgICAgICAvLyBcInR5cGVcIjogXCJvYmplY3RcIlx0ZmllbGRzZXRcbiAgICAgICAgICAgIC8vIFwidHlwZVwiOiBcInN0cmluZ1wiIGFuZCBhIFwiZW51bVwiXHRzZWxlY3RcbiAgICAgICAgICAgIC8vIFwidHlwZVwiOiBcImFycmF5XCIgYW5kIGEgXCJlbnVtXCIgaW4gYXJyYXkgdHlwZVx0Y2hlY2tib3hlc1xuICAgICAgICAgICAgLy8gXCJ0eXBlXCI6IFwiYXJyYXlcIlx0YXJyYXlcblxuICAgICAgICAgICAgdmFyIHNjaGVtYV90eXBlID0ge1xuICAgICAgICAgICAgICAgICdlbWFpbCc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICd0ZXh0JzogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgJ3RleHRhcmVhJzogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgJ251bWJlcic6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgICdkZWNpbWFsJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ3JhbmdlJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ3BhdGllbnRfYWdlJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ2Fycm93cyc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdzZWxlY3QnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAnbXVsdGlfc2VsZWN0JzogJ29iamVjdCcsXG4gICAgICAgICAgICAgICAgJ3JhZGlvJzogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgJ2dlbmRlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdpbWFnZSc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdkYXRlX3BpY2tlcic6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgICdkYXRlX3RpbWVfcGlja2VyJzogJ29iamVjdCcsXG4gICAgICAgICAgICAgICAgJ2dvb2dsZV9tYXAnOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICAnZmlsZSc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdoaWRkZW4nOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAndGltZXInOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAnbWVzc2FnZSc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdzaWduYXR1cmUnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAncmVwZWF0ZXInOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICAnZGlzdGFuY2UnOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAndGVtcGVyYXR1cmUnOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAnd2VpZ2h0JzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ2FsdGl0dWRlJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ2xlbmd0aCc6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAncmFkaW9fYnV0dG9uJzogJ3N0cmluZydcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEZvcm0gVHlwZVx0QmVjb21lc1xuICAgICAgICAgICAgLy8gZmllbGRzZXRcdGEgZmllbGRzZXQgd2l0aCBsZWdlbmRcbiAgICAgICAgICAgIC8vIHNlY3Rpb25cdGp1c3QgYSBkaXZcbiAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFsXHRhIHNlY3Rpb24gd2l0aCBhIG5nLWlmXG4gICAgICAgICAgICAvLyBhY3Rpb25zXHRob3Jpem9udGFsIGJ1dHRvbiBsaXN0LCBjYW4gb25seSBzdWJtaXQgYW5kIGJ1dHRvbnMgYXMgaXRlbXNcbiAgICAgICAgICAgIC8vIHRleHRcdGlucHV0IHdpdGggdHlwZSB0ZXh0XG4gICAgICAgICAgICAvLyB0ZXh0YXJlYVx0YSB0ZXh0YXJlYVxuICAgICAgICAgICAgLy8gbnVtYmVyXHRpbnB1dCB0eXBlIG51bWJlclxuICAgICAgICAgICAgLy8gcGFzc3dvcmRcdGlucHV0IHR5cGUgcGFzc3dvcmRcbiAgICAgICAgICAgIC8vIGNoZWNrYm94XHRhIGNoZWNrYm94XG4gICAgICAgICAgICAvLyBjaGVja2JveGVzXHRsaXN0IG9mIGNoZWNrYm94ZXNcbiAgICAgICAgICAgIC8vIHNlbGVjdFx0YSBzZWxlY3QgKHNpbmdsZSB2YWx1ZSlcbiAgICAgICAgICAgIC8vIHN1Ym1pdFx0YSBzdWJtaXQgYnV0dG9uXG4gICAgICAgICAgICAvLyBidXR0b25cdGEgYnV0dG9uXG4gICAgICAgICAgICAvLyByYWRpb3NcdHJhZGlvIGJ1dHRvbnNcbiAgICAgICAgICAgIC8vIHJhZGlvcy1pbmxpbmVcdHJhZGlvIGJ1dHRvbnMgaW4gb25lIGxpbmVcbiAgICAgICAgICAgIC8vIHJhZGlvYnV0dG9uc1x0cmFkaW8gYnV0dG9ucyB3aXRoIGJvb3RzdHJhcCBidXR0b25zXG4gICAgICAgICAgICAvLyBoZWxwXHRpbnNlcnQgYXJiaXRyYXJ5IGh0bWxcbiAgICAgICAgICAgIC8vIHRhYlx0dGFicyB3aXRoIGNvbnRlbnRcbiAgICAgICAgICAgIC8vIGFycmF5XHRhIGxpc3QgeW91IGNhbiBhZGQsIHJlbW92ZSBhbmQgcmVvcmRlclxuICAgICAgICAgICAgLy8gdGFiYXJyYXlcdGEgdGFiYmVkIHZlcnNpb24gb2YgYXJyYXlcblxuICAgICAgICAgICAgdmFyIGZvcm1fdHlwZSA9IHtcbiAgICAgICAgICAgICAgICAnZW1haWwnOiAnZW1haWwnLFxuICAgICAgICAgICAgICAgIC8vJ2VtYWlsJzogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgJ3RleHQnOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgJ3JhbmdlJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ3BhdGllbnRfYWdlJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ3RleHRhcmVhJzogJ3RleHRhcmVhJyxcbiAgICAgICAgICAgICAgICAnbnVtYmVyJzogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgJ2RlY2ltYWwnOiAnZGVjaW1hbCcsXG4gICAgICAgICAgICAgICAgJ2Fycm93cyc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICdzZWxlY3QnOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAnbXVsdGlfc2VsZWN0JzogJ211bHRpc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAncmFkaW8nOiAncmFkaW9zLWlubGluZScsXG4gICAgICAgICAgICAgICAgJ2dlbmRlcic6ICdyYWRpb3MtaW5saW5lJyxcbiAgICAgICAgICAgICAgICAncmFkaW9fYnV0dG9uJzogJ3JhZGlvYnV0dG9ucycsXG4gICAgICAgICAgICAgICAgJ2ltYWdlJzogJ2ltYWdlJyxcbiAgICAgICAgICAgICAgICAvLydtZXNzYWdlJzogJ2hlbHAnLFxuICAgICAgICAgICAgICAgICdkYXRlX3BpY2tlcic6ICdkYXRlcGlja2VyJyxcbiAgICAgICAgICAgICAgICAvLydkYXRlX3BpY2tlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICdkYXRlX3RpbWVfcGlja2VyJzogJ2RhdGVwaWNrZXInLFxuICAgICAgICAgICAgICAgICdnb29nbGVfbWFwJzogJ2dvb2dsZW1hcCcsXG4gICAgICAgICAgICAgICAgJ2ZpbGUnOiAnZmlsZScsXG4gICAgICAgICAgICAgICAgJ2hpZGRlbic6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICd0aW1lcic6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICdtZXNzYWdlJzogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgICdzaWduYXR1cmUnOiAnc2lnbmF0dXJlJyxcbiAgICAgICAgICAgICAgICAncmVwZWF0ZXInOiAncmVwZWF0ZXInLFxuICAgICAgICAgICAgICAgICdkaXN0YW5jZSc6ICdkaXN0YW5jZScsXG4gICAgICAgICAgICAgICAgJ3RlbXBlcmF0dXJlJzogJ3RlbXBlcmF0dXJlJyxcbiAgICAgICAgICAgICAgICAnd2VpZ2h0JzogJ3dlaWdodCcsXG4gICAgICAgICAgICAgICAgJ2FsdGl0dWRlJzogJ2FsdGl0dWRlJyxcbiAgICAgICAgICAgICAgICAnbGVuZ3RoJzogJ2xlbmd0aCcsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICdoZWlnaHRzZidcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBnZXRDaG9pY2VNYXAgPSBmdW5jdGlvbiAobWFwVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9jaG9pY2VzID0gW10sXG4gICAgICAgICAgICAgICAgICAgIF90aXRsZW1hcCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gTG9vcCBhbmQgYnVpbGQgY2hvaWNlcyBhbmQgdGl0bGVtYXBcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobWFwVmFsdWVzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHZhbHVlW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2V5LmluZGV4T2YoXCJjb250cm9sbGVkXCIpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaG9pY2VzLnB1c2goe1wiaWRcIjoga2V5LCBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlW2tleV0pfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RpdGxlbWFwLnB1c2goe1widmFsdWVcIjoga2V5LCBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlW2tleV0pfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2hvaWNlc1wiOiBfY2hvaWNlcyxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZW1hcFwiOiBfdGl0bGVtYXBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgaW50ZWdlcnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmbG9hdHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RzID0gW107XG4gICAgICAgICAgICB2YXIgcmVwZWF0ZXJzID0gW107XG5cbiAgICAgICAgICAgIHZhciBkYXRldGltZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBkYXRlcyA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgZXJyb3JNYXAgPSB7fTtcblxuICAgICAgICAgICAgdmFyIHZhbGlkYXRlTnVtYmVyID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIGZvcm0sIGlzSW50ZWdlcikge1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmb3JtIGlzXCIsIGZvcm0pO1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJtb2RlbCBpc1wiLCBtb2RlbFZhbHVlKTtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaXNJbnRlZ2VyIFwiLCBpc0ludGVnZXIpO1xuXG4vLyAgICAgICAgICAgICAgICB2YXIgaW50ZWdlciA9IC9eKFxcLSk/XFxkKyQvO1xuLy8gICAgICAgICAgICAgICAgdmFyIGRlY2ltYWwgPSAvXihcXC0pP1xcZCsoXFwuXFxkKT8kLztcbi8vXG4vLyAgICAgICAgICAgICAgICBpZiAoIWlzSW50ZWdlcikge1xuLy8gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbFZhbHVlID09IHVuZGVmaW5lZCB8fCAhZGVjaW1hbC50ZXN0KG1vZGVsVmFsdWUpKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9ICdJbnZhbGlkIGRlY2ltYWwgdmFsdWUuIERlY2ltYWwgdmFsdWUgd2l0aCBvbmx5IDEgZGVjaW1hbCBwb2ludCBhbGxvd2VkLic7XG4vL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2NoZW1hRm9ybS5lcnJvci4nK2Zvcm0ua2V5LCdub3RfdmFsaWRfZGVjaW1hbCcsIGZhbHNlKTtcbi8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGRlc2NyaXB0aW9uKTtcbi8vICAgICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbFZhbHVlID09IHVuZGVmaW5lZCB8fCAhaW50ZWdlci50ZXN0KG1vZGVsVmFsdWUpKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9ICdPbmx5IGludGVnZXIgdmFsdWVzIGFsbG93ZWQnO1xuLy9cbi8vXG4vLy8vICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3NjaGVtYUZvcm1WYWxpZGF0ZScpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2NoZW1hRm9ybS5lcnJvci4nK2Zvcm0ua2V5LDAsIGZhbHNlKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZGVzY3JpcHRpb24pO1xuLy8gICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vdmFyIGlkZW50aWZ5X3ZhcmlhbnQgPSBmdW5jdGlvbiAoaXRlbSwgYXBwZW5kKSB7XG4gICAgICAgICAgICAvLyAgICAvL2lmIChhcHBlbmQgPT0gdW5kZWZpbmVkIHx8IGFwcGVuZCA9PSBudWxsIHx8IGFwcGVuZCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAvLyAgICAvL1xuICAgICAgICAgICAgLy8gICAgLy99IGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgLy9cbiAgICAgICAgICAgIC8vICAgIC8vfVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vfTtcblxuICAgICAgICAgICAgJHNjb3BlLmhhc19kb2IgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5oYXNfYWdlID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSB7fTtcblxuICAgICAgICAgICAgdmFyIHByb2Nlc3NfdGFicyA9IGZ1bmN0aW9uICh0YWJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhYl9pdGVtcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRhYnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlc3Rpb25faXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXBlYXRpbmdfcXVlc3Rpb25faXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1faXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcXVlc3Rpb24gaW4gdGFic1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgaWYgc2luZ2xlIHNjaGVtYSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldLmhhc093blByb3BlcnR5KHF1ZXN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAocXVlc3Rpb24gPT0gJ1F1ZXN0aW9ucycpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbSBpbiB0YWJzW2tleV1bcXVlc3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldW3F1ZXN0aW9uXS5oYXNPd25Qcm9wZXJ0eShtKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHEgPSB0YWJzW2tleV1bcXVlc3Rpb25dW21dO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoXCJEZWZhdWx0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzW21dID0gdGFic1trZXldW3F1ZXN0aW9uXVttXVtcIkRlZmF1bHRcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNob2ljZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGVtYXAgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtID09ICdkb2InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5oYXNfZG9iID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdwYXRpZW50X2FnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhhc19hZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3NlbGVjdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgcS5UeXBlID09ICdhcnJvd3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHEuVHlwZSA9PSAnbXVsdGlfc2VsZWN0Jykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VNYXAgPSBnZXRDaG9pY2VNYXAocS5WYWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXMgPSBjaG9pY2VNYXAuY2hvaWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAgPSBjaG9pY2VNYXAudGl0bGVtYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnZ2VuZGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIm1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiZmVtYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZlbWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInllc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIm5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocS5UeXBlID09ICdyYWRpb19idXR0b24nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLlZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE9iamVjdC5rZXlzKHEuVmFsdWVzW2ldKVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBxLlZhbHVlc1tpXVtPYmplY3Qua2V5cyhxLlZhbHVlc1tpXSlbMF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmllbGQnOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnOiAkdHJhbnNsYXRlLmluc3RhbnQocS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogZm9ybV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXF1aXJlZCc6IHEuUmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Nob2ljZXMnOiBjaG9pY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JkZXInOiBxLk9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmllbGRBZGRvblJpZ2h0JzogcS5BcHBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNYXBbbV0gPSAkdHJhbnNsYXRlLmluc3RhbnQocS5MYWJlbCk7XG5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZ5X3ZhcmlhbnQoaXRlbSwgcS5BcHBlbmQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdHlwZSA9PSBpbWFnZSwgZW5hYmxlIGltYWdlIHBsdWdpblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnaW1hZ2UnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVsnZm9ybWF0J10gPSAnaW1hZ2UnO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1bJ2VuYWJsZVVwbG9hZCddID0gdHJ1ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtWydlbmFibGVSZW1vdmUnXSA9IHRydWU7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVsnZW5hYmxlWm9vbSddID0gdHJ1ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlICE9ICdtZXNzYWdlJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHFGb3JtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmllbGQnOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogZm9ybV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yZGVyXCI6IHEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmllbGRBZGRvblJpZ2h0XCI6IHEuQXBwZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRhYlwiOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lkZW50aWZ5X3ZhcmlhbnQocUZvcm0sIHEuQXBwZW5kKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmhhc093blByb3BlcnR5KCdTaG93SWYnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZGl0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeS5lYWNoKHEuU2hvd0lmLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uICs9IGtleSArIFwiPT0nXCIgKyB2YWx1ZSArIFwiJ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2NvbmRpdGlvbiddID0gJ21vZGVsLicgKyBjb25kaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ3VuaXQnXSA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0udW5pdF9mb3JtYXQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdudW1iZXInIHx8IHEuVHlwZSA9PSAncmFuZ2UnIHx8IHEuVHlwZSA9PSAnZGVjaW1hbCcgfHwgcS5UeXBlID09ICdwYXRpZW50X2FnZScpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmhhc093blByb3BlcnR5KCdNaW4nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ21pbiddID0gcS5NaW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnTWF4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydtYXgnXSA9IHEuTWF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2VfbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnTWluJykgJiYgcS5oYXNPd25Qcm9wZXJ0eSgnTWF4JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlX21lc3NhZ2UgPSAnaW4gcmFuZ2UgJyArIHFGb3JtWydtaW4nXSArICcgLSAnICsgcUZvcm1bJ21heCddICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdkZWNpbWFsJykge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnSW5jcmVtZW50JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydzdGVwJ10gPSAwLjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsncGF0dGVybiddID0gLyhcXC0pP1swLTldKyhcXC5bMC05XSk/LztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydkZXNjcmlwdGlvbiddID0gJ0RlY2ltYWwgdmFsdWUgJyArIHJhbmdlX21lc3NhZ2UgKyAnd2l0aCBvbmx5IDEgZGVjaW1hbCBwb2ludCBhbGxvd2VkLic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsnb25DaGFuZ2UnXSA9IGZ1bmN0aW9uIChtb2RlbFZhbHVlLCBmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVOdW1iZXIobW9kZWxWYWx1ZSwgZm9ybSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0RGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoJ0luY3JlbWVudCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsnc3RlcCddID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydwYXR0ZXJuJ10gPSAvKFxcLSk/WzAtOV0rLztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydkZXNjcmlwdGlvbiddID0gJ09ubHkgaW50ZWdlciB2YWx1ZXMgJyArIHJhbmdlX21lc3NhZ2UgKyAnYWxsb3dlZC4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ3ZhbGlkYXRpb25NZXNzYWdlJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMDogXCJOb3QgYSB2YWxpZCBpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTA1OiBcIk5vdCBhIHZhbGlkIGludGVnZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydvbkNoYW5nZSddID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIGZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZU51bWJlcihtb2RlbFZhbHVlLCBmb3JtLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXREaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ29uQ2hhbmdlJ10gPSBmdW5jdGlvbiAobW9kZWxWYWx1ZSwgZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXREaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ251bWJlcicgfHwgcS5UeXBlID09ICdyYW5nZScgfHwgcS5UeXBlID09ICdwYXRpZW50X2FnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdlcnMucHVzaChtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdkZWNpbWFsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdHMucHVzaChtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChxLlR5cGUgPT0gJ3NlbGVjdCcgfHwgcS5UeXBlID09ICdhcnJvd3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgc2VsZWN0cy5wdXNoKG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnbXVsdGlfc2VsZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcImNob2ljZXNcIl0gPSBjaG9pY2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1widGl0bGVNYXBcIl0gPSB0aXRsZW1hcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdkYXRlX3BpY2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJkYXRlRm9ybWF0XCJdID0gZGF0ZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJwbGFjZWhvbGRlclwiXSA9IGRhdGVGb3JtYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wiZGVzY3JpcHRpb25cIl0gPSBcIkRhdGUgc2hvdWxkIGJlIG9mIHRoZSBmb3JtYXQgXCIgKyBkYXRlRm9ybWF0ICsgXCIgYW5kL29yIGludmFsaWQgZGF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcInBpY2tlcl90eXBlXCJdID0gXCJkYXRlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzLnB1c2gobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnZGF0ZV90aW1lX3BpY2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJkYXRlRm9ybWF0XCJdID0gZGF0ZXRpbWVGb3JtYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wicGxhY2Vob2xkZXJcIl0gPSBkYXRldGltZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJkZXNjcmlwdGlvblwiXSA9IFwiRGF0ZXRpbWUgc2hvdWxkIGJlIG9mIHRoZSBmb3JtYXQgXCIgKyBkYXRldGltZUZvcm1hdCArIFwiIGFuZC9vciBpbnZhbGlkIGRhdGV0aW1lXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wicGlja2VyX3R5cGVcIl0gPSBcImRhdGV0aW1lXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lcy5wdXNoKG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlbWEucHJvcGVydGllc1ttXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHNjaGVtYV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHR5cGUgPT0gaW1hZ2UsIGFzc2lnbiBmb3JtYXQgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byB1c2UgaW1hZ2Vtb2RhbCBwbHVnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdpbWFnZScgfHwgcS5UeXBlID09ICdzaWduYXR1cmUnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydmb3JtYXQnXSA9ICdpbWFnZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydlbmFibGVVcGxvYWQnXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydlbmFibGVSZW1vdmUnXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydlbmFibGVab29tJ10gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZXMgdGhlIHJlcGVhdGVyIHR5cGUgZm9ybXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdyZXBlYXRlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgcS5oYXNPd25Qcm9wZXJ0eSgnUmVwZWF0aW5nUXVlc3Rpb25zJykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlcnMucHVzaChtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwZWF0ZXJGb3JtID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXBlYXRlclNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogW11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIHJlcGVhdGluZyBxdWVzdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdGhlIHJlcGVhdGVyIG1vZGVsIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJrZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChxLlJlcGVhdGluZ1F1ZXN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcEZvcm0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaWVsZCc6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjoga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6ICR0cmFuc2xhdGUuaW5zdGFudCh2YWx1ZS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBmb3JtX3R5cGVbdmFsdWUuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmRlclwiOiB2YWx1ZS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmaWVsZEFkZG9uUmlnaHRcIjogdmFsdWUuQXBwZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5nTW9kZWxPcHRpb25zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXBkYXRlT25cIjogJ2JsdXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFiXCI6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW3RhYmtleV0uTGFiZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWFwW2tleV0gPSAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWUuTGFiZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZGVudGlmeV92YXJpYW50KHJlcEZvcm0sIHZhbHVlLkFwcGVuZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ1Nob3dJZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25kaXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2godmFsdWUuU2hvd0lmLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uICs9IGsgKyBcIj09J1wiICsgdiArIFwiJ1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVsnY29uZGl0aW9uJ10gPSAnbW9kZWwuJyArIGNvbmRpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChxLlR5cGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBmbG9hdHMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAocS5UeXBlID09ICdzZWxlY3QnIHx8IHEuVHlwZSA9PSAnYXJyb3dzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHNlbGVjdHMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLlR5cGUgPT0gJ3BhdGllbnRfYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGFzX2FnZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgZm9ybSB0byBoYW5kbGUgb3RoZXIgZmllbGQgdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuVHlwZSA9PSAnc2VsZWN0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB2YWx1ZS5UeXBlID09ICdhcnJvd3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHZhbHVlLlR5cGUgPT0gJ211bHRpX3NlbGVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcENob2ljZU1hcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDaG9pY2VNYXAodmFsdWUuVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBGb3JtLmNob2ljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVwQ2hvaWNlTWFwLmNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcEZvcm0udGl0bGVNYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVwQ2hvaWNlTWFwLnRpdGxlbWFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5UeXBlID09ICdkYXRlX3BpY2tlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVtcImRhdGVGb3JtYXRcIl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVtcInBsYWNlaG9sZGVyXCJdID0gZGF0ZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJkZXNjcmlwdGlvblwiXSA9IFwiRGF0ZSBzaG91bGQgYmUgb2YgdGhlIGZvcm1hdCBcIiArIGRhdGVGb3JtYXQgKyBcIiBhbmQvb3IgaW52YWxpZCBkYXRlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wicGlja2VyX3R5cGVcIl0gPSBcImRhdGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5UeXBlID09ICdkYXRlX3RpbWVfcGlja2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBGb3JtW1wiZGF0ZUZvcm1hdFwiXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVtcInBsYWNlaG9sZGVyXCJdID0gZGF0ZXRpbWVGb3JtYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wiZGVzY3JpcHRpb25cIl0gPSBcIkRhdGV0aW1lIHNob3VsZCBiZSBvZiB0aGUgZm9ybWF0IFwiICsgZGF0ZXRpbWVGb3JtYXQgKyBcIiBhbmQvb3IgaW52YWxpZCBkYXRldGltZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcInBpY2tlcl90eXBlXCJdID0gXCJkYXRldGltZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcEZvcm1bJ3VuaXQnXSA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0udW5pdF9mb3JtYXQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuVHlwZSA9PSAnbnVtYmVyJyB8fCB2YWx1ZS5UeXBlID09ICdyYW5nZScgfHwgdmFsdWUuVHlwZSA9PSAnZGVjaW1hbCcgfHwgdmFsdWUuVHlwZSA9PSAncGF0aWVudF9hZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnTWluJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcEZvcm1bJ21pbiddID0gdmFsdWUuTWluO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KCdNYXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVsnbWF4J10gPSB2YWx1ZS5NYXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2VfbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoJ01pbicpICYmIHZhbHVlLmhhc093blByb3BlcnR5KCdNYXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfbWVzc2FnZSA9ICdpbiByYW5nZSAnICsgcmVwRm9ybVsnbWluJ10gKyAnIC0gJyArIHJlcEZvcm1bJ21heCddICsgJyAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuVHlwZSA9PSAnZGVjaW1hbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoJ0luY3JlbWVudCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBGb3JtWydzdGVwJ10gPSAwLjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBGb3JtWydwYXR0ZXJuJ10gPSAvKFxcLSk/WzAtOV0rKFxcLlswLTldKT8vO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybS5kZXNjcmlwdGlvbiA9ICdEZWNpbWFsIHZhbHVlICcgKyByYW5nZV9tZXNzYWdlICsgJ3dpdGggb25seSAxIGRlY2ltYWwgcG9pbnQgYWxsb3dlZC4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVsnb25DaGFuZ2UnXSA9IGZ1bmN0aW9uIChtb2RlbFZhbHVlLCBmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVOdW1iZXIobW9kZWxWYWx1ZSwgZm9ybSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0RGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnSW5jcmVtZW50JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcEZvcm1bJ3N0ZXAnXSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBGb3JtWydwYXR0ZXJuJ10gPSAvKFxcLSk/WzAtOV0rLztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtLmRlc2NyaXB0aW9uID0gJ09ubHkgaW50ZWdlciB2YWx1ZXMgJyArIHJhbmdlX21lc3NhZ2UgKyAnYWxsb3dlZC4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVsndmFsaWRhdGlvbk1lc3NhZ2UnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwOiBcIk5vdCBhIHZhbGlkIGludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDU6IFwiTm90IGEgdmFsaWQgaW50ZWdlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwRm9ybVsnb25DaGFuZ2UnXSA9IGZ1bmN0aW9uIChtb2RlbFZhbHVlLCBmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVOdW1iZXIobW9kZWxWYWx1ZSwgZm9ybSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXREaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBGb3JtWydvbkNoYW5nZSddID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIGZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0RGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuVHlwZSA9PSAnbnVtYmVyJyB8fCB2YWx1ZS5UeXBlID09ICdyYW5nZScgfHwgdmFsdWUuVHlwZSA9PSAncGF0aWVudF9hZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVnZXJzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdkZWNpbWFsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdHMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgcmVwZWF0ZXIgc2NoZW1hXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdGVyU2NoZW1hLnByb3BlcnRpZXNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IHNjaGVtYV90eXBlW3ZhbHVlLlR5cGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byByZXBlYXRlciBzY2hlbWEgaWYgc3VjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vZGVsIHByb3BlcnR5IGlzIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLlJlcXVpcmVkID09ICd0cnVlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlclNjaGVtYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcXVpcmVkLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSByZXBlYXRlciBmb3JtIGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdGVyRm9ybS5wdXNoKHJlcEZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXNzaWduIHRvIHJlcGVhdGVyIGZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm0uZm9ybSA9IHJlcGVhdGVyRm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm0uc2NoZW1hID0gcmVwZWF0ZXJTY2hlbWE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhxRm9ybS5zY2hlbWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1faXRlbXMucHVzaChxRm9ybSk7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkbG9nLmluZm8oaXRlbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbl9pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgYXJyYXkgb2Ygc2NoZW1hIG9iamVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldLmhhc093blByb3BlcnR5KHF1ZXN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAocXVlc3Rpb24gPT0gJ1JlcGVhdGluZ1F1ZXN0aW9ucycpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ZXJzLnB1c2goa2V5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGQ6IFwiQWRkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZDogXCJidG4tc3VjY2Vzc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnVzZXJSb2xlID09ICdQYXRyb2xsZXInKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxbJ3JlYWRvbmx5J10gPSB0cnVlO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtIGluIHRhYnNba2V5XVtxdWVzdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV1bcXVlc3Rpb25dLmhhc093blByb3BlcnR5KG0pKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkbG9nLmxvZyhcImtleTogXCIgKyBtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxID0gdGFic1trZXldW3F1ZXN0aW9uXVttXTtcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHEuVHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobSA9PSAnZG9iJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGFzX2RvYiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uaW5kZXhPZihcIiZcIikgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkbG9nLmxvZyhcImhhcyAmIGluc2lkZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgnICcsICdfJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtLnJlcGxhY2UoJyAnLCAnXycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gbS5yZXBsYWNlKCcmJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlbWFwID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChxLlR5cGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBmbG9hdHMucHVzaChtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKHEuVHlwZSA9PSAnc2VsZWN0JyB8fCBxLlR5cGUgPT0gJ2Fycm93cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBzZWxlY3RzLnB1c2gobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdwYXRpZW50X2FnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhhc19hZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3NlbGVjdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgcS5UeXBlID09ICdhcnJvd3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHEuVHlwZSA9PSAnbXVsdGlfc2VsZWN0Jykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VNYXAgPSBnZXRDaG9pY2VNYXAocS5WYWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXMgPSBjaG9pY2VNYXAuY2hvaWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAgPSBjaG9pY2VNYXAudGl0bGVtYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnZ2VuZGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIm1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiZmVtYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZlbWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcInllc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIm5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocS5UeXBlID09ICdyYWRpb19idXR0b24nKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLlZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE9iamVjdC5rZXlzKHEuVmFsdWVzW2ldKVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBxLlZhbHVlc1tpXVtPYmplY3Qua2V5cyhxLlZhbHVlc1tpXSlbMF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSAhPSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXNba2V5XS5pdGVtcy5wcm9wZXJ0aWVzW21dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQocS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogc2NoZW1hX3R5cGVbcS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcUZvcm0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaWVsZCc6IGtleSArICdbXS4nICsgbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrZXlcIjoga2V5ICsgJ1tdLicgKyBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogZm9ybV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhY2Vob2xkZXJcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yZGVyXCI6IHEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFiXCI6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoJ1Nob3dJZicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25kaXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5LmVhY2gocS5TaG93SWYsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gKz0ga2V5ICsgXCI9PSdcIiArIHZhbHVlICsgXCInXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsnY29uZGl0aW9uJ10gPSAnbW9kZWwuJyArIGNvbmRpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdtdWx0aV9zZWxlY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wiY2hvaWNlc1wiXSA9IGNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJ0aXRsZU1hcFwiXSA9IHRpdGxlbWFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ2RhdGVfcGlja2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcImRhdGVGb3JtYXRcIl0gPSBkYXRlRm9ybWF0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcInBsYWNlaG9sZGVyXCJdID0gZGF0ZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJkZXNjcmlwdGlvblwiXSA9IFwiRGF0ZSBzaG91bGQgYmUgb2YgdGhlIGZvcm1hdCBcIiArIGRhdGVGb3JtYXQgKyBcIiBhbmQvb3IgaW52YWxpZCBkYXRlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtW1wicGlja2VyX3R5cGVcIl0gPSBcImRhdGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXMucHVzaChtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdkYXRlX3RpbWVfcGlja2VyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcImRhdGVGb3JtYXRcIl0gPSBkYXRldGltZUZvcm1hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJwbGFjZWhvbGRlclwiXSA9IGRhdGV0aW1lRm9ybWF0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVtcImRlc2NyaXB0aW9uXCJdID0gXCJEYXRldGltZSBzaG91bGQgYmUgb2YgdGhlIGZvcm1hdCBcIiArIGRhdGV0aW1lRm9ybWF0ICsgXCIgYW5kL29yIGludmFsaWQgZGF0ZXRpbWVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bXCJwaWNrZXJfdHlwZVwiXSA9IFwiZGF0ZXRpbWVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRpbWVzLnB1c2gobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9kaWZ5IHFGb3JtIGZvciBpbWFnZW1vZGFsIHBsdWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ2ltYWdlJyB8fCBxLlR5cGUgPT0gJ3NpZ25hdHVyZScpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2Zvcm1hdCddID0gJ2ltYWdlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2VuYWJsZVVwbG9hZCddID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2VuYWJsZVJlbW92ZSddID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2VuYWJsZVpvb20nXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ3VuaXQnXSA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0udW5pdF9mb3JtYXQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdudW1iZXInIHx8IHEuVHlwZSA9PSAncmFuZ2UnIHx8IHEuVHlwZSA9PSAnZGVjaW1hbCcgfHwgcS5UeXBlID09ICdwYXRpZW50X2FnZScpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnTWluJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydtaW4nXSA9IHEuTWluO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoJ01heCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsnbWF4J10gPSBxLk1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZV9tZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmhhc093blByb3BlcnR5KCdNaW4nKSAmJiBxLmhhc093blByb3BlcnR5KCdNYXgnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VfbWVzc2FnZSA9ICdpbiByYW5nZSAnICsgcUZvcm1bJ21pbiddICsgJyAtICcgKyBxRm9ybVsnbWF4J10gKyAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ2RlY2ltYWwnKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmhhc093blByb3BlcnR5KCdJbmNyZW1lbnQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ3N0ZXAnXSA9IDAuMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydwYXR0ZXJuJ10gPSAvKFxcLSk/WzAtOV0rKFxcLlswLTldKT8vO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2Rlc2NyaXB0aW9uJ10gPSAnRGVjaW1hbCB2YWx1ZSAnICsgcmFuZ2VfbWVzc2FnZSArICd3aXRoIG9ubHkgMSBkZWNpbWFsIHBvaW50IGFsbG93ZWQuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydvbkNoYW5nZSddID0gZnVuY3Rpb24gKG1vZGVsVmFsdWUsIGZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZU51bWJlcihtb2RlbFZhbHVlLCBmb3JtLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXREaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5oYXNPd25Qcm9wZXJ0eSgnSW5jcmVtZW50JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFGb3JtWydzdGVwJ10gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ3BhdHRlcm4nXSA9IC8oXFwtKT9bMC05XSsvO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ2Rlc2NyaXB0aW9uJ10gPSAnT25seSBpbnRlZ2VyIHZhbHVlcyAnICsgcmFuZ2VfbWVzc2FnZSArICdhbGxvd2VkLic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsndmFsaWRhdGlvbk1lc3NhZ2UnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwOiBcIk5vdCBhIHZhbGlkIGludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDU6IFwiTm90IGEgdmFsaWQgaW50ZWdlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcUZvcm1bJ29uQ2hhbmdlJ10gPSBmdW5jdGlvbiAobW9kZWxWYWx1ZSwgZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlTnVtYmVyKG1vZGVsVmFsdWUsIGZvcm0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0RGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnbnVtYmVyJyB8fCBxLlR5cGUgPT0gJ3JhbmdlJyB8fCBxLlR5cGUgPT0gJ3BhdGllbnRfYWdlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdlcnMucHVzaChrZXkgKyAnW10uJyArIG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnZGVjaW1hbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0cy5wdXNoKGtleSArICdbXS4nICsgbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxRm9ybVsnb25DaGFuZ2UnXSA9IGZ1bmN0aW9uIChtb2RlbFZhbHVlLCBmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NldERpcnR5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRvIGFycmF5IG9mIGl0ZW1zIG5lZWRlZCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzY2hlbWEgZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuaXRlbXMucHVzaChxRm9ybSk7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpZWxkJzogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IGZvcm1fdHlwZVtxLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVxdWlyZWQnOiBxLlJlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaG9pY2VzJzogY2hvaWNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1hcFttXSA9ICR0cmFuc2xhdGUuaW5zdGFudChxLkxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdGluZ19xdWVzdGlvbl9pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbC5pdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEub3JkZXIgPCBiLm9yZGVyKSA/IC0xIDogKGEub3JkZXIgPiBiLm9yZGVyKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtX2l0ZW1zLnB1c2gobCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhmb3JtX2l0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhyZXBlYXRpbmdfcXVlc3Rpb25faXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XS5MYWJlbC5pbmRleE9mKFwicHJpbnRcIikgPiAtMSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYl9pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHRhYnNba2V5XS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2l0ZW1zJzogZm9ybV9pdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEub3JkZXIgPCBiLm9yZGVyKSA/IC0xIDogKGEub3JkZXIgPiBiLm9yZGVyKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXN0aW9ucyc6IHF1ZXN0aW9uX2l0ZW1zLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYS5vcmRlciA8IGIub3JkZXIpID8gLTEgOiAoYS5vcmRlciA+IGIub3JkZXIpID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVwZWF0aW5nX3F1ZXN0aW9ucyc6IHJlcGVhdGluZ19xdWVzdGlvbl9pdGVtcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEub3JkZXIgPCBiLm9yZGVyKSA/IC0xIDogKGEub3JkZXIgPiBiLm9yZGVyKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGV0aW1lcyA9IGRhdGV0aW1lcztcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXMgPSBkYXRlcztcblxuICAgICAgICAgICAgICAgIHJldHVybiB0YWJfaXRlbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEub3JkZXIgPCBiLm9yZGVyKSA/IC0xIDogKGEub3JkZXIgPiBiLm9yZGVyKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChpZCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX0lOQ0lERU5UXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJzID0gcXVlc3Rpb25zLkRhc2hib2FyZEl0ZW1zO1xuXG4gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5nZXRTdGF0dXNlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXNfbGlzdCA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICR0cmFuc2xhdGUuaW5zdGFudChpdGVtLmtleSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudF9zdGF0dXNfaWQ6IGl0ZW0uaW5jaWRlbnRfc3RhdHVzX2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJzICYmIHRhYnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkXzUyZDQ3YWFjOWJkMTMnKSAmJiB0YWJzLmZpZWxkXzUyZDQ3YWFjOWJkMTMgJiYgdGFicy5maWVsZF81MmQ0N2FhYzliZDEzLmhhc093blByb3BlcnR5KCdSZXBlYXRpbmdRdWVzdGlvbnMnKSAmJiB0YWJzLmZpZWxkXzUyZDQ3YWFjOWJkMTMuUmVwZWF0aW5nUXVlc3Rpb25zICYmIHRhYnMuZmllbGRfNTJkNDdhYWM5YmQxMy5SZXBlYXRpbmdRdWVzdGlvbnMuaGFzT3duUHJvcGVydHkoJ3BhdHJvbGxlcicpICYmIHRhYnMuZmllbGRfNTJkNDdhYWM5YmQxMy5SZXBlYXRpbmdRdWVzdGlvbnMucGF0cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXNzaWduZWVzID0gcXVlc3Rpb25zLkRhc2hib2FyZEl0ZW1zLmZpZWxkXzUyZDQ3YWFjOWJkMTMuUmVwZWF0aW5nUXVlc3Rpb25zLnBhdHJvbGxlci5WYWx1ZXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXNzaWduZWVzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50YWJzID0gcHJvY2Vzc190YWJzKHRhYnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemUgc2NoZW1hIGZvcm0gdG8gcmVuZGVyIHRhYnMgaW4gcGFuZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sQ2xhc3M6ICdjb2wteHMtMTInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidGFic1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYnM6ICRzY29wZS50YWJzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfSU5DSURFTlRcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmV0Y2hlcyBpbmNpZGVudCBkYXRhIGJhc2Ugb24gaW5jaWRlbnQgSUQgZm91bmQgaW4gdXJsXG4gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5mZXRjaChpZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5pbkFycmF5KGssIGZsb2F0cykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHBhcnNlRmxvYXQodik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5pbkFycmF5KGssIHNlbGVjdHMpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSAnJyArIHY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5pbkFycmF5KGssIGRhdGV0aW1lcykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0b0xvY2FsVGltZSh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5LmluQXJyYXkoaywgZGF0ZXMpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gdG9Mb2NhbERhdGUodik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChkZWZhdWx0cywgZnVuY3Rpb24gKGssdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhLmhhc093blByb3BlcnR5KGspICYmIChkYXRhW2tdID09IFwiXCIgfHwgZGF0YVtrXSA9PSB1bmRlZmluZWQgfHwgZGF0YVtrXSA9PSBudWxsKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2tdID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGRhdGEuaGFzT3duUHJvcGVydHkoaykgJiYgZGF0YVtrXSAhPSBcIlwiICYmIGRhdGFba10gIT0gdW5kZWZpbmVkICYmIGRhdGFba10gIT0gbnVsbCl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtrXSA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudCA9IGRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmhhc093blByb3BlcnR5KCdpbmNpZGVudF9zdGF0dXMnKSAmJiBkYXRhLmluY2lkZW50X3N0YXR1cyAmJiBkYXRhLmluY2lkZW50X3N0YXR1cy5oYXNPd25Qcm9wZXJ0eSgnaW5jaWRlbnRfc3RhdHVzX2lkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluY2lkZW50X3N0YXR1cyA9IGRhdGEuaW5jaWRlbnRfc3RhdHVzLmluY2lkZW50X3N0YXR1c19pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXNzaWduZWRfdG8gPSBkYXRhLmFzc2lnbmVkX3RvO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kdF9jcmVhdGVkID0gdG9Mb2NhbFRpbWUoZGF0YS5kdF9jcmVhdGVkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2lsbCBiZSBjaGFuZ2VkIHRvIFVUQyB3aGVuIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXRpbWVzLnB1c2goXCJkdF9jcmVhdGVkXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGF0YS5waG90b3MgPSBkYXRhLnBob3RvcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbCA9IGRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NjaGVtYUZvcm1SZWRyYXcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmICgkc2NvcGUuaGFzX2RvYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAkc2NvcGUuJHdhdGNoKCdtb2RlbC5kb2InLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC8vY29uc29sZS5sb2coJHNjb3BlLmhhc19hZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaWYgKHZhbHVlICYmICRzY29wZS5oYXNfYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgJHNjb3BlLm1vZGVsLnBhdGllbnRfYWdlID0gY2FsY0FnZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImFnZSB1cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAsICRyb290U2NvcGUub25fZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2xlYW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FsY0FnZShkYXRlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJpcnRoZGF5ID0gbW9tZW50KGRhdGVTdHJpbmcsIGRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoKS5kaWZmKGJpcnRoZGF5LCAneWVhcnMnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaXNFbXB0eShtYXApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXAuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBtYXBba2V5XSAhPSBudWxsICYmIG1hcFtrZXldICE9PSB1bmRlZmluZWQgJiYgbWFwW2tleV0gIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTnVsbHMob2JqKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlIGlzIGVtcHR5IHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqW2tleV0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZSBpcyBhcnJheSB3aXRoIG9ubHkgZW1wdHkgc3RyaW5nc1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqW2tleV0gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqW2tleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqW2tleV1baV0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUgaXMgb2JqZWN0IHdpdGggb25seSBlbXB0eSBzdHJpbmdzIG9yIGFycmF5cyBvZiBlbXB0eSBzdHJpbmdzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gcmVtb3ZlTnVsbHMob2JqW2tleV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGFzS2V5cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgb2JqS2V5IGluIG9ialtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzS2V5cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzS2V5cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuXG5cbiAgICAgICAgICAgICAgICAvL3ZhciBpc0FycmF5ID0gJC5pc0FycmF5KG9iaik7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvL2ZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgY29uc29sZS5sb2coayk7XG4gICAgICAgICAgICAgICAgLy8gICAgY29uc29sZS5sb2cob2JqW2tdKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgIGlmIChvYmpba10gPT09IG51bGwgfHwgb2JqW2tdID09PSB1bmRlZmluZWQgfHwgb2JqW2tdID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgY29uc29sZS5sb2codHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGRlbGV0ZSBvYmpba107XG4gICAgICAgICAgICAgICAgLy8gICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGNvbnNvbGUubG9nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICBpZiAob2JqW2tdICYmIGlzRW1wdHkob2JqW2tdKSkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICBpZiAoaXNBcnJheSkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIiA9PT4gcmVtb3ZlIGZyb20gYXJyYXkgXCIgKyBrKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIG9iai5zcGxpY2UoaywgMSlcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIC8vZGVsZXRlIG9ialtrXTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgICAgICAvLyAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYgKG9ialtrXSAmJiB0eXBlb2Ygb2JqW2tdID09IFwib2JqZWN0XCIgJiYgalF1ZXJ5LmluQXJyYXkoaywgcmVwZWF0ZXJzKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGsgKyBcIiBpcyByZXBlYXRlclwiKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIHJlbW92ZU51bGxzKG9ialtrXSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1SZXBlYXRlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUgaXMgb2JqZWN0IHdpdGggb25seSBlbXB0eSBzdHJpbmdzIG9yIGFycmF5cyBvZiBlbXB0eSBzdHJpbmdzXG4gICAgICAgICAgICAgICAgICAgIGlmICgoalF1ZXJ5LmluQXJyYXkoa2V5LCByZXBlYXRlcnMpID49IDApICYmICFqUXVlcnkuaXNBcnJheShvYmpba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coa2V5ICsgXCIgPT09PT1cIiArIHR5cGVvZiBvYmpba2V5XSArIFwiPT09PT09XCIgKyBqUXVlcnkuaXNBcnJheShvYmpba2V5XSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcFZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG9ialtrZXldLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSBtYXBWYWx1ZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobWFwVmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cob2JqW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAoZm9ybSkge1xuXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtUmVwZWF0ZXIoJHNjb3BlLm1vZGVsKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRzY29wZS5tb2RlbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaXJzdCB3ZSBicm9hZGNhc3QgYW4gZXZlbnQgc28gYWxsIGZpZWxkcyB2YWxpZGF0ZSB0aGVtc2VsdmVzXG4vLyAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2NoZW1hRm9ybVZhbGlkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGZvcm0uJHZhbGlkKTtcblxuLy8gICAgICAgICAgICAgICAgaWYgKGZvcm0uJHZhbGlkKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5jaWRlbnRfZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLm1vZGVsKSwgZnVuY3Rpb24gKGssIHYpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5LmluQXJyYXkoaywgZmxvYXRzKSA+PSAwKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHYpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoalF1ZXJ5LmluQXJyYXkoaywgc2VsZWN0cykgPj0gMCkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJycgKyB2O1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeS5pbkFycmF5KGssIGRhdGV0aW1lcykgPj0gMCAmJiB2ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvVVRDKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChqUXVlcnkuaW5BcnJheShrLCBkYXRlcykgPj0gMCAmJiB2ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUodik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmVtb3ZlTnVsbHMoaW5jaWRlbnRfZGF0YSk7XG5cblxuXG4gICAgICAgICAgICAgICAgdmFyIGJlZm9yZSA9ICRzY29wZS5tb2RlbDtcblxuICAgICAgICAgICAgICAgIGlmIChpbmNpZGVudF9kYXRhLmR0X2NyZWF0ZWQgPiBtb21lbnQudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoJ0lOVkFMSURfU1RBUlRfREFURScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2F2ZUluY2lkZW50KCRzY29wZS5pbmNpZGVudC5pbmNpZGVudF9pZCwgaW5jaWRlbnRfZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcImluY2lkZW50X3VwZGF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2xlYW4oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaW5jaWRlbnRfc3RhdHVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hc3NpZ25lZF90bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLnVwZGF0ZUluY2lkZW50KGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXNzaWduZWRfdG9cIjogJHNjb3BlLmFzc2lnbmVkX3RvICsgJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkFzc2lnbmVlIHVwZGF0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBkZWxldGVkLCBnZXQgY29uZmlybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaW5jaWRlbnRfc3RhdHVzID09IDkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9pbmNpZGVudHMvdGVtcGxhdGVzL2NvbmZpcm0uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChpc19hbGxvd2VkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UudXBkYXRlU3RhdHVzKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c190eXBlX2lkXCI6ICRzY29wZS5pbmNpZGVudF9zdGF0dXMgKyAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RhdHVzX2RhdGVcIjogdG9VVEMobW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1cGRhdGVkX2J5XCI6IGN1cnJlbnRVc2VyLnVzZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIlN0YXR1cyB1cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdpbmNpZGVudHMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSB1cGRhdGUgc3RhdHVzIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UudXBkYXRlU3RhdHVzKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RhdHVzX3R5cGVfaWRcIjogJHNjb3BlLmluY2lkZW50X3N0YXR1cyArICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c19kYXRlXCI6IHRvVVRDKG1vbWVudCgpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1cGRhdGVkX2J5XCI6IGN1cnJlbnRVc2VyLnVzZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIlN0YXR1cyB1cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2luY2lkZW50X2VkaXQnLCB7aW5jaWRlbnRJZDogJHN0YXRlUGFyYW1zLmluY2lkZW50SWR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnaW5jaWRlbnRfZWRpdCcsIHtpbmNpZGVudElkOiAkc3RhdGVQYXJhbXMuaW5jaWRlbnRJZH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gZXJyb3JNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yTWFwW2tleV0gKyBcIiBcIiArIGVycm9yW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3Ioa2V5ICsgXCIgXCIgKyBlcnJvcltrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihcImRhdGFfdmFsaWRhdGlvbl9lcnJvcl9wbGVhc2VfY29ycmVjdF9yZWRfZmllbGRzXCIpO1xuLy8gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHVuc2F2ZWRtZXNzYWdlID0gJ0FsbCB5b3VyIHVuc2F2ZWQgY2hhbmdlcyB3aWxsIGJlIGxvc3QuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjb250aW51ZT8nO1xuXG4gICAgICAgICAgICB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEaXJ0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdW5zYXZlZG1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCRzY29wZS5pbmNpZGVudGZvcm0uJGRpcnR5KTtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCckZGVzdHJveScpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vbmJlZm9yZXVubG9hZCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIG5leHQsIGN1cnJlbnQpIHtcbi8vICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCckc3RhdGVDaGFuZ2VTdGFydCcpO1xuLy8gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmluY2lkZW50Zm9ybS4kZGlydHkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRGlydHkoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbmZpcm0odW5zYXZlZG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRzY29wZS5nb3RvTmV4dFRhYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGUgPSBqUXVlcnkoJy5zY2hlbWEtZm9ybS10YWJzJykuc2NvcGUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChzY29wZSAmJiBzY29wZS5oYXNPd25Qcm9wZXJ0eSgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFRhYiA9IHNjb3BlLnNlbGVjdGVkLnRhYjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUYWIgPT0gKCRzY29wZS50YWJzLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5zZWxlY3RlZC50YWIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWQudGFiKys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHtzY3JvbGxUb3A6IDB9LCAyMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignSW5jaWRlbnRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICRzY2UsICR0aW1lb3V0LCAkbG9nLCAkd2luZG93LCAkaW50ZXJjb20sICRmaWx0ZXIsICBJbmNpZGVudFNlcnZpY2UsIERhdGVSYW5nZVNlcnZpY2UsIGN1cnJlbnRVc2VyLCBncm93bCwgQXBpU2VydmljZSwgQ09ORklHLCBMUywgcXVlc3Rpb25zKSB7XG5cblxuICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdXNlcl9pZDogY3VycmVudFVzZXIudXNlcl9pZCxcbiAgICAgICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgZGFzaGJvYXJkX2ZlYXR1cmVfbGFzdF91c2VkOiBcIkluY2lkZW50c1wiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBkYXRlX2Zvcm1hdF9tYXBwaW5nID0ge1xuICAgICAgICAgICAgXCJNTS9ERC9ZWVlZXCI6IFwiTU0vZGQveXl5eVwiLFxuICAgICAgICAgICAgXCJERC9NTS9ZWVlZXCI6IFwiZGQvTU0veXl5eVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmRhdGV0aW1lX2Zvcm1hdCA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0uZGF0ZXRpbWVfZm9ybWF0LmtleTtcbiAgICAgICAgdmFyIGRhdGVfZm9ybWF0ID0gJHNjb3BlLmRhdGV0aW1lX2Zvcm1hdC5zbGljZSgwLDEwKTtcbiAgICAgICAgJHNjb3BlLmRhdGVfZm9ybWF0ID0gZGF0ZV9mb3JtYXRfbWFwcGluZ1tkYXRlX2Zvcm1hdF07XG5cbiAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgdHogPSBqc3R6LmRldGVybWluZSgpO1xuXG4gICAgICAgIHZhciB0YWJzID0gcXVlc3Rpb25zLkRhc2hib2FyZEl0ZW1zO1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRhYnMpIHtcbiAgICAgICAgICAgIGlmICh0YWJzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbiBpbiB0YWJzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XS5oYXNPd25Qcm9wZXJ0eShxdWVzdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIChxdWVzdGlvbiA9PSAnUXVlc3Rpb25zJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG0gaW4gdGFic1trZXldW3F1ZXN0aW9uXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV1bcXVlc3Rpb25dLmhhc093blByb3BlcnR5KG0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxID0gdGFic1trZXldW3F1ZXN0aW9uXVttXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoXCJEZWZhdWx0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0c1ttXSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bXCJEZWZhdWx0XCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdG9VVEModmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudHoodmFsdWUsICRzY29wZS5kYXRldGltZV9mb3JtYXQsIHR6Lm5hbWUoKSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b0xvY2FsVGltZSh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudC51dGModmFsdWUpLnR6KHR6Lm5hbWUoKSkuZm9ybWF0KCRzY29wZS5kYXRldGltZV9mb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc29ydCA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF07XG4gICAgICAgIHZhciByZXNvcnRfaWQgPSByZXNvcnQucmVzb3J0X2lkO1xuXG4gICAgICAgIERhdGVSYW5nZVNlcnZpY2UucmFuZ2UgPSB7XG4gICAgICAgICAgICAgZGF0ZUZyb206IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UuZGF0ZUZyb20sXG4gICAgICAgICAgICAgZGF0ZVRvOiBEYXRlUmFuZ2VTZXJ2aWNlLnJhbmdlLmRhdGVUb1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgcmFuZ2U6IERhdGVSYW5nZVNlcnZpY2UucmFuZ2UsXG4gICAgICAgICAgICBpbmNpZGVudHM6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDEwMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDAsXG4gICAgICAgICAgICB0b3RhbFBhZ2VzOiAwLFxuICAgICAgICAgICAgcHJlZGljYXRlOiAnZHRfY3JlYXRlZCcsXG4gICAgICAgICAgICByZXZlcnNlOiB0cnVlLFxuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3I6ICcnLFxuXG4gICAgICAgICAgICBzZXRQYWdlOiBmdW5jdGlvbiAocGFnZU51bSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmN1cnJlbnRQYWdlID0gcGFnZU51bTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyA9ICRzY29wZS5saXN0LmZpbHRlcmVkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzb3J0X2J5OiBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJldmVyc2UgPSAhJHNjb3BlLmxpc3QucmV2ZXJzZTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ2ZldGNoaW5nIGluY2lkZW50cy4uLicpO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRfdGltZSA9IHRvVVRDKG1vbWVudCgkc2NvcGUubGlzdC5yYW5nZS5kYXRlRnJvbSkuZm9ybWF0KGRhdGVfZm9ybWF0ICsgJyAwMDowMDowMCcpKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QucmFuZ2UuZGF0ZVRvKS5mb3JtYXQoZGF0ZV9mb3JtYXQgKyAnIDIzOjU5OjU5JykpO1xuXG5cbiAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UuZmV0Y2hMaXN0KHN0YXJ0X3RpbWUsIGVuZF90aW1lLCByZXNvcnRfaWQsICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSwgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXG4vLyAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YS5yZXN1bHRzKTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGluY2lkZW50cyA9IGRhdGEucmVzdWx0cy5tYXAoZnVuY3Rpb24gKGluY2lkZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudC5kdF9jcmVhdGVkID0gdG9Mb2NhbFRpbWUoaW5jaWRlbnQuZHRfY3JlYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudC5wYXRpZW50X25hbWUgPSBpbmNpZGVudC5wYXRpZW50Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudC5pbmp1cnlfbmFtZSA9ICRmaWx0ZXIoJ3RyYW5zZm9ybUluanVyeScpKGluY2lkZW50LmluanVyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudC5hc3NpZ25lZF90b19uYW1lID0gaW5jaWRlbnQuYXNzaWduZWRfdG8ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50LnN0YXR1cyA9IGluY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS5rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5jaWRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4vLyAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coaW5jaWRlbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pbmNpZGVudHMgPSBpbmNpZGVudHM7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LnRvdGFsSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUub25fZXJyb3IocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuaW5jaWRlbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZXJyb3IgPSByZWFzb24uZXJyb3JzLkVycm9yO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKCdBRERJTkdfSU5DSURFTlQnKTtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdF9kYXRhID0ge1wiZmllbGRfNTJjYTQ1Njk2MmJhOFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibGF0XCI6IHJlc29ydC5tYXBfbGF0LFxuICAgICAgICAgICAgICAgICAgICBcImxvbmdcIjogcmVzb3J0Lm1hcF9sbmcsXG4gICAgICAgICAgICAgICAgICAgIFwiYWNjdXJhY3lcIjogMTZcbiAgICAgICAgICAgICAgICB9fTtcblxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKGRlZmF1bHRfZGF0YSwgZGVmYXVsdHMpO1xuICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5jcmVhdGVJbmNpZGVudChkZWZhdWx0X2RhdGEpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbygnSU5DSURFTlRfQURERUQnKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcHJpbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdwcmludGluZyBpbmNpZGVudCAnICsgaWQpO1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ1BSSU5USU5HJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaWQgIT09IG51bGwgfHwgaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIEpTRmlkZGxlIGxvZ28gYXMgYSBzYW1wbGUgaW1hZ2UgdG8gYXZvaWQgY29tcGxpY2F0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgZXhhbXBsZSB3aXRoIGNyb3NzLWRvbWFpbiBpc3N1ZXMuXG4gICAgICAgICAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2luY2lkZW50cy8nICsgaWQgKyAnL3ByaW50Lz90aW1lc3RhbXA9JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYXV0aG9yaXphdGlvbiA9IExTLmdldCgnQXV0aG9yaXphdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBMUy5nZXQoJ3Rva2VuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBhdXRob3JpemF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ3Rva2VuJywgdG9rZW4pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFzayBmb3IgdGhlIHJlc3VsdCBhcyBhbiBBcnJheUJ1ZmZlci5cbiAgICAgICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcblxuICAgICAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9idGFpbiBhIGJsb2I6IFVSTCBmb3IgdGhlIGltYWdlIGRhdGEuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFsgYXJyYXlCdWZmZXJWaWV3IF0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL3BkZicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsQ3JlYXRvciA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlVVJMID0gdXJsQ3JlYXRvci5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlVVJMID0gJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwoZmlsZVVSTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG93bmxvYWRmaWxlbmFtZSA9IGlkK1wiLnBkZlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gYW5ndWxhci5lbGVtZW50KCc8YS8+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3IuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogZmlsZVVSTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiBkb3dubG9hZGZpbGVuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVswXS5jbGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG5cblxuLy8gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5wcmludChpZClcbi8vICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheUJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoWyBhcnJheUJ1ZmZlclZpZXcgXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vcGRmJyB9KTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmxDcmVhdG9yID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVUkwgPSB1cmxDcmVhdG9yLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVVUkwgPSAkc2NlLnRydXN0QXNSZXNvdXJjZVVybChmaWxlVVJMKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb3dubG9hZGZpbGVuYW1lID0gaWQrXCIucGRmXCI7XG4vL1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IGFuZ3VsYXIuZWxlbWVudCgnPGEvPicpO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmF0dHIoe1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IGZpbGVVUkwsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAnX2JsYW5rJyxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZDogZG93bmxvYWRmaWxlbmFtZVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlbMF0uY2xpY2soKTtcbi8vXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3I7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS5saXN0KTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QucmFuZ2UuZGF0ZUZyb20nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgJiYgbmV3VmFsdWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QucmFuZ2UuZGF0ZVRvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlICYmIG5ld1ZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0Lml0ZW1zUGVyUGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuY3VycmVudFBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ0luY2lkZW50U2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCAnJGxvZycsICdVc2VyU2VydmljZScsICdMUycsICAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkbG9nLCBVc2VyU2VydmljZSwgTFMsIENPTkZJRywgQXBpU2VydmljZSkge1xuXG4gICAgICAgIHZhciBBUEkgPSB7XG4gICAgICAgICAgICBiYXNlOiAgQ09ORklHLkFQSV9VUkwgKyAnL2luY2lkZW50cy8nLFxuICAgICAgICAgICAgZ2V0VXJsOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJy8nICsgaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbi8vICAgICAgICAgICAgX3VzZXIgOiBudWxsLFxuXG4gICAgICAgICAgICBmZXRjaEFsbDogZnVuY3Rpb24gKGRhdGVGcm9tLCBkYXRlVG8sIHJlc29ydF9pZCwgY2h1bmssIHBhZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSwge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9mcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfdG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmZXRjaExpc3Q6IGZ1bmN0aW9uIChkYXRlRnJvbSwgZGF0ZVRvLCByZXNvcnRfaWQsIGNodW5rLCBwYWdlLCBwcmVkaWNhdGUsIGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZSB8fCAnZHRfY3JlYXRlZCc7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSwge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9mcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfdG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfYnk6cHJlZGljYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfYnlfZGlyZWN0aW9uOiBkaXJlY3Rpb24gPyAnZGVzYyc6J2FzYydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoUmVwb3J0OiBmdW5jdGlvbiAoZGF0ZUZyb20sIGRhdGVUbywgY2h1bmssIHBhZ2UsIG1vZGVsLCByZXNvcnRfaWQsIGZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlZnJvbTogZGF0ZUZyb20sXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRldG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OihwYWdlIC0gMSkgKiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dF9mb3JtYXQ6IGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtb2RlbCwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSAmJiB2YWx1ZS5maWVsZCAmJiB2YWx1ZS5maWVsZC5mdWxsa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzW3ZhbHVlLmZpZWxkLmZ1bGxrZXldID0gZmlsdGVyc1t2YWx1ZS5maWVsZC5mdWxsa2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuZmllbGQuZnVsbGtleV0ucHVzaCh2YWx1ZS52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlLmhhc093blByb3BlcnR5KCdjaGlsZEZpZWxkJykgJiYgdmFsdWUuY2hpbGRGaWVsZC52YWx1ZSAmJiAodmFsdWUuY2hpbGRGaWVsZC52YWx1ZSAhPSAnYWxsJykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbdmFsdWUuY2hpbGRGaWVsZC5maWVsZC5mdWxsa2V5XSA9IGZpbHRlcnNbdmFsdWUuY2hpbGRGaWVsZC5maWVsZC5mdWxsa2V5XSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzW3ZhbHVlLmNoaWxkRmllbGQuZmllbGQuZnVsbGtleV0ucHVzaCh2YWx1ZS5jaGlsZEZpZWxkLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9yZXBvcnRzL3RhYmxlLycsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOmZpbHRlcnNcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmZXRjaENoYXJ0OiBmdW5jdGlvbiAobW9kZWwsIGNoYXJ0LCByZXNvcnRfaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3J0X2lkOiByZXNvcnRfaWRcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvcmVwb3J0cy8nK2NoYXJ0KycvJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6bW9kZWxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmZXRjaENoYXJ0Q1NWOiBmdW5jdGlvbiAobW9kZWwsIGNoYXJ0LCByZXNvcnRfaWQsIGZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvcnRfaWQ6IHJlc29ydF9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dF9mb3JtYXQ6IGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9yZXBvcnRzLycrY2hhcnQrJy8nLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTptb2RlbFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoU3RhdHVzUmVwb3J0OiBmdW5jdGlvbiAoZGF0ZUZyb20sIGRhdGVUbywgc3RhdHVzX2xpc3QsIGNodW5rLCBwYWdlLCBvdXRwdXRfZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL3JlcG9ydHMvc3RhdHVzLycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVmcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRldG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuazogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAocGFnZSAtIDEpICogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXNfbGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRfZm9ybWF0OiBvdXRwdXRfZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSArIGlkICsgJy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmZXRjaE1hcDogZnVuY3Rpb24gKGRhdGVGcm9tLCBkYXRlVG8sIHJlc29ydF9pZCwgY2h1bmssIHBhZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSwge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9mcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVfdG86IGRhdGVUbyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZV9zdGF0dXM6IFwiMSwyLDMsNCw1LDYsN1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBwcmludDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICdpZCc6IGlkIHx8ICcnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgQVBJLmdldFVybChkYXRhLmlkKSArICcvcHJpbnQvJylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmZXRjaE5vdGVzOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogaWQgfHwgJydcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQVBJLmJhc2UgKyBpZCArICcvbm90ZXMvJylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBhZGROb3RlOiBmdW5jdGlvbiAoaW5jaWRlbnRfaWQsIG5vdGUsIHRpbWUpIHtcbiAgICAgICAgICAgICAgICAvL3ZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIC8vICAgICdpZCc6IGlkIHx8ICcnXG4gICAgICAgICAgICAgICAgLy99O1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLy8nbm90ZV9pZCc6ICcnLFxuICAgICAgICAgICAgICAgICAgICAnZmllbGRfNTJjYTQ0OGRnOTRqYTMnOiBub3RlLFxuICAgICAgICAgICAgICAgICAgICAnZmllbGRfNTJjYTQ0OGRnOTRqYTQnOiB0aW1lXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSArIGluY2lkZW50X2lkICsgJy9ub3Rlcy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0U3RhdHVzZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvL3ZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIC8vICAgICdpZCc6IGlkIHx8ICcnXG4gICAgICAgICAgICAgICAgLy99O1xuXG4vLyAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuLy8gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgJ3N0YXR1cy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cblxuICAgICAgICAgICAgc2F2ZU5vdGU6IGZ1bmN0aW9uIChpZCwgbm90ZV9pZCwgbm90ZSkge1xuICAgICAgICAgICAgICAgIC8vdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgLy8gICAgJ2lkJzogaWQgfHwgJydcbiAgICAgICAgICAgICAgICAvL307XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAvLydub3RlX2lkJzogJycsXG4gICAgICAgICAgICAgICAgICAgICdjb250ZW50Jzogbm90ZSxcbiAgICAgICAgICAgICAgICAgICAgJ25vdGVfZGF0ZSc6IG5ldyBEYXRlKClcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgaWQgKyAnL25vdGVzLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzYXZlSW5jaWRlbnQ6IGZ1bmN0aW9uIChpZCwgaW5jaWRlbnREYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICdpZCc6IGlkIHx8ICcnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdkYXRhJzogaW5jaWRlbnREYXRhXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnB1dChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgaWQgKyAnLycsIGluY2lkZW50RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjcmVhdGVJbmNpZGVudDogZnVuY3Rpb24gKGluY2lkZW50RGF0YSkge1xuICAgICAgICAgICAgICAgIC8vdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgLy8gICAgJ2lkJzogaWQgfHwgJydcbiAgICAgICAgICAgICAgICAvL307XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvL3ZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLy8gICAgJ2RhdGEnOiBpbmNpZGVudERhdGFcbiAgICAgICAgICAgICAgICAvL307XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gaW5jaWRlbnREYXRhIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzOiBmdW5jdGlvbiAoaWQsIGluY2lkZW50RGF0YSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGluY2lkZW50RGF0YSB8fCB7fTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBBUEkuYmFzZSArIGlkICsgJy9zdGF0dXMvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZUluY2lkZW50OiBmdW5jdGlvbiAoaWQsIGluY2lkZW50RGF0YSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGluY2lkZW50RGF0YSB8fCB7fTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnB1dChBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSS5iYXNlICsgaWQgKyAnLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdXBkYXRlTG9jYXRpb246IGZ1bmN0aW9uIChpZCwgaW5jaWRlbnREYXRhKSB7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgdmFyIHBhcmFtcyA9IGluY2lkZW50RGF0YSB8fCB7fTtcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQVBJLmJhc2UgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgLy8gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgLy8gICAgICAgIH0pXG4gICAgICAgICAgICAvLyAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuICAgICAgICAgICAgLy8gICAgICAgIH0pO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgfTtcblxuLy8gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1dKTtcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ1F1ZXN0aW9uU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCAnJGxvZycsICckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnTFMnLCAnQ09ORklHJywnQXBpU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICRsb2csICRyb290U2NvcGUsICR3aW5kb3csIExTLCBDT05GSUcsIEFwaVNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKExTLmdldCgndXNlcicpKTtcbi8vICAgICAgICAkbG9nLmxvZyhjdXJyZW50VXNlcik7XG5cbiAgICAgICAgdmFyIHJlc29ydF9pZD0gY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQ7XG4vLyAgICAgICAgJGxvZy5sb2cocmVzb3J0X2lkKTtcblxuXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2luY2lkZW50cy9jb25maWcvJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvcnRfaWQ6IHJlc29ydF9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4vLyAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xuICAgIH1dKTtcblxuIiwiLy8gQ2FsbCBwYXJlbnQgbW9kdWxlIHJlZmVyZW5jZVxuYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG5cbiAgICAuc2VydmljZSgnVXBsb2FkU2VydmljZScsXG4gICAgWyckaHR0cCcsXG4gICAgICAgICckcScsXG4gICAgICAgICdDT05GSUcnLFxuICAgICAgICAnTFMnLFxuICAgICAgICAnQXBpU2VydmljZScsXG4gICAgICAgIGZ1bmN0aW9uICgkaHR0cCwgJHEsIENPTkZJRywgTFMsIEFwaVNlcnZpY2UpIHtcblxuXG4gICAgICAgICAgICB2YXIgQVBJX1VQTE9BRCA9IENPTkZJRy5BUElfVVJMICsgJy9pbmNpZGVudHMve2lkfS9tZWRpYS8nO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgIEBwYXJhbXMgaW5jaWRlbnRJZCAtIFRoZSBpbmNpZGVudCBJZFxuICAgICAgICAgICAgICAgICBAcGFyYW1zIHR5cGUgLSBUaGUgZmlsZSB0eXBlIHRvIHVwbG9hZCAoaW1hZ2UgfHwgZmlsZSlcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB1cGxvYWQ6IGZ1bmN0aW9uIChpbmNpZGVudElkLCBmb3JtRGF0YSwgdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGZkID0gJHEuZGVmZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvblByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGZkLm5vdGlmeShldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZpbmlzaCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZVRleHQgPSBldmVudC50YXJnZXQucmVzcG9uc2VUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnN0YXR1cyA9PSAnMjAwJyAmJiByZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGZkLnJlc29sdmUoc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRmZC5yZWplY3QoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGZkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBBcGlTZXJ2aWNlLmJhc2UoKSArIEFQSV9VUExPQUQucmVwbGFjZSgne2lkfScsIGluY2lkZW50SWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IG9uUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkZW5kJywgb25GaW5pc2gsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdXAgcmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICB4aHIub3BlbignUE9TVCcsIHVybCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGF1dGhvcml6YXRpb24gPSBMUy5nZXQoJ0F1dGhvcml6YXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gTFMuZ2V0KCd0b2tlbicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRob3JpemF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgYXV0aG9yaXphdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ3Rva2VuJywgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyZSFcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQoZm9ybURhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZmQucHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1dKTsiLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0xvY2F0aW9uQWRkQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIExvY2F0aW9uU2VydmljZSwgQXJlYVNlcnZpY2UsIGN1cnJlbnRVc2VyLCBncm93bCwgbGVhZmxldERhdGEsICRodHRwLCBob3RrZXlzKSB7XG5cbiAgICAgICAgdmFyIHN0eWxlX2xpZnRzID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNmZjAwMDBcIixcbiAgICAgICAgICAgIFwiZGFzaEFycmF5XCI6IFwiMTUsNVwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2J1aWxkaW5ncyA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMDAwMGZmXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjFcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzdHlsZV9ncmVlbiA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMDBmZjAwXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfYmx1ZSA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMDAwMGZmXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfZG91YmxlYmx1ZSA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMDAwMGZmXCIsXG4gICAgICAgICAgICBcImRhc2hBcnJheVwiOiBcIjE1LDEwLDEsMTAsMSwxMFwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2JsYWNrID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9kb3VibGVibGFjayA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICBcImRhc2hBcnJheVwiOiBcIjE1LDEwLDEsMTAsMSwxMFwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVzb3J0X2lkID0gY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQ7XG5cbiAgICAgICAgJHNjb3BlLm1hcCA9IHtcbiAgICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgLy9zY3JvbGxXaGVlbFpvb206IGZhbHNlLFxuICAgICAgICAgICAgICAgIC8vZG91YmxlQ2xpY2tab29tOmZhbHNlLFxuICAgICAgICAgICAgICAgIHRyYWNrUmVzaXplOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhbjoge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC44NSxcbiAgICAgICAgICAgICAgICAgICAgZWFzZUxpbmVhcml0eTogMC4zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgIGxhdDogNzAuMDAsXG4gICAgICAgICAgICAgICAgbG5nOiAzNS4wMCxcbiAgICAgICAgICAgICAgICB6b29tOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2VyczogW10sXG4gICAgICAgICAgICBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICBiYXNlbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZVJvYWRtYXA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdNYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUeXBlOiAnUk9BRE1BUCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ29vZ2xlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnb29nbGVUZXJyYWluOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVGVycmFpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllclR5cGU6ICdURVJSQUlOJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnb29nbGUnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZUh5YnJpZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NhdGVsbGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllclR5cGU6ICdIWUJSSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dvb2dsZSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvL3tcInJlc29ydF9jb3VudFwiOjEsXCJ1c2VyX2lkXCI6XCIzOTdkYjE3NS0xYzI4LTQzODUtODZmOS1iY2RjNWJiZjAzZmZcIixcIm5hbWVcIjpcIk1yIE1hbmFnZXJcIixcInBob25lXCI6XCIwMTM4NTYyODk0XCIsXCJyb2xlX2lkXCI6W3tcInZhbHVlXCI6MyxcImtleVwiOlwibWFuYWdlclwifV0sXCJyZXNvcnRzXCI6W3tcInJlc29ydF9sb2dvXCI6XCJcIixcIm1hcF9rbWxcIjpcImh0dHA6Ly9hcGkubWVkaWM1Mi5sb2NhbC9zdGF0aWMvY29udGVudC9jZjU5N2U2Yi0yNWY5LTRmYTktOGRlZi0yNzkwZTFlZjJkYWMvcGVyaXNoZXIua21sX3NoVWtBckIuanNvblwiLFwicmVwb3J0X2Zvcm1cIjpcIlwiLFwicmVzb3J0X2lkXCI6XCJjZjU5N2U2Yi0yNWY5LTRmYTktOGRlZi0yNzkwZTFlZjJkYWNcIixcInJlc29ydF9uYW1lXCI6XCJQZXJpc2hlclwiLFwibWFwX3R5cGVcIjp7XCJ2YWx1ZVwiOjEsXCJrZXlcIjpcIkdvb2dsZSBNYXBcIn0sXCJtYXBfbGF0XCI6LTM2LjQwNDQ3MSxcIm1hcF9sbmdcIjoxNDguNDEzODg3LFwidW5pdF9mb3JtYXRcIjp7XCJ2YWx1ZVwiOjEsXCJrZXlcIjpcIk1ldHJpY1wifSxcInRpbWV6b25lXCI6XCJBdXN0cmFsaWEvU3lkbmV5XCIsXCJkYXRldGltZV9mb3JtYXRcIjp7XCJ2YWx1ZVwiOjEsXCJrZXlcIjpcImRkL21tL3l5eXkgaGg6bW06c3NcIn0sXCJyZXNvcnRfY29udHJvbGxlZF9zdWJzdGFuY2VzXCI6dHJ1ZSxcInJlc29ydF9hc3NldF9tYW5hZ2VtZW50XCI6dHJ1ZX1dLFwidG9rZW5cIjpcIjk5ODQwMjZkMDExOTQ5ZTA0NWIyYTFmZjMxMzhhYzY5ODY3NGU3YzBcIixcInVzZXJfY29ubmVjdGVkXCI6e1widmFsdWVcIjoxLFwia2V5XCI6XCJuZXR3b3JrXCJ9LFwidXNlcl9jb250cm9sbGVkX3N1YnN0YW5jZXNcIjp0cnVlLFwidXNlcl9hc3NldF9tYW5hZ2VtZW50XCI6dHJ1ZSxcImVtYWlsXCI6XCJtYW5hZ2VyQHBlcmlzaGVyc2tpLmNvbVwiLFwicm9sZVwiOlwiTWFuYWdlclwiLFwiaXNNYW5hZ2VyXCI6dHJ1ZX1cblxuICAgICAgICAkc2NvcGUubWFwLm1hcmtlcnMgPSBbe1xuICAgICAgICAgICAgLy8gZ3JvdXA6ICcnLFxuICAgICAgICAgICAgbGF0OiBwYXJzZUZsb2F0KGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ubWFwX2xhdCksXG4gICAgICAgICAgICBsbmc6IHBhcnNlRmxvYXQoY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbG5nKSxcbiAgICAgICAgICAgIC8vaWNvbjogZGl2SWNvbihpY29uLCBpbmNpZGVudC5pbmNpZGVudF9waywgaW5jaWRlbnQuaW5jaWRlbnRfc3RhdHVzWzBdLmNvbG9yKSxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxuLy8gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBkaXZJY29uKGljb24sICRmaWx0ZXIoJ3RvRWxhcHNlZFRpbWUnKShpbmNpZGVudC5kdF9jcmVhdGVkLCBcIm1tOnNzXCIpKVxuICAgICAgICB9XTtcblxuICAgICAgICBpZiAoISgkc2NvcGUubWFwLmluaXRpYWxpemVkKSkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRVc2VyICYmIGN1cnJlbnRVc2VyLnJlc29ydHMubGVuZ3RoID4gMCAmJiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9rbWwpIHtcbiAgICAgICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmdldChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9rbWwpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uRWFjaEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBDb250ZW50ID0gZmVhdHVyZS5wcm9wZXJ0aWVzLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cFRpdGxlID0gZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzICYmIGZlYXR1cmUucHJvcGVydGllcy5wb3B1cENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBDb250ZW50ICs9IGZlYXR1cmUucHJvcGVydGllcy5wb3B1cENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmJpbmRQb3B1cChwb3B1cENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYnVpbGRpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICBMLmdlb0pzb24oZGF0YS5idWlsZGluZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2J1aWxkaW5ncycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9idWlsZGluZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVfYnVpbGRpbmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBvbkVhY2hGZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBydW5zXG4gICAgICAgICAgICAgICAgICAgICAgICBMLmdlb0pzb24oZGF0YS5ydW5zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmVhdHVyZS5wcm9wZXJ0aWVzLnJhdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ3JlZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdzdHlsZV9ncmVlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2dyZWVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9ncmVlbjsgLy8gRWFzaWVzdCAvIEdyZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmx1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2JsdWUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9ibHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9ibHVlOyAvLyBEaWZmaWN1bHQgLyBCbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlYmx1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2RvdWJsZWJsdWUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9kb3VibGVibHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9kb3VibGVibHVlOyAvLyBNb3JlIERpZmZpY3VsdCAvIERvdWJsZSBCbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxhY2snOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdzdHlsZV9ibGFjaycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2JsYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9ibGFjazsgLy8gTW9zdCBEaWZmaWN1bHQgLyBCbGFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZWJsYWNrJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfZG91YmxlYmxhY2snKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9kb3VibGVibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVfZG91YmxlYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBvbkVhY2hGZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgbGlmdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuZ2VvSnNvbihkYXRhLmxpZnRzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdzdHlsZV9saWZ0cycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9saWZ0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9saWZ0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FYWNoRmVhdHVyZTogb25FYWNoRmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuYWRkVG8obWFwKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9sYXQgJiYgY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbG5nKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubGF0ID0gcGFyc2VGbG9hdChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9sYXQpO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxuZyA9IHBhcnNlRmxvYXQoY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbG5nKTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5tYXBfbGF0ID0gJHNjb3BlLm1hcC5jZW50ZXIubGF0O1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXBfbG9uZyA9ICRzY29wZS5tYXAuY2VudGVyLmxuZztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA9IDE4O1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBob3RrZXlzLmJpbmRUbygkc2NvcGUpLmFkZCh7XG4gICAgICAgICAgICBjb21ibzogJysnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdab29tIGluJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3pvb21pbmcgaW4nKTtcblxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubWFwLmNlbnRlci56b29tIDwgMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSArPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldFpvb20oJHNjb3BlLm1hcC5jZW50ZXIuem9vbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcnNpc3RlbnQ6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSkuYWRkKHtcbiAgICAgICAgICAgIGNvbWJvOiAnLScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1pvb20gb3V0JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3pvb21pbmcgb3V0Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSAtPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldFpvb20oJHNjb3BlLm1hcC5jZW50ZXIuem9vbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJzaXN0ZW50OiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCdsZWFmbGV0RGlyZWN0aXZlTWFya2VyLmRyYWdlbmQnLCBmdW5jdGlvbiAoZSwgYXJncykge1xuICAgICAgICAgICAgJHNjb3BlLm1hcF9sYXQgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoYXJncy5sZWFmbGV0RXZlbnQudGFyZ2V0Ll9sYXRsbmcubGF0KSAqIDEwMDAwKSAvIDEwMDAwO1xuICAgICAgICAgICAgJHNjb3BlLm1hcF9sb25nID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGFyZ3MubGVhZmxldEV2ZW50LnRhcmdldC5fbGF0bG5nLmxuZykgKiAxMDAwMCkgLyAxMDAwMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnbWFwX2xhdCcsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBtYXBfbGF0ID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG5ld1ZhbHVlKSAqIDEwMDAwKSAvIDEwMDAwO1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzWzBdLmxhdCA9IG1hcF9sYXQ7XG4gICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sYXQ9IG1hcF9sYXQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ21hcF9sb25nJywgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIG1hcF9sb25nID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG5ld1ZhbHVlKSAqIDEwMDAwKSAvIDEwMDAwO1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzWzBdLmxuZyA9IG1hcF9sb25nO1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubG5nPSBtYXBfbG9uZztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgQXJlYVNlcnZpY2UuZmV0Y2hBbGwoMTAwMCwgMCwgJycsICdhcmVhX25hbWUnLCAnYXNjJylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFyZWFzID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXJlYV9pZCA9ICRzY29wZS5hcmVhc1swXS5hcmVhX2lkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLmFkZExvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkFERF9MT0NBVElPTlwiKTtcblxuXG4gICAgICAgICAgICBMb2NhdGlvblNlcnZpY2UuYWRkKCRzY29wZS5sb2NhdGlvbl9uYW1lLCAkc2NvcGUuYXJlYV9pZCwgJHNjb3BlLm1hcF9sYXQsICRzY29wZS5tYXBfbG9uZykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5zdWNjZXNzKFwibG9jYXRpb25fY3JlYXRlZF9zdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhcImxvY2F0aW9uc1wiLCB7YXJlYUlkOiRzY29wZS5hcmVhX2lkfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgJHNjb3BlLmVycm9yID0gZXJyb3IuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL2FuZ3VsYXIuZm9yRWFjaChlcnJvciwgZnVuY3Rpb24gKGVycm9ycywgZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgaWYgKGZpZWxkID09ICdub25fZmllbGRfZXJyb3JzJykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgLy8gR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIC8vRmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJHNldFZhbGlkaXR5KCdiYWNrZW5kJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZXJyb3JzW2ZpZWxkXSA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0xvY2F0aW9uRWRpdEN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCBMb2NhdGlvblNlcnZpY2UsIEFyZWFTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsIGxlYWZsZXREYXRhLCAkaHR0cCwgaG90a2V5cykge1xuICAgICAgICB2YXIgaWQgPSAkc3RhdGVQYXJhbXMubG9jYXRpb25JZDtcblxuICAgICAgICB2YXIgc3R5bGVfbGlmdHMgPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiI2ZmMDAwMFwiLFxuICAgICAgICAgICAgXCJkYXNoQXJyYXlcIjogXCIxNSw1XCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfYnVpbGRpbmdzID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMDAwZmZcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiMVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0eWxlX2dyZWVuID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMGZmMDBcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9ibHVlID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMDAwZmZcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9kb3VibGVibHVlID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMDAwZmZcIixcbiAgICAgICAgICAgIFwiZGFzaEFycmF5XCI6IFwiMTUsMTAsMSwxMCwxLDEwXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfYmxhY2sgPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2RvdWJsZWJsYWNrID0ge1xuICAgICAgICAgICAgXCJjb2xvclwiOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgIFwiZGFzaEFycmF5XCI6IFwiMTUsMTAsMSwxMCwxLDEwXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZXNvcnRfaWQgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9pZDtcblxuICAgICAgICAkc2NvcGUubWFwID0ge1xuICAgICAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICAvL3Njcm9sbFdoZWVsWm9vbTogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy9kb3VibGVDbGlja1pvb206ZmFsc2UsXG4gICAgICAgICAgICAgICAgdHJhY2tSZXNpemU6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFuOiB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjg1LFxuICAgICAgICAgICAgICAgICAgICBlYXNlTGluZWFyaXR5OiAwLjNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgICAgbGF0OiA3MC4wMCxcbiAgICAgICAgICAgICAgICBsbmc6IDM1LjAwLFxuICAgICAgICAgICAgICAgIHpvb206IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXJrZXJzOiBbXSxcbiAgICAgICAgICAgIGxheWVyczoge1xuICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlUm9hZG1hcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ01hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllclR5cGU6ICdST0FETUFQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnb29nbGUnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZVRlcnJhaW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdUZXJyYWluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVHlwZTogJ1RFUlJBSU4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dvb2dsZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlSHlicmlkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnU2F0ZWxsaXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVHlwZTogJ0hZQlJJRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ29vZ2xlJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8ve1wicmVzb3J0X2NvdW50XCI6MSxcInVzZXJfaWRcIjpcIjM5N2RiMTc1LTFjMjgtNDM4NS04NmY5LWJjZGM1YmJmMDNmZlwiLFwibmFtZVwiOlwiTXIgTWFuYWdlclwiLFwicGhvbmVcIjpcIjAxMzg1NjI4OTRcIixcInJvbGVfaWRcIjpbe1widmFsdWVcIjozLFwia2V5XCI6XCJtYW5hZ2VyXCJ9XSxcInJlc29ydHNcIjpbe1wicmVzb3J0X2xvZ29cIjpcIlwiLFwibWFwX2ttbFwiOlwiaHR0cDovL2FwaS5tZWRpYzUyLmxvY2FsL3N0YXRpYy9jb250ZW50L2NmNTk3ZTZiLTI1ZjktNGZhOS04ZGVmLTI3OTBlMWVmMmRhYy9wZXJpc2hlci5rbWxfc2hVa0FyQi5qc29uXCIsXCJyZXBvcnRfZm9ybVwiOlwiXCIsXCJyZXNvcnRfaWRcIjpcImNmNTk3ZTZiLTI1ZjktNGZhOS04ZGVmLTI3OTBlMWVmMmRhY1wiLFwicmVzb3J0X25hbWVcIjpcIlBlcmlzaGVyXCIsXCJtYXBfdHlwZVwiOntcInZhbHVlXCI6MSxcImtleVwiOlwiR29vZ2xlIE1hcFwifSxcIm1hcF9sYXRcIjotMzYuNDA0NDcxLFwibWFwX2xuZ1wiOjE0OC40MTM4ODcsXCJ1bml0X2Zvcm1hdFwiOntcInZhbHVlXCI6MSxcImtleVwiOlwiTWV0cmljXCJ9LFwidGltZXpvbmVcIjpcIkF1c3RyYWxpYS9TeWRuZXlcIixcImRhdGV0aW1lX2Zvcm1hdFwiOntcInZhbHVlXCI6MSxcImtleVwiOlwiZGQvbW0veXl5eSBoaDptbTpzc1wifSxcInJlc29ydF9jb250cm9sbGVkX3N1YnN0YW5jZXNcIjp0cnVlLFwicmVzb3J0X2Fzc2V0X21hbmFnZW1lbnRcIjp0cnVlfV0sXCJ0b2tlblwiOlwiOTk4NDAyNmQwMTE5NDllMDQ1YjJhMWZmMzEzOGFjNjk4Njc0ZTdjMFwiLFwidXNlcl9jb25uZWN0ZWRcIjp7XCJ2YWx1ZVwiOjEsXCJrZXlcIjpcIm5ldHdvcmtcIn0sXCJ1c2VyX2NvbnRyb2xsZWRfc3Vic3RhbmNlc1wiOnRydWUsXCJ1c2VyX2Fzc2V0X21hbmFnZW1lbnRcIjp0cnVlLFwiZW1haWxcIjpcIm1hbmFnZXJAcGVyaXNoZXJza2kuY29tXCIsXCJyb2xlXCI6XCJNYW5hZ2VyXCIsXCJpc01hbmFnZXJcIjp0cnVlfVxuXG4gICAgICAgIGlmICghKCRzY29wZS5tYXAuaW5pdGlhbGl6ZWQpKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFVzZXIgJiYgY3VycmVudFVzZXIucmVzb3J0cy5sZW5ndGggPiAwICYmIGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ubWFwX2ttbCkge1xuICAgICAgICAgICAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xuXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmdldChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9rbWwpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gb25FYWNoRmVhdHVyZShmZWF0dXJlLCBsYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cENvbnRlbnQgPSBmZWF0dXJlLnByb3BlcnRpZXMuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwVGl0bGUgPSBmZWF0dXJlLnByb3BlcnRpZXMubmFtZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlLnByb3BlcnRpZXMgJiYgZmVhdHVyZS5wcm9wZXJ0aWVzLnBvcHVwQ29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cENvbnRlbnQgKz0gZmVhdHVyZS5wcm9wZXJ0aWVzLnBvcHVwQ29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYmluZFBvcHVwKHBvcHVwQ29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBidWlsZGluZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuZ2VvSnNvbihkYXRhLmJ1aWxkaW5ncywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfYnVpbGRpbmdzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2J1aWxkaW5ncztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9idWlsZGluZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRWFjaEZlYXR1cmU6IG9uRWFjaEZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmFkZFRvKG1hcCk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHJ1bnNcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuZ2VvSnNvbihkYXRhLnJ1bnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmZWF0dXJlLnByb3BlcnRpZXMucmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdncmVlbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2dyZWVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfZ3JlZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2dyZWVuOyAvLyBFYXNpZXN0IC8gR3JlZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdibHVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfYmx1ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2JsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2JsdWU7IC8vIERpZmZpY3VsdCAvIEJsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkb3VibGVibHVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfZG91YmxlYmx1ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2RvdWJsZWJsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2RvdWJsZWJsdWU7IC8vIE1vcmUgRGlmZmljdWx0IC8gRG91YmxlIEJsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdibGFjayc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2JsYWNrJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2JsYWNrOyAvLyBNb3N0IERpZmZpY3VsdCAvIEJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlYmxhY2snOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdzdHlsZV9kb3VibGVibGFjaycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2RvdWJsZWJsYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9kb3VibGVibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRWFjaEZlYXR1cmU6IG9uRWFjaEZlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmFkZFRvKG1hcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBsaWZ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgTC5nZW9Kc29uKGRhdGEubGlmdHMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2xpZnRzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2xpZnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2xpZnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBvbkVhY2hGZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA9IDE4O1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBob3RrZXlzLmJpbmRUbygkc2NvcGUpLmFkZCh7XG4gICAgICAgICAgICBjb21ibzogJysnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdab29tIGluJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3pvb21pbmcgaW4nKTtcblxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubWFwLmNlbnRlci56b29tIDwgMTgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSArPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldFpvb20oJHNjb3BlLm1hcC5jZW50ZXIuem9vbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcnNpc3RlbnQ6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSkuYWRkKHtcbiAgICAgICAgICAgIGNvbWJvOiAnLScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1pvb20gb3V0JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3pvb21pbmcgb3V0Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSAtPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldFpvb20oJHNjb3BlLm1hcC5jZW50ZXIuem9vbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJzaXN0ZW50OiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBBcmVhU2VydmljZS5mZXRjaEFsbCgxMDAwLCAwLCAnJywgJ2FyZWFfbmFtZScsICdhc2MnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXJlYXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxvY2F0aW9uLmFyZWFfaWQgPSAkc2NvcGUuYXJlYXNbMF0uYXJlYV9pZDtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgJHNjb3BlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX0xPQ0FUSU9OXCIpO1xuICAgICAgICAgICAgICAgIExvY2F0aW9uU2VydmljZS5mZXRjaChpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9uID0gZGF0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sb2NhdGlvbi5hcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9uLmFyZWFfaWQgPSAkc2NvcGUubG9jYXRpb24uYXJlYS5hcmVhX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5tYXBfbGF0ICYmIGRhdGEubWFwX2xvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sYXQgPSBkYXRhLm1hcF9sYXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubG5nID0gZGF0YS5tYXBfbG9uZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2VycyA9IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogJHNjb3BlLm1hcC5jZW50ZXIubGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6ICRzY29wZS5tYXAuY2VudGVyLmxuZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kb24oJ2xlYWZsZXREaXJlY3RpdmVNYXJrZXIuZHJhZ2VuZCcsIGZ1bmN0aW9uIChlLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9uLm1hcF9sYXQgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoYXJncy5sZWFmbGV0RXZlbnQudGFyZ2V0Ll9sYXRsbmcubGF0KSAqIDEwMDAwKSAvIDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2NhdGlvbi5tYXBfbG9uZyA9IE1hdGgucm91bmQocGFyc2VGbG9hdChhcmdzLmxlYWZsZXRFdmVudC50YXJnZXQuX2xhdGxuZy5sbmcpICogMTAwMDApIC8gMTAwMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sYXQgPSAkc2NvcGUubG9jYXRpb24ubWFwX2xhdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sbmcgPSAkc2NvcGUubG9jYXRpb24ubWFwX2xvbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnbG9jYXRpb24ubWFwX2xhdCcsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgJiYgbmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcF9sYXQgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQobmV3VmFsdWUpICogMTAwMDApIC8gMTAwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2Vyc1swXS5sYXQgPSBtYXBfbGF0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sYXQgPSBtYXBfbGF0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdsb2NhdGlvbi5tYXBfbG9uZycsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgJiYgbmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcF9sb25nID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG5ld1ZhbHVlKSAqIDEwMDAwKSAvIDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLm1hcmtlcnNbMF0ubG5nID0gbWFwX2xvbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxuZyA9IG1hcF9sb25nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIlVQREFURV9MT0NBVElPTlwiKTtcbiAgICAgICAgICAgICAgICBMb2NhdGlvblNlcnZpY2UudXBkYXRlKGlkLCAkc2NvcGUubG9jYXRpb24ubG9jYXRpb25fbmFtZSwgJHNjb3BlLmxvY2F0aW9uLmFyZWFfaWQsICRzY29wZS5sb2NhdGlvbi5tYXBfbGF0LCAkc2NvcGUubG9jYXRpb24ubWFwX2xvbmcpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5zdWNjZXNzKFwibG9jYXRpb25fdXBkYXRlZF9zdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdMb2NhdGlvbkxpc3RDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRsb2cnLCAnJHN0YXRlUGFyYW1zJywgJyRpbnRlcmNvbScsICdMb2NhdGlvblNlcnZpY2UnLCAnQXJlYVNlcnZpY2UnLCAnY3VycmVudFVzZXInLCAnZ3Jvd2wnLCAnJHVpbW9kYWwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCBMb2NhdGlvblNlcnZpY2UsIEFyZWFTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsICRtb2RhbCkge1xuXG5cbiAgICAgICAgdmFyIGFyZWFJZD0nJztcblxuICAgICAgICBpZigkc3RhdGVQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2FyZWFJZCcpICYmICRzdGF0ZVBhcmFtcy5hcmVhSWQpIHtcbiAgICAgICAgICAgIGFyZWFJZCA9ICRzdGF0ZVBhcmFtcy5hcmVhSWQ7XG4gICAgICAgIH1cblxuICAgICAgICBBcmVhU2VydmljZS5mZXRjaEFsbCgxMDAwLCAwLCAnJywgJ2FyZWFfbmFtZScsICdhc2MnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXJlYXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5hcmVhcy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAgICAgYXJlYV9pZDonX19lbXB0eV9fJyxcbiAgICAgICAgICAgICAgICAgICAgYXJlYV9uYW1lOidBbGwgQXJlYXMnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYXJlYV9pZD1hcmVhSWQ7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5saXN0ID0ge1xuICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgZmlsdGVyZWQ6IFtdLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IDIwLFxuICAgICAgICAgICAgdG90YWxJdGVtczogMCxcbiAgICAgICAgICAgIHRvdGFsUGFnZXM6IDAsXG4gICAgICAgICAgICBwcmVkaWNhdGU6ICdsb2NhdGlvbl9uYW1lJyxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuXG4gICAgICAgICAgICBzZXRQYWdlOiBmdW5jdGlvbiAocGFnZU51bSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmN1cnJlbnRQYWdlID0gcGFnZU51bTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZpbHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyA9ICRzY29wZS5saXN0LmZpbHRlcmVkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzb3J0X2J5OiBmdW5jdGlvbiAocHJlZGljYXRlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJldmVyc2UgPSAhJHNjb3BlLmxpc3QucmV2ZXJzZTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ2ZldGNoaW5nIGl0ZW1zLi4uJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19BUkVBXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGFyZWFfaWQgPSAkc2NvcGUuYXJlYV9pZDtcbiAgICAgICAgICAgICAgICBpZigkc2NvcGUuYXJlYV9pZCA9PSAnX19lbXB0eV9fJyl7XG4gICAgICAgICAgICAgICAgICAgIGFyZWFfaWQgPSAnJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBMb2NhdGlvblNlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgJycsYXJlYV9pZCwgJHNjb3BlLmxpc3QucHJlZGljYXRlLCAkc2NvcGUubGlzdC5yZXZlcnNlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuaXRlbXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNlYXJjaDogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX0FSRUFcIik7XG5cbiAgICAgICAgICAgICAgICBMb2NhdGlvblNlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgdGV4dCwgJHNjb3BlLmxpc3QucHJlZGljYXRlLCAkc2NvcGUubGlzdC5yZXZlcnNlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuaXRlbXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFyY2hpdmU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZW1vdmluZ1wiKTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9sb2NhdGlvbnMvdGVtcGxhdGVzL2NvbmZpcm0uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIExvY2F0aW9uU2VydmljZS5yZW1vdmUoaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuYWRkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKFwidXNlcl9hZGRcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0Lml0ZW1zUGVyUGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuY3VycmVudFBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdhcmVhX2lkJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgJiYgbmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbG9jYXRpb25zJywge2FyZWFJZDpuZXdWYWx1ZX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgZmlsdGVyVGV4dFRpbWVvdXQ7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdzZWFyY2gnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVGV4dFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChmaWx0ZXJUZXh0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmFsdWUgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNlYXJjaChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOyAvLyBkZWxheSAyNTAgbXNcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAuc2VydmljZXMnKVxuICAgIC5zZXJ2aWNlKCdMb2NhdGlvblNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJyR3aW5kb3cnLCAnJGludGVyY29tJywgJyRsb2cnLCAnTFMnLCAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkd2luZG93LCAkaW50ZXJjb20sICRsb2csIExTLCBDT05GSUcsIEFwaVNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbiAgICAgICAgICAgIGZldGNoQWxsOiBmdW5jdGlvbiAoY2h1bmssIHBhZ2UsIHRleHQsIGFyZWFJZCwgcHJlZGljYXRlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICBwcmVkaWNhdGUgPSBwcmVkaWNhdGUgfHwgJ2xvY2F0aW9uX25hbWUnO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9sb2NhdGlvbnMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaDogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhX2lkOiBhcmVhSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfYnk6IHByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbiA/ICdkZXNjJyA6ICdhc2MnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKGlkLCBuYW1lLCBhcmVhX2lkLCBtYXBfbGF0LCBtYXBfbG9uZykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdsb2NhdGlvbl9uYW1lJzogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2FyZWFfaWQnOiBhcmVhX2lkLFxuICAgICAgICAgICAgICAgICAgICAnbWFwX2xhdCc6IG1hcF9sYXQsXG4gICAgICAgICAgICAgICAgICAgICdtYXBfbG9uZyc6IG1hcF9sb25nXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLnB1dChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9sb2NhdGlvbnMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAobmFtZSwgYXJlYV9pZCwgbWFwX2xhdCwgbWFwX2xvbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2xvY2F0aW9uX25hbWUnOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAnYXJlYV9pZCc6IGFyZWFfaWQsXG4gICAgICAgICAgICAgICAgICAgICdtYXBfbGF0JzogbWFwX2xhdCxcbiAgICAgICAgICAgICAgICAgICAgJ21hcF9sb25nJzogbWFwX2xvbmdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9sb2NhdGlvbnMvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9sb2NhdGlvbnMvJyArIGlkICsgJy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChpZCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdmaXJzdF9uYW1lJzogZmlyc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2xhc3RfbmFtZSc6IGxhc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzogZW1haWxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVsZXRlKEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2xvY2F0aW9ucy8nICsgaWQgKyAnLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfV0pO1xuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0hlYXRtYXBDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJHN0YXRlLCAkbG9jYXRpb24sICR0aW1lb3V0LCAkbG9nLCAkZmlsdGVyLCAkaW50ZXJjb20sIFVzZXJTZXJ2aWNlLCBjdXJyZW50VXNlciwgSW5jaWRlbnRTZXJ2aWNlLCBncm93bCwgbGVhZmxldERhdGEsIERhdGVSYW5nZVNlcnZpY2UsICRodHRwLCBzZXR0aW5ncykge1xuXG4gICAgICAgIHZhciBzdHlsZV9saWZ0cyA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZmYwMDAwXCIsXG4gICAgICAgICAgICBcImRhc2hBcnJheVwiOiBcIjE1LDVcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9idWlsZGluZ3MgPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIxXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX3JlZCA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZmYwMDAwXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfZ3JlZW4gPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwZmYwMFwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2JsdWUgPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgXCJ3ZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2RvdWJsZWJsdWUgPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgXCJkYXNoQXJyYXlcIjogXCIxNSwxMCwxLDEwLDEsMTBcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9ibGFjayA9IHtcbiAgICAgICAgICAgIFwiY29sb3JcIjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICBcIndlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfZG91YmxlYmxhY2sgPSB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgXCJkYXNoQXJyYXlcIjogXCIxNSwxMCwxLDEwLDEsMTBcIixcbiAgICAgICAgICAgIFwid2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG5cbiAgICAgICAgJGludGVyY29tLnVwZGF0ZSh7XG4gICAgICAgICAgICBlbWFpbDogY3VycmVudFVzZXIuZW1haWwsXG4gICAgICAgICAgICBuYW1lOiBjdXJyZW50VXNlci5uYW1lLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHVzZXJfaWQ6IGN1cnJlbnRVc2VyLnVzZXJfaWQsXG4gICAgICAgICAgICBjb21wYW55OiB7XG4gICAgICAgICAgICAgICAgaWQ6IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X25hbWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb2xlOiBjdXJyZW50VXNlci5yb2xlX2lkWzBdLmtleSxcbiAgICAgICAgICAgIGRhc2hib2FyZF9mZWF0dXJlX2xhc3RfdXNlZDogXCJIZWF0bWFwXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGRhdGVfZm9ybWF0X21hcHBpbmcgPSB7XG4gICAgICAgICAgICBcIk1NL0REL1lZWVlcIjogXCJNTS9kZC95eXl5XCIsXG4gICAgICAgICAgICBcIkREL01NL1lZWVlcIjogXCJkZC9NTS95eXl5XCJcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXS5kYXRldGltZV9mb3JtYXQua2V5O1xuICAgICAgICB2YXIgZGF0ZV9mb3JtYXQgPSAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0LnNsaWNlKDAsMTApO1xuICAgICAgICAkc2NvcGUuZGF0ZV9mb3JtYXQgPSBkYXRlX2Zvcm1hdF9tYXBwaW5nW2RhdGVfZm9ybWF0XTtcblxuICAgICAgICB2YXIgY3VycmVudCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHZhciB0eiA9IGpzdHouZGV0ZXJtaW5lKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gdG9VVEModmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQodmFsdWUsICdZWVlZLU1NLUREIEhIOm1tOnNzJykudHoodHoubmFtZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvTG9jYWxUaW1lKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50LnV0Yyh2YWx1ZSkudHoodHoubmFtZSgpKS5mb3JtYXQoJHNjb3BlLmRhdGV0aW1lX2Zvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGlmZiA9IG5ldyBEYXRlKGN1cnJlbnQuZ2V0VGltZSgpIC0gKDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKSk7XG4gICAgICAgIHZhciB0ekRhdGUgPSBtb21lbnQoY3VycmVudCkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgIC8vdmFyIHN0YXJ0ID0gdHpEYXRlICsgJyAwMDowMDowMCc7XG4gICAgICAgIHZhciBlbmQgPSB0ekRhdGUgKyAnIDIzOjU5OjU5JztcblxuICAgICAgICB2YXIgcmVzb3J0ID0gY3VycmVudFVzZXIucmVzb3J0c1swXTtcbiAgICAgICAgdmFyIHJlc29ydF9pZCA9IHJlc29ydC5yZXNvcnRfaWQ7XG4gICAgICAgICRzY29wZS5saXN0ID0gRGF0ZVJhbmdlU2VydmljZS5yYW5nZTtcblxuICAgICAgICAkc2NvcGUubWFwTG9hZGVkID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGRpdkljb24gPSBmdW5jdGlvbiAoaWNvbiwgdGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcbiAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzIwMCwgMF0sXG4gICAgICAgICAgICAgICAgaWNvbkFuY2hvcjogWzIyLCA5NF0sXG4gICAgICAgICAgICAgICAgcG9wdXBBbmNob3I6IFs1NSwgLTIwMF0sXG4gICAgICAgICAgICAgICAgaHRtbDogJzxkaXYgY2xhc3M9XCInICsgaWNvbiArICdcXFwiPjxzcGFuPjxpPjwvaT48c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPjwvc3Bhbj48L2Rpdj4nXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5tYXAgPSB7XG4gICAgICAgICAgICBpbml0aWFsaXplZDpmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4vLyAgICAgICAgICAgICAgICBzY3JvbGxXaGVlbFpvb206IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRyYWNrUmVzaXplOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhbjoge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC44NSxcbiAgICAgICAgICAgICAgICAgICAgZWFzZUxpbmVhcml0eTogMC4zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgIGxhdDogcmVzb3J0Lm1hcF9sYXQsXG4gICAgICAgICAgICAgICAgbG5nOiByZXNvcnQubWFwX2xuZyxcbiAgICAgICAgICAgICAgICB6b29tOiAxNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHt9LFxuICAgICAgICAgICAgbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgYmFzZWxheWVyczoge1xuICAgICAgICAgICAgICAgICAgICBnb29nbGVSb2FkbWFwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnR29vZ2xlIFN0cmVldHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUeXBlOiAnUk9BRE1BUCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ29vZ2xlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnb29nbGVUZXJyYWluOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnR29vZ2xlIFRlcnJhaW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUeXBlOiAnVEVSUkFJTicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ29vZ2xlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnb29nbGVIeWJyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdHb29nbGUgSHlicmlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyVHlwZTogJ0hZQlJJRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ29vZ2xlJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcIm92ZXJsYXlzXCI6IHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGhlYXRtYXAgPSBuZXcgTC5oZWF0TGF5ZXIoW10se3JhZGl1czoyNSwgbWF4Wm9vbToxOCwgbWluT3BhY2l0eTowLjI1fSk7XG5cbiAgICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbiAobWFwKSB7XG4gICAgICAgICAgICBtYXAuYWRkTGF5ZXIoaGVhdG1hcCk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50VXNlciAmJiBjdXJyZW50VXNlci5yZXNvcnRzLmxlbmd0aCA+IDAgJiYgY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfa21sKSB7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2V0dGluZ3MubWFwX2ttbCkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uRWFjaEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3B1cENvbnRlbnQgPSBmZWF0dXJlLnByb3BlcnRpZXMuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9wdXBUaXRsZSA9IGZlYXR1cmUucHJvcGVydGllcy5uYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZS5wcm9wZXJ0aWVzICYmIGZlYXR1cmUucHJvcGVydGllcy5wb3B1cENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cENvbnRlbnQgKz0gZmVhdHVyZS5wcm9wZXJ0aWVzLnBvcHVwQ29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmJpbmRQb3B1cChwb3B1cENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGJ1aWxkaW5nc1xuICAgICAgICAgICAgICAgICAgICBMLmdlb0pzb24oZGF0YS5idWlsZGluZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdzdHlsZV9idWlsZGluZ3MnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9idWlsZGluZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2J1aWxkaW5ncztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25FYWNoRmVhdHVyZTogb25FYWNoRmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXApO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHJ1bnNcbiAgICAgICAgICAgICAgICAgICAgTC5nZW9Kc29uKGRhdGEucnVucywge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmZWF0dXJlLnByb3BlcnRpZXMucmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfcmVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9yZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9yZWQ7IC8vIEVhc2llc3QgLyByZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ3JlZW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2dyZWVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9ncmVlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2dyZWVuOyAvLyBFYXNpZXN0IC8gR3JlZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmx1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfYmx1ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfYmx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2JsdWU7IC8vIERpZmZpY3VsdCAvIEJsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlYmx1ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3R5bGVfZG91YmxlYmx1ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfZG91YmxlYmx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2RvdWJsZWJsdWU7IC8vIE1vcmUgRGlmZmljdWx0IC8gRG91YmxlIEJsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxhY2snOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2JsYWNrJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5zdHlsZV9ibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2JsYWNrOyAvLyBNb3N0IERpZmZpY3VsdCAvIEJsYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZWJsYWNrJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCdzdHlsZV9kb3VibGVibGFjaycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfZG91YmxlYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZV9kb3VibGVibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb25FYWNoRmVhdHVyZTogb25FYWNoRmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICB9KS5hZGRUbyhtYXApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBsaWZ0c1xuICAgICAgICAgICAgICAgICAgICBMLmdlb0pzb24oZGF0YS5saWZ0cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ3N0eWxlX2xpZnRzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfbGlmdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0eWxlX2xpZnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBvbkVhY2hGZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgIH0pLmFkZFRvKG1hcCk7XG5cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdGltZXIgPSBudWxsO1xuXG4gICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ3Jvd2wuaW5mbygnTE9BRElOR19JTkNJREVOVFMnKTtcbiAgICAgICAgICAgIHZhciBzdGFydF90aW1lID0gdG9VVEMobW9tZW50KCRzY29wZS5saXN0LmRhdGVGcm9tKS5mb3JtYXQoJ1lZWVktTU0tREQgMDA6MDA6MDAnKSk7XG4gICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QuZGF0ZVRvKS5mb3JtYXQoJ1lZWVktTU0tREQgMjM6NTk6NTknKSk7XG5cbiAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5mZXRjaEFsbChzdGFydF90aW1lLCBlbmRfdGltZSwgcmVzb3J0X2lkLCAyMDAwLCAxKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHMgPSBkYXRhLnJlc3VsdHM7XG5cbiAgICAgICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoKS50aGVuKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmNpZGVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUG9pbnRzID0gJHNjb3BlLmluY2lkZW50cy5tYXAoZnVuY3Rpb24gKGluY2lkZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jaWRlbnQubG9jYXRpb24ubGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNpZGVudC5sb2NhdGlvbi5sb25nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLjJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYXRtYXAuc2V0TGF0TG5ncyhkYXRhUG9pbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYXRtYXAucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUubWFwTG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBMb2FkZWQ9dHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5oaWdobGlnaHQoJHNjb3BlLmluY2lkZW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLnpvb20gPSBzZXR0aW5ncy5pbml0aWFsX21hcF96b29tX2xldmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aW1lciA9ICR0aW1lb3V0KCRzY29wZS5pbml0LCAxNTAwMCk7XG5cbiAgICAgICAgICAgICRzY29wZS4kb24oXG4gICAgICAgICAgICAgICAgXCIkZGVzdHJveVwiLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5nZXRNYXJrZXIgPSBmdW5jdGlvbiAoaW5jaWRlbnQpIHtcbiAgICAgICAgICAgIHZhciBpY29uID0gKGluY2lkZW50LnN0YXR1cyA9PSAnY2xvc2VkJyB8fCBpbmNpZGVudC5zdGF0dXMgPT0gJ29uc2NlbmUnKSA/ICdtYXAtdXNlci1pY29uJyA6ICdtYXAtd2FybmluZy1pY29uJztcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsYXQ6IGluY2lkZW50LmxhdCxcbiAgICAgICAgICAgICAgICBsbmc6IGluY2lkZW50LmxuZyxcbiAgICAgICAgICAgICAgICBpY29uOiBkaXZJY29uKGljb24sIGluY2lkZW50LnRpbWVfc3RhcnRlZClcblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaW5mbyA9IHtcbiAgICAgICAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICAgICAgICBjdXJyZW50OiBudWxsLFxuICAgICAgICAgICAgbm90ZTogbnVsbCxcbiAgICAgICAgICAgIG5vdGVzOiBudWxsXG4gICAgICAgIH07XG5cbi8vICAgICAgICAkc2NvcGUuYWRkTm90ZSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvLm5vdGUubGVuZ3RoID4gMCkge1xuLy8gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbygnU0FWSU5HX05PVEUnKTtcbi8vICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5zYXZlTm90ZSgkc2NvcGUuaW5mby5jdXJyZW50LmlkLCAnJywgJHNjb3BlLmluZm8ubm90ZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8vLyAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG4vL1xuLy8gICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ05PVEVfU0FWRUQnKTtcbi8vICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW5vdyA9IG5ldyBEYXRlKCk7XG4vLyAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSB0aW1lbm93LmdldEhvdXJzKCkgKyBcIjpcIiArIHRpbWVub3cuZ2V0TWludXRlcygpO1xuLy8gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQubm90ZXMucHVzaCh7bWVzc2FnZTogJHNjb3BlLmluZm8ubm90ZSwgdGltZTogdGltZX0pO1xuLy8gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLm5vdGUgPSBudWxsO1xuLy8gICAgICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgIH1cbi8vICAgICAgICB9O1xuXG4vLyAgICAgICAgJHNjb3BlLiRvbignbGVhZmxldERpcmVjdGl2ZU1hcmtlci5jbGljaycsIGZ1bmN0aW9uIChlLCBhcmdzKSB7XG4vLy8vICAgICAgICAgICAgY29uc29sZS5sb2coYXJncyk7XG4vLyAgICAgICAgICAgIHZhciBpZCA9IHBhcnNlSW50KGFyZ3MubWFya2VyTmFtZSlcbi8vICAgICAgICAgICAgJHNjb3BlLmhpZ2hsaWdodCgkc2NvcGUuaW5jaWRlbnRzW2lkXSk7XG4vLyAgICAgICAgICAgICRzY29wZS5pbmZvLmlzT3BlbiA9IHRydWU7XG4vLyAgICAgICAgfSk7XG4vL1xuLy8gICAgICAgICRzY29wZS4kb24oJ2xlYWZsZXREaXJlY3RpdmVNYXAuY2xpY2snLCBmdW5jdGlvbiAoZSwgYXJncykge1xuLy8gICAgICAgICAgICAkc2NvcGUuaW5mby5pc09wZW4gPSBmYWxzZTtcbi8vICAgICAgICB9KTtcbi8vXG4gICAgICAgICRzY29wZS5oaWdobGlnaHQgPSBmdW5jdGlvbiAoaW5jaWRlbnQpIHtcbi8vICAgICAgICAgICAgJGxvZy5sb2coaW5jaWRlbnQpO1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubGF0ID0gaW5jaWRlbnQubG9jYXRpb24ubGF0O1xuICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubG5nID0gaW5jaWRlbnQubG9jYXRpb24ubG9uZztcbi8vICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA9IDE2OyAvL2luY2lkZW50Lnpvb207XG5cbi8vICAgICAgICAgICAgJHNjb3BlLmluZm8uaXNPcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQgPSBpbmNpZGVudDtcbiAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQubm90ZXMgPSBbXTtcbiAgICAgICAgfTtcblxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ01hcEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRzdGF0ZScsICckbG9jYXRpb24nLCAnJHRpbWVvdXQnLCAnJGxvZycsICckZmlsdGVyJyxcbiAgICAgICAgJyRpbnRlcmNvbScsICdVc2VyU2VydmljZScsICdRdWVzdGlvblNlcnZpY2UnLCAnY3VycmVudFVzZXInLCAnSW5jaWRlbnRTZXJ2aWNlJywgJ2dyb3dsJywgJ2hvdGtleXMnLFxuICAgICAgICAnJGh0dHAnLCAncXVlc3Rpb25zJywgJyR0cmFuc2xhdGUnLCAnJHVpbW9kYWwnLCAnTFMnLCAnUmVzb3J0U2VydmljZScsICdzZXR0aW5ncycsXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRzdGF0ZSwgJGxvY2F0aW9uLCAkdGltZW91dCwgJGxvZywgJGZpbHRlciwgJGludGVyY29tLCBVc2VyU2VydmljZSxcbiAgICAgICAgICAgICAgICAgIFF1ZXN0aW9uU2VydmljZSwgY3VycmVudFVzZXIsIEluY2lkZW50U2VydmljZSwgZ3Jvd2wsIGhvdGtleXMsICRodHRwLCBxdWVzdGlvbnMsXG4gICAgICAgICAgICAgICAgICAkdHJhbnNsYXRlLCAkbW9kYWwsIExTLCBSZXNvcnRTZXJ2aWNlLCBzZXR0aW5ncykge1xuXG4gICAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlID09IFwiUGF0cm9sbGVyXCIpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbyhcImluY2lkZW50c1wiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsQmFzZSA9ICRsb2NhdGlvbi5wcm90b2NvbCgpICsgJzovLycgKyAkbG9jYXRpb24uaG9zdCgpO1xuICAgICAgICBpZiAoJGxvY2F0aW9uLnBvcnQoKSkgdXJsQmFzZSs9ICc6JyArICRsb2NhdGlvbi5wb3J0KCk7XG4gICAgICAgIHVybEJhc2UgKz0gJy9pbWFnZXMvJztcbiAgICAgICAgdmFyIHN0eWxlX2xpZnRzID0ge1xuICAgICAgICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiNmZjAwMDBcIixcbiAgICAgICAgICAgIFwiZmlsbENvbG9yXCI6IFwiI2ZmMDAwMFwiLFxuICAgICAgICAgICAgXCJmaWxsT3BhY2l0eVwiOiAwLjUsXG4gICAgICAgICAgICBcImRhc2hBcnJheVwiOiBcIjE1LDVcIixcbiAgICAgICAgICAgIFwic3Ryb2tlV2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9idWlsZGluZ3MgPSB7XG4gICAgICAgICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgXCJmaWxsQ29sb3JcIjogXCIjMDAwMGZmXCIsXG4gICAgICAgICAgICBcImZpbGxPcGFjaXR5XCI6IDAuNSxcbiAgICAgICAgICAgIFwic3Ryb2tlV2VpZ2h0XCI6IFwiMVwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9yZWQgPSB7XG4gICAgICAgICAgICBcInN0cm9rZUNvbG9yXCI6IFwiI2ZmMDAwMFwiLFxuICAgICAgICAgICAgXCJmaWxsQ29sb3JcIjogXCIjZmYwMDAwXCIsXG4gICAgICAgICAgICBcImZpbGxPcGFjaXR5XCI6IDAuNSxcbiAgICAgICAgICAgIFwic3Ryb2tlV2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9ncmVlbiA9IHtcbiAgICAgICAgICAgIFwic3Ryb2tlQ29sb3JcIjogXCIjMDBmZjAwXCIsXG4gICAgICAgICAgICBcImZpbGxDb2xvclwiOiBcIiMwMGZmMDBcIixcbiAgICAgICAgICAgIFwiZmlsbE9wYWNpdHlcIjogMC41LFxuICAgICAgICAgICAgXCJzdHJva2VXZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2JsdWUgPSB7XG4gICAgICAgICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgXCJmaWxsQ29sb3JcIjogXCIjMDAwMGZmXCIsXG4gICAgICAgICAgICBcImZpbGxPcGFjaXR5XCI6IDAuNSxcbiAgICAgICAgICAgIFwic3Ryb2tlV2VpZ2h0XCI6IFwiM1wiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdHlsZV9kb3VibGVibHVlID0ge1xuICAgICAgICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMwMDAwZmZcIixcbiAgICAgICAgICAgIFwiZmlsbENvbG9yXCI6IFwiIzAwMDBmZlwiLFxuICAgICAgICAgICAgXCJkYXNoQXJyYXlcIjogXCIxNSwxMCwxLDEwLDEsMTBcIixcbiAgICAgICAgICAgIFwiZmlsbE9wYWNpdHlcIjogMC41LFxuICAgICAgICAgICAgXCJzdHJva2VXZWlnaHRcIjogXCIzXCJcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0eWxlX2JsYWNrID0ge1xuICAgICAgICAgICAgXCJzdHJva2VDb2xvclwiOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgIFwiZmlsbENvbG9yXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgXCJmaWxsT3BhY2l0eVwiOiAwLjUsXG4gICAgICAgICAgICBcInN0cm9rZVdlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgc3R5bGVfZG91YmxlYmxhY2sgPSB7XG4gICAgICAgICAgICBcInN0cm9rZUNvbG9yXCI6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgXCJmaWxsQ29sb3JcIjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICBcImRhc2hBcnJheVwiOiBcIjE1LDEwLDEsMTAsMSwxMFwiLFxuICAgICAgICAgICAgXCJmaWxsT3BhY2l0eVwiOiAwLjUsXG4gICAgICAgICAgICBcInN0cm9rZVdlaWdodFwiOiBcIjNcIlxuICAgICAgICB9O1xuXG4gICAgICAgICRpbnRlcmNvbS51cGRhdGUoe1xuICAgICAgICAgICAgZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxuICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIubmFtZSxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICB1c2VyX2lkOiBjdXJyZW50VXNlci51c2VyX2lkLFxuICAgICAgICAgICAgY29tcGFueToge1xuICAgICAgICAgICAgICAgIGlkOiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9uYW1lXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm9sZTogY3VycmVudFVzZXIucm9sZV9pZFswXS5rZXksXG4gICAgICAgICAgICBkYXNoYm9hcmRfZmVhdHVyZV9sYXN0X3VzZWQ6IFwiTWFwXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgdHogPSBqc3R6LmRldGVybWluZSgpO1xuICAgICAgICAkc2NvcGUudHogPSB0ei5uYW1lKCk7XG5cbiAgICAgICAgJHNjb3BlLmRhdGV0aW1lX2Zvcm1hdCA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0uZGF0ZXRpbWVfZm9ybWF0LmtleTtcbiAgICAgICAgJHNjb3BlLmRhdGVfZm9ybWF0ID0gJHNjb3BlLmRhdGV0aW1lX2Zvcm1hdC5zbGljZSgwLDEwKTtcblxuICAgICAgICB2YXIgZGlmZiA9IG5ldyBEYXRlKGN1cnJlbnQuZ2V0VGltZSgpKTsvLyAtICg3ICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgICAgICB2YXIgbG9jYWxfc3RhcnQgPSBtb21lbnQudHooZGlmZiwgdHoubmFtZSgpKS5mb3JtYXQoJ1lZWVktTU0tREQgMDA6MDA6MDAnKTtcbiAgICAgICAgdmFyIGxvY2FsX2VuZCA9IG1vbWVudC50eihkaWZmLCB0ei5uYW1lKCkpLmZvcm1hdCgnWVlZWS1NTS1ERCAyMzo1OTo1OScpO1xuXG4gICAgICAgIHZhciBzdGFydCA9IG1vbWVudC50eihsb2NhbF9zdGFydCwgdHoubmFtZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKTtcbiAgICAgICAgdmFyIGVuZCA9IG1vbWVudC50eihsb2NhbF9lbmQsIHR6Lm5hbWUoKSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG5cbiAgICAgICAgdmFyIHJlc29ydF9pZCA9IGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ucmVzb3J0X2lkO1xuICAgICAgICB2YXIgdXBkYXRlX2luY2lkZW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBsaXN0X2luY2lkZW50cyA9IHRydWU7XG4gICAgICAgIHZhciBzZWxlY3RlZF9pbmNpZGVudF9wayA9IG51bGw7XG4gICAgICAgICRzY29wZS5kYXRldGltZV9mb3JtYXQgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdLmRhdGV0aW1lX2Zvcm1hdC5rZXk7XG4gICAgICAgICRzY29wZS5kYXRlX2Zvcm1hdCA9ICRzY29wZS5kYXRldGltZV9mb3JtYXQuc2xpY2UoMCwxMCk7XG5cbiAgICAgICAgJHNjb3BlLnVzZXJDb25uZWN0ZWQgPSBjdXJyZW50VXNlci51c2VyX2Nvbm5lY3RlZC5rZXk7XG4gICAgICAgICRzY29wZS5pbmNpZGVudFRvSGlnaGxpZ2h0ID0gMDtcbiAgICAgICAgJHNjb3BlLnRlbXBJbmNpZGVudFBrID0gMDtcblxuXG4gICAgICAgICRzY29wZS5zY2hlbWEgPSB7XG4gICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgcHJvcGVydGllczogW11cbiAgICAgICAgfTtcblxuXG4vLyAgICAgICAgU2NoZW1hXHRGb3JtIHR5cGVcbi8vICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlx0dGV4dFxuLy8gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXHRudW1iZXJcbi8vICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcdG51bWJlclxuLy8gICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlx0Y2hlY2tib3hcbi8vICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlx0ZmllbGRzZXRcbi8vICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIiBhbmQgYSBcImVudW1cIlx0c2VsZWN0XG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIiBhbmQgYSBcImVudW1cIiBpbiBhcnJheSB0eXBlXHRjaGVja2JveGVzXG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlx0YXJyYXlcblxuXG4gICAgICAgIHZhciBzY2hlbWFfdHlwZSA9IHtcbiAgICAgICAgICAgICd0ZXh0JzogJ3N0cmluZycsXG4gICAgICAgICAgICAndGV4dGFyZWEnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdudW1iZXInOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdyYW5nZSc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2Fycm93cyc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ3NlbGVjdCc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ211bHRpX3NlbGVjdCc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ3JhZGlvJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnZ2VuZGVyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnaW1hZ2UnOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICdkYXRlX3BpY2tlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2RhdGVfdGltZV9waWNrZXInOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdnb29nbGVfbWFwJzogJ29iamVjdCcsXG4gICAgICAgICAgICAnZmlsZSc6ICdzdHJpbmcnXG4gICAgICAgIH07XG5cbi8vICAgICAgICBGb3JtIFR5cGVcdEJlY29tZXNcbi8vICAgICAgICBmaWVsZHNldFx0YSBmaWVsZHNldCB3aXRoIGxlZ2VuZFxuLy8gICAgICAgIHNlY3Rpb25cdGp1c3QgYSBkaXZcbi8vICAgICAgICBjb25kaXRpb25hbFx0YSBzZWN0aW9uIHdpdGggYSBuZy1pZlxuLy8gICAgICAgIGFjdGlvbnNcdGhvcml6b250YWwgYnV0dG9uIGxpc3QsIGNhbiBvbmx5IHN1Ym1pdCBhbmQgYnV0dG9ucyBhcyBpdGVtc1xuLy8gICAgICAgIHRleHRcdGlucHV0IHdpdGggdHlwZSB0ZXh0XG4vLyAgICAgICAgdGV4dGFyZWFcdGEgdGV4dGFyZWFcbi8vICAgICAgICBudW1iZXJcdGlucHV0IHR5cGUgbnVtYmVyXG4vLyAgICAgICAgcGFzc3dvcmRcdGlucHV0IHR5cGUgcGFzc3dvcmRcbi8vICAgICAgICBjaGVja2JveFx0YSBjaGVja2JveFxuLy8gICAgICAgIGNoZWNrYm94ZXNcdGxpc3Qgb2YgY2hlY2tib3hlc1xuLy8gICAgICAgIHNlbGVjdFx0YSBzZWxlY3QgKHNpbmdsZSB2YWx1ZSlcbi8vICAgICAgICBzdWJtaXRcdGEgc3VibWl0IGJ1dHRvblxuLy8gICAgICAgIGJ1dHRvblx0YSBidXR0b25cbi8vICAgICAgICByYWRpb3NcdHJhZGlvIGJ1dHRvbnNcbi8vICAgICAgICByYWRpb3MtaW5saW5lXHRyYWRpbyBidXR0b25zIGluIG9uZSBsaW5lXG4vLyAgICAgICAgcmFkaW9idXR0b25zXHRyYWRpbyBidXR0b25zIHdpdGggYm9vdHN0cmFwIGJ1dHRvbnNcbi8vICAgICAgICBoZWxwXHRpbnNlcnQgYXJiaXRyYXJ5IGh0bWxcbi8vICAgICAgICB0YWJcdHRhYnMgd2l0aCBjb250ZW50XG4vLyAgICAgICAgYXJyYXlcdGEgbGlzdCB5b3UgY2FuIGFkZCwgcmVtb3ZlIGFuZCByZW9yZGVyXG4vLyAgICAgICAgdGFiYXJyYXlcdGEgdGFiYmVkIHZlcnNpb24gb2YgYXJyYXlcblxuICAgICAgICB2YXIgZm9ybV90eXBlID0ge1xuICAgICAgICAgICAgJ3RleHQnOiAndGV4dCcsXG4gICAgICAgICAgICAncmFuZ2UnOiAndGV4dCcsXG4gICAgICAgICAgICAndGV4dGFyZWEnOiAndGV4dCcsXG4gICAgICAgICAgICAnbnVtYmVyJzogJ251bWJlcicsXG4gICAgICAgICAgICAnYXJyb3dzJzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAnc2VsZWN0JzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAnbXVsdGlfc2VsZWN0JzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAncmFkaW8nOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICdnZW5kZXInOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICdpbWFnZSc6ICdmaWxlX3VwbG9hZCcsXG4gICAgICAgICAgICAnbWVzc2FnZSc6ICdoZWxwJyxcbiAgICAgICAgICAgICdkYXRlX3BpY2tlcic6ICdkYXRlX3BpY2tlcicsXG4gICAgICAgICAgICAnZGF0ZV90aW1lX3BpY2tlcic6ICdkYXRlX3RpbWVfcGlja2VyJyxcbiAgICAgICAgICAgICdnb29nbGVfbWFwJzogJ2dvb2dsZW1hcCcsXG4gICAgICAgICAgICAnZmlsZSc6ICd0ZXh0J1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaG9zZW5UeXBlcyA9IFtcbiAgICAgICAgICAgICd0ZXh0JyxcbiAgICAgICAgICAgICdyYW5nZScsXG4gICAgICAgICAgICAndGV4dGFyZWEnLFxuICAgICAgICAgICAgJ251bWJlcicsXG4gICAgICAgICAgICAnZGVjaW1hbCcsXG4gICAgICAgICAgICAnYXJyb3dzJyxcbiAgICAgICAgICAgICdzZWxlY3QnLFxuICAgICAgICAgICAgJ211bHRpX3NlbGVjdCcsXG4gICAgICAgICAgICAncmFkaW8nLFxuICAgICAgICAgICAgJ2dlbmRlcicsXG4gICAgICAgICAgICAnZGF0ZV9waWNrZXInLFxuICAgICAgICAgICAgJ2RhdGVfdGltZV9waWNrZXInXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIHRhYnMgPSBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXM7XG5cbiAgICAgICAgdmFyIGdldENob2ljZU1hcCA9IGZ1bmN0aW9uIChtYXBWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBfY2hvaWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgIF90aXRsZW1hcCA9IFtdO1xuXG4gICAgICAgICAgICAvLyBMb29wIGFuZCBidWlsZCBjaG9pY2VzIGFuZCB0aXRsZW1hcFxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcFZhbHVlcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGtleS5pbmRleE9mKFwiY29udHJvbGxlZFwiKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaG9pY2VzLnB1c2goe1wiaWRcIjoga2V5LCBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlW2tleV0pfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGl0bGVtYXAucHVzaCh7XCJ2YWx1ZVwiOiBrZXksIFwibmFtZVwiOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWVba2V5XSl9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwiY2hvaWNlc1wiOiBfY2hvaWNlcyxcbiAgICAgICAgICAgICAgICBcInRpdGxlbWFwXCI6IF90aXRsZW1hcFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuZ29vZ2xlTWFwTWFya2VycyA9IFtdO1xuICAgICAgICAkc2NvcGUuZmluZE1hcmtlciA9IGZ1bmN0aW9uKG1hcmtlcil7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmdvb2dsZU1hcE1hcmtlcnMuZmluZChmdW5jdGlvbihnb29nbGVNYXBNYXJrZXIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXJrZXIubG9jYXRpb24udG9TdHJpbmcoKSA9PT0gZ29vZ2xlTWFwTWFya2VyLmluY2lkZW50LmxvY2F0aW9uLnRvU3RyaW5nKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmR0X2NyZWF0ZWQgPT09IGdvb2dsZU1hcE1hcmtlci5pbmNpZGVudC5kdF9jcmVhdGVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5yZWxvY2F0ZU1hcmtlcnMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIGZvdW5kRHVwbGljYXRlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIG1hcmtlcnNDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXAubWFya2Vycyk7XG4gICAgICAgICAgICB2YXIgZm91bmRJZHggPSAxO1xuICAgICAgICAgICAgbWFya2Vyc0NvcHkubWFwKGZ1bmN0aW9uKGxvY2F0aW9uLCBpKSB7XG4gICAgICAgICAgICAgICAgbWFya2Vyc0NvcHkubWFwKGZ1bmN0aW9uKG5leHRMb2NhdGlvbiwgail7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDw9IGkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGFMYXQgPSAobmV4dExvY2F0aW9uLmxhdCAtIGxvY2F0aW9uLmxhdCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YUxuZyA9IChuZXh0TG9jYXRpb24ubG5nIC0gbG9jYXRpb24ubG5nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhTGF0IDwgLjAwMDAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFMbmcgPCAuMDAwMDIpIGZvdW5kID0gWzEsMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoZGVsdGFMbmcgKiAtMSkgPCAuMDAwMDIpIGZvdW5kID0gWzEsLTFdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChkZWx0YUxhdCAqIC0xKSA8IC4wMDAwMil7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGFMbmcgPCAuMDAwMDIpIGZvdW5kID0gWy0xLDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGRlbHRhTG5nICogLTEpIDwgLjAwMDAyKSBmb3VuZCA9IFstMSwtMV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3VuZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzQ29weVtqXS5sbmcgPSBtYXJrZXJzQ29weVtqXS5sbmcgKyAoKC4wMDAwMykpO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZER1cGxpY2F0ZXMucHVzaChqKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXJzQ29weS5tYXAoZnVuY3Rpb24obG9jYXRpb24sIGkpIHtcbiAgICAgICAgICAgICAgICAvLyB2YXIgZm91bmREdXBsaWNhdGUgPVxuICAgICAgICAgICAgICAgIHZhciBjb21wYXNzID0gTWF0aC5jb3MoKChmb3VuZER1cGxpY2F0ZXMubGVuZ3RoICogZm91bmRJZHgpLzM2KSApO1xuICAgICAgICAgICAgICAgIGZvdW5kSWR4Kys7XG4gICAgICAgICAgICAgICAgbWFya2Vyc0NvcHlbaV0ubGF0ID0gbWFya2Vyc0NvcHlbaV0ubGF0ICsgKGNvbXBhc3MgICogLjAwMDAyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlcnNDb3B5O1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuZ2V0SW5jaWRlbnRGcm9tUmVsb2NhdGVkTWFya2VyID0gZnVuY3Rpb24oaW5jaWRlbnQpe1xuICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSAkc2NvcGUucmVsb2NhdGVNYXJrZXJzKCk7XG4gICAgICAgICAgICB2YXIgZm91bmQgPSBtYXJrZXJzLmZpbmQoZnVuY3Rpb24obWFya2VyKXtcbiAgICAgICAgICAgICAgICBpZiAoIW1hcmtlci5pbmNpZGVudCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmNpZGVudC5oZWFkZXIgPT09IG1hcmtlci5pbmNpZGVudC5oZWFkZXI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGZvdW5kO1xuICAgICAgICAgICAgaW5jaWRlbnQubGF0ID0gaW5jaWRlbnQubG9jYXRpb24ubGF0O1xuICAgICAgICAgICAgaW5jaWRlbnQubG5nID0gaW5jaWRlbnQubG9jYXRpb24ubG9uZztcbiAgICAgICAgICAgIHJldHVybiBpbmNpZGVudDtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmluaXRNYXAgPSBmdW5jdGlvbihyZXNpemUpe1xuICAgICAgICAgICAgJHNjb3BlLmdvb2dsZU1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG4gICAgICAgICAgICAgIHpvb206ICRzY29wZS5tYXAuY2VudGVyLnpvb20sXG4gICAgICAgICAgICAgIGNlbnRlcjoge2xhdDogJHNjb3BlLm1hcC5jZW50ZXIubGF0LCBsbmc6ICRzY29wZS5tYXAuY2VudGVyLmxuZyB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRVc2VyICYmIGN1cnJlbnRVc2VyLnJlc29ydHMubGVuZ3RoID4gMCAmJiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9rbWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0UmF0aW5nU3R5bGUgPSBmdW5jdGlvbiAoY29sb3IsIGcpe1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goY29sb3Ipe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ3JlZW4nOiByZXR1cm4gZGF0YS5zdHlsZV9ncmVlbj8gcGFyc2VTdHlsZShkYXRhLnN0eWxlX2dyZWVuLCBnKTogc3R5bGVfZ3JlZW47XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWQnOiByZXR1cm4gZGF0YS5zdHlsZV9yZWQ/IHBhcnNlU3R5bGUoZGF0YS5zdHlsZV9yZWQsIGcpOiBzdHlsZV9yZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdibHVlJzogcmV0dXJuIGRhdGEuc3R5bGVfYmx1ZT8gcGFyc2VTdHlsZShkYXRhLnN0eWxlX2JsdWUsIGcpOiBzdHlsZV9ibHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlYmx1ZSc6IHJldHVybiBkYXRhLnN0eWxlX2RvdWJsZWJsdWU/IHBhcnNlU3R5bGUoZGF0YS5zdHlsZV9kb3VibGVibHVlLCBnKTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZV9kb3VibGVibHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxhY2snOiByZXR1cm4gZGF0YS5zdHlsZV9ibGFjaz8gcGFyc2VTdHlsZShkYXRhLnN0eWxlX2JsYWNrLCBnKTogc3R5bGVfYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkb3VibGVibGFjayc6IHJldHVybiBkYXRhLnN0eWxlX2RvdWJsZWJsYWNrPyBwYXJzZVN0eWxlKGRhdGEuc3R5bGVfZG91YmxlYmxhY2ssIGcpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZV9kb3VibGVibGFjaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlU3R5bGUgPSBmdW5jdGlvbihzdHlsZSwgZ2VvbWV0cnkpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBzdHlsZS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogc3R5bGUuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IHN0eWxlLndlaWdodFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3R5bGUuZGFzaEFycmF5IHx8IHN0eWxlLmRhc2hBcnJheS5sZW5ndGggPT09IDApIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSAnPD94bWwgdmVyc2lvbj1cIjEuMFwiPz48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCI+JztcbiAgICAgICAgICAgICAgICAgICAgcGF0aCs9ICc8bGluZSBzdHJva2UtZGFzaGFycmF5PVwiJyArIHN0eWxlLmRhc2hBcnJheSArICdcIiAnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciB5ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuZm9yRWFjaExhdExuZyhmdW5jdGlvbihnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgrPSAneCcgKyB4ICsgJz1cIicgKyBnLmxhdCgpICsgJ1wiIHknICsgeSArICc9XCInICsgZy5sbmcoKSArICdcIic7XG4gICAgICAgICAgICAgICAgICAgICAgICB4Kys7IHkrKztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHBhdGgrPSAnLz48L3N2Zz4nO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuaWNvbiA9IHsgcGF0aDogcGF0aCB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHNldHRpbmdzLmdlb2pzb247XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhKSBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhLmJ1aWxkaW5ncyB8fCAhZGF0YS5idWlsZGluZ3MuZmVhdHVyZXMpIGRhdGEuYnVpbGRpbmdzID0geyBmZWF0dXJlczogW10gfTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEucnVucyB8fCAhZGF0YS5ydW5zLmZlYXR1cmVzKSBkYXRhLnJ1bnMgPSB7IGZlYXR1cmVzOiBbXSB9O1xuICAgICAgICAgICAgICAgIGlmICghZGF0YS5saWZ0cyB8fCAhZGF0YS5saWZ0cy5mZWF0dXJlcykgZGF0YS5saWZ0cyA9IHsgZmVhdHVyZXM6IFtdIH07XG5cbiAgICAgICAgICAgICAgICBkYXRhLmJ1aWxkaW5ncy5mZWF0dXJlcyA9IGRhdGEuYnVpbGRpbmdzLmZlYXR1cmVzLm1hcChmdW5jdGlvbihmZWF0dXJlKXtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5wcm9wZXJ0aWVzLm93bmVyU2V0ID0gJ0JVSUxESU5HUyc7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGEucnVucy5mZWF0dXJlcyA9IGRhdGEucnVucy5mZWF0dXJlcy5tYXAoZnVuY3Rpb24oZmVhdHVyZSl7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUucHJvcGVydGllcy5vd25lclNldCA9ICdSVU5TJztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZlYXR1cmU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGF0YS5saWZ0cy5mZWF0dXJlcyA9IGRhdGEubGlmdHMuZmVhdHVyZXMubWFwKGZ1bmN0aW9uKGZlYXR1cmUpe1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlLnByb3BlcnRpZXMub3duZXJTZXQgPSAnTElGVFMnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ29vZ2xlTWFwLmRhdGEuYWRkTGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IGV2ZW50LmZlYXR1cmUuZjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZmVhdHVyZS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogZXZlbnQubGF0TG5nLmxhdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGV2ZW50LmxhdExuZy5sbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaW5mb3dpbmRvdy5vcGVuKCRzY29wZS5nb29nbGVNYXApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5nb29nbGVNYXAuZGF0YS5hZGRHZW9Kc29uKGRhdGEuYnVpbGRpbmdzKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ29vZ2xlTWFwLmRhdGEuYWRkR2VvSnNvbihkYXRhLnJ1bnMpO1xuICAgICAgICAgICAgICAgICRzY29wZS5nb29nbGVNYXAuZGF0YS5hZGRHZW9Kc29uKGRhdGEubGlmdHMpO1xuICAgICAgICAgICAgICAgICRzY29wZS5nb29nbGVNYXAuZGF0YS5zZXRTdHlsZShmdW5jdGlvbihmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGZlYXR1cmUuZ2V0R2VvbWV0cnkoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGZlYXR1cmUuZ2V0UHJvcGVydHkoJ293bmVyU2V0JykudG9VcHBlckNhc2UoKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdCVUlMRElOR1MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLnN0eWxlX2J1aWxkaW5ncz8gcGFyc2VTdHlsZShkYXRhLnN0eWxlX2J1aWxkaW5ncywgZ2VvbWV0cnkpIDogc3R5bGVfYnVpbGRpbmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUlVOUyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFJhdGluZ1N0eWxlKGZlYXR1cmUuZ2V0UHJvcGVydHkoJ3JhdGluZycpPyBmZWF0dXJlLmdldFByb3BlcnR5KCdyYXRpbmcnKSA6ICcnLCBnZW9tZXRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMSUZUUyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuc3R5bGVfbGlmdHM/IHBhcnNlU3R5bGUoZGF0YS5zdHlsZV9saWZ0cywgZ2VvbWV0cnkpIDogc3R5bGVfbGlmdHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKCRzY29wZS5nb29nbGVNYXAsIFwicmlnaHRjbGlja1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXQgPSBldmVudC5sYXRMbmcubGF0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGxuZyA9IGV2ZW50LmxhdExuZy5sbmcoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5hZGQobGF0LCBsbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcigkc2NvcGUuZ29vZ2xlTWFwLCBcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5pbmNpZGVudHMsIGZ1bmN0aW9uIChpbmNpZGVudCkge1xuICAgICAgICAgICAgICAgICAgICBpbmNpZGVudC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzaXplKSBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKCRzY29wZS5nb29nbGVNYXAsICdyZXNpemUnKTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJzQ29weSA9ICRzY29wZS5yZWxvY2F0ZU1hcmtlcnMoKTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJzID0gbWFya2Vyc0NvcHkubWFwKGZ1bmN0aW9uKGxvY2F0aW9uLCBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gbG9jYXRpb24uaW5jaWRlbnQuaGVhZGVyLnNwbGl0KCcsJylbMF07XG4gICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9ICBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogdXJsQmFzZSArICdwaW5fJyArIGxvY2F0aW9uLmluY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS5jb2xvciArICcucG5nJyxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogaWQsXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1hcmtlci5pbmNpZGVudCA9IGxvY2F0aW9uLmluY2lkZW50O1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5oaWdobGlnaHQodGhpcy5pbmNpZGVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS51cGRhdGVJbmNpZGVudCh0aGlzLmluY2lkZW50LmluY2lkZW50X2lkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImZpZWxkXzUyY2E0NTY5NjJiYThcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogcG9pbnQubGF0TG5nLmxhdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmc6IHBvaW50LmxhdExuZy5sbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkluY2lkZW50IGxvY2F0aW9uIHVwZGF0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihcImluY2lkZW50X3VwZGF0ZV9mYWlsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5nb29nbGVNYXBNYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUuZ29vZ2xlTWFwQ2x1c3RlciA9IG5ldyBNYXJrZXJDbHVzdGVyZXIoJHNjb3BlLmdvb2dsZU1hcCwgbWFya2Vycywge1xuICAgICAgICAgICAgICAgIGltYWdlUGF0aDogJ2h0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9qYXZhc2NyaXB0L2V4YW1wbGVzL21hcmtlcmNsdXN0ZXJlci9tJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnF1ZXN0aW9uX2l0ZW1zID0gW107XG5cbiAgICAgICAgJHNjb3BlLmZvcm1faXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge307XG5cbiAgICAgICAgZm9yKHZhciBrZXkgaW4gdGFicykge1xuICAgICAgICAgICAgaWYgKHRhYnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHF1ZXN0aW9uIGluIHRhYnNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldLmhhc093blByb3BlcnR5KHF1ZXN0aW9uKSAmJiAocXVlc3Rpb24gPT0gJ1F1ZXN0aW9ucycgfHwgcXVlc3Rpb24gPT0gJ1JlcGVhdGluZ1F1ZXN0aW9ucycpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG0gaW4gdGFic1trZXldW3F1ZXN0aW9uXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV1bcXVlc3Rpb25dLmhhc093blByb3BlcnR5KG0pKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuaGFzT3duUHJvcGVydHkoXCJEZWZhdWx0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0c1ttXSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bXCJEZWZhdWx0XCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNob2ljZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlbWFwID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAnc2VsZWN0JyB8fCBxLlR5cGUgPT0gJ211bHRpX3NlbGVjdCcgfHwgcS5UeXBlID09ICdhcnJvd3MnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleTEgaW4gcS5WYWx1ZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkxKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VNYXAgPSBnZXRDaG9pY2VNYXAocS5WYWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXMgPSBjaG9pY2VNYXAuY2hvaWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAgPSBjaG9pY2VNYXAudGl0bGVtYXA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ2dlbmRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIm1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1hbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcImZlbWFsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVtYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJ5ZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlllc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwibm9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmllbGQnOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBxLlR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVxdWlyZWQnOiBxLlJlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWNlaG9sZGVyJzogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Nob2ljZXMnOiBjaG9pY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcS5PcmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaG9zZW5UeXBlcy5pbmRleE9mKHEuVHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bGxrZXkgPSBtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24gPT0gJ1JlcGVhdGluZ1F1ZXN0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsa2V5ID0ga2V5ICsgJ19fX18nICsgbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICR0cmFuc2xhdGUuaW5zdGFudCh0YWJzW2tleV0uTGFiZWwpICsgJyAtICcgKyAkdHJhbnNsYXRlLmluc3RhbnQocS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBzY2hlbWFfdHlwZVtxLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Z1bGxrZXknOiBmdWxsa2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtdHlwZSc6IGZvcm1fdHlwZVtxLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGVNYXAnOiB0aXRsZW1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JpZ2luYWxUeXBlJzogcS5UeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybV9pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmllbGRzZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDbGFzczogJ2NvbC1sZy00IGNvbC14cy0xMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENsYXNzOiAncGFkLWxlZnQtcmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZm9ybV90eXBlW3EuVHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJHRyYW5zbGF0ZS5pbnN0YW50KHEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6IHEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZU1hcDogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25faXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEuVHlwZSA9PSBcInJlcGVhdGVyXCIgJiYgcS5oYXNPd25Qcm9wZXJ0eSgnUmVwZWF0aW5nUXVlc3Rpb25zJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBxdWVzdGlvbjEgaW4gdGFic1trZXldW3F1ZXN0aW9uXVttXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldW3F1ZXN0aW9uXVttXS5oYXNPd25Qcm9wZXJ0eShxdWVzdGlvbjEpICYmIChxdWVzdGlvbjEgPT0gJ1F1ZXN0aW9ucycgfHwgcXVlc3Rpb24xID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0YWJzW2tleV1bcXVlc3Rpb25dW21dW3F1ZXN0aW9uMV0pIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV1bcXVlc3Rpb25dW21dW3F1ZXN0aW9uMV0uaGFzT3duUHJvcGVydHkobikpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxMSA9IHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bcXVlc3Rpb24xXVtuXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGVtYXAgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocTEuVHlwZSA9PSAnc2VsZWN0JyB8fCBxMS5UeXBlID09ICdtdWx0aV9zZWxlY3QnIHx8IHExLlR5cGUgPT0gJ2Fycm93cycpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5MTEgaW4gcTEuVmFsdWVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocTEuVmFsdWVzLmhhc093blByb3BlcnR5KGtleTExKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaG9pY2VNYXAgPSBnZXRDaG9pY2VNYXAocTEuVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzID0gY2hvaWNlTWFwLmNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwID0gY2hvaWNlTWFwLnRpdGxlbWFwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ2dlbmRlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk1hbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIkZlbWFsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVtYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiWWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtMSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmaWVsZCc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnOiAkdHJhbnNsYXRlLmluc3RhbnQocTEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBxMS5UeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVpcmVkJzogcTEuUmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocTEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Nob2ljZXMnOiBjaG9pY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZGVyJzogcTEuT3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hvc2VuVHlwZXMuaW5kZXhPZihxMS5UeXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZW1hLnByb3BlcnRpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJHRyYW5zbGF0ZS5pbnN0YW50KHRhYnNba2V5XS5MYWJlbCkgKyAnIC0gJyArICR0cmFuc2xhdGUuaW5zdGFudChxMS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiBzY2hlbWFfdHlwZVtxMS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JkZXInOiBxMS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbGtleSc6IG0gKyAnX19fXycgKyBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdrZXknOiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb3JtdHlwZSc6IGZvcm1fdHlwZVtxMS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocTEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZU1hcCc6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1faXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZpZWxkc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sQ2xhc3M6ICdjb2wtbGctNCBjb2wteHMtMTInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDbGFzczogJ3BhZC1sZWZ0LXJpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZvcm1fdHlwZVtxMS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAkdHJhbnNsYXRlLmluc3RhbnQocTEuUGxhY2Vob2xkZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6IHExLk9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVNYXA6IHRpdGxlbWFwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXN0aW9uX2l0ZW1zLnB1c2goaXRlbTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLm1vZGVsID0geyBmaWx0ZXJzOiBbIHt9IF0gfTtcbiAgICAgICAgJHNjb3BlLm1vZGVsLmZpbHRlcnMgPSBfLm1hcChzZXR0aW5ncy5kaXNwYXRjaF9maWVsZF9jaG9pY2UsIGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgXCJmaWVsZFwiOiBfLmZpbmQoJHNjb3BlLnNjaGVtYS5wcm9wZXJ0aWVzLCBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcC5mdWxsa2V5ID09IGNob2ljZS5maWVsZF9rZXk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSkuYWRkKHtcbiAgICAgICAgICAgIGNvbWJvOiAnc2hpZnQrbCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RvZ2dsZSBJbmNpZGVudCBMaXN0JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3RvZ2dsZSBsaXN0Jyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZUxpc3QoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwZXJzaXN0ZW50OiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBob3RrZXlzLmJpbmRUbygkc2NvcGUpLmFkZCh7XG4gICAgICAgICAgICBjb21ibzogJysnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdab29tIGluJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3pvb21pbmcgaW4nKTtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1hcC5jZW50ZXIuem9vbSA8IDE4KSB7ICRzY29wZS5tYXAuY2VudGVyLnpvb20gKz0gMTsgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcnNpc3RlbnQ6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSkuYWRkKHtcbiAgICAgICAgICAgIGNvbWJvOiAnLScsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1pvb20gb3V0JyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJGxvZy5sb2coJ3pvb21pbmcgb3V0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5tYXAuY2VudGVyLnpvb20gPiAxKSB7ICRzY29wZS5tYXAuY2VudGVyLnpvb20gLT0gMTsgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBlcnNpc3RlbnQ6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSkuYWRkKHtcbiAgICAgICAgICAgIGNvbWJvOiAncmV0dXJuJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQWRkIG5vdGUnLFxuICAgICAgICAgICAgYWxsb3dJbjogWydJTlBVVCddLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChldmVudCwgaG90a2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc05hbWUuaW5kZXhPZignbm90ZS1pbnB1dCcpID4gMCkgeyAkc2NvcGUuYWRkTm90ZSgpOyB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGVyc2lzdGVudDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmdldFN0YXR1c2VzKCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8gICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19saXN0ID0gZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJHRyYW5zbGF0ZS5pbnN0YW50KGl0ZW0ua2V5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50X3N0YXR1c19pZDogaXRlbS5pbmNpZGVudF9zdGF0dXNfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogaXRlbS5jb2xvclxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHF1ZXN0aW9ucy5EYXNoYm9hcmRJdGVtcyAmJiBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkXzUyZDQ3YWFjOWJkMTMnKSAmJiBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXMuZmllbGRfNTJkNDdhYWM5YmQxMyAmJiBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXMuZmllbGRfNTJkNDdhYWM5YmQxMy5oYXNPd25Qcm9wZXJ0eSgnUmVwZWF0aW5nUXVlc3Rpb25zJykgJiYgcXVlc3Rpb25zLkRhc2hib2FyZEl0ZW1zLmZpZWxkXzUyZDQ3YWFjOWJkMTMuUmVwZWF0aW5nUXVlc3Rpb25zICYmIHF1ZXN0aW9ucy5EYXNoYm9hcmRJdGVtcy5maWVsZF81MmQ0N2FhYzliZDEzLlJlcGVhdGluZ1F1ZXN0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncGF0cm9sbGVyJykgJiYgcXVlc3Rpb25zLkRhc2hib2FyZEl0ZW1zLmZpZWxkXzUyZDQ3YWFjOWJkMTMuUmVwZWF0aW5nUXVlc3Rpb25zLnBhdHJvbGxlcikge1xuICAgICAgICAgICAgJHNjb3BlLmFzc2lnbmVlcyA9IHF1ZXN0aW9ucy5EYXNoYm9hcmRJdGVtcy5maWVsZF81MmQ0N2FhYzliZDEzLlJlcGVhdGluZ1F1ZXN0aW9ucy5wYXRyb2xsZXIuVmFsdWVzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gaXRlbSkgeyByZXR1cm4geyBrZXk6IGksIG5hbWU6IGl0ZW1baV0gfTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkc2NvcGUuYXNzaWduZWVzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzYXZlVW5zYXZlZEluY2lkZW50SW5mbyA9IGZ1bmN0aW9uICh1bnNhdmVkSW5jaWRlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmICh1bnNhdmVkSW5jaWRlbnQubm90ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudC5ub3Rlcy5mb3JFYWNoKGZ1bmN0aW9uIGFkZE5vdGVGb3JVbnNhdmVkSW5jaWRlbnQoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5hZGROb3RlKGRhdGEuaW5jaWRlbnRfaWQsIGVsZW1lbnQuZmllbGRfNTJjYTQ0OGRnOTRqYTMsIGVsZW1lbnQuZmllbGRfNTJjYTQ0OGRnOTRqYTQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkgeyAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5zYXZlZEluY2lkZW50Lmhhc093blByb3BlcnR5KCd1cGRhdGVkQXNzaWduZWUnKSkge1xuICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS51cGRhdGVJbmNpZGVudChkYXRhLmluY2lkZW50X2lkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImFzc2lnbmVkX3RvXCI6IHVuc2F2ZWRJbmNpZGVudC51cGRhdGVkQXNzaWduZWUuYXNzaWduZWRfdG8gKyAnJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVuc2F2ZWRJbmNpZGVudC5oYXNPd25Qcm9wZXJ0eSgndXBkYXRlZFN0YXR1cycpKSB7XG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLnVwZGF0ZVN0YXR1cyhkYXRhLmluY2lkZW50X2lkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c190eXBlX2lkXCI6IHVuc2F2ZWRJbmNpZGVudC51cGRhdGVkU3RhdHVzLnN0YXR1c190eXBlX2lkICsgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c19kYXRlXCI6IHVuc2F2ZWRJbmNpZGVudC51cGRhdGVkU3RhdHVzLnN0YXR1c19kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ1cGRhdGVkX2J5XCI6IHVuc2F2ZWRJbmNpZGVudC51cGRhdGVkU3RhdHVzLnVwZGF0ZWRfYnlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGF0YSkgeyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bnNhdmVkSW5jaWRlbnQuaGFzT3duUHJvcGVydHkoJ3VwZGF0ZWRMb2NhdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLnVwZGF0ZUluY2lkZW50KGRhdGEuaW5jaWRlbnRfaWQsXG4gICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudC51cGRhdGVkTG9jYXRpb25cbiAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodW5zYXZlZEluY2lkZW50Lmhhc093blByb3BlcnR5KCdpbmNpZGVudF9kYXRhJykpIHtcbiAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UudXBkYXRlSW5jaWRlbnQoZGF0YS5pbmNpZGVudF9pZCxcbiAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50LmluY2lkZW50X2RhdGFcbiAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ21vZGVsLmZpbHRlcnMnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpe1xuXG4gICAgICAgICAgICBpZih1cGRhdGVfaW5jaWRlbnQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9wX2RhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzRGF0YSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgY3VycmVudF9pbmNpZGVudCA9IG51bGw7IGkgPCAkc2NvcGUuaW5jaWRlbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5pbmNpZGVudHNbaV0uaW5jaWRlbnRfcGsgIT0gc2VsZWN0ZWRfaW5jaWRlbnRfcGspXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9pbmNpZGVudCA9ICRzY29wZS5pbmNpZGVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uZWFjaCgkc2NvcGUubW9kZWwuZmlsdGVycywgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgcHJvcC52YWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcC5maWVsZC5mdWxsa2V5LmluZGV4T2YoJ19fX18nKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gcHJvcC5maWVsZC5mdWxsa2V5LnNwbGl0KFwiX19fX1wiLCAyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRfaW5jaWRlbnQuaGFzT3duUHJvcGVydHkocmVzWzBdKSAmJiAhcHJvcF9kYXRhLmhhc093blByb3BlcnR5KHJlc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfaW5jaWRlbnRbcmVzWzBdXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wX2RhdGFbcmVzWzBdXSA9IGN1cnJlbnRfaW5jaWRlbnRbcmVzWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByb3BfZGF0YS5oYXNPd25Qcm9wZXJ0eShyZXNbMF0pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJvcF9kYXRhW3Jlc1swXV0ubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wX2RhdGFbcmVzWzBdXVswXVtyZXNbMV1dID0gcHJvcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcF9kYXRhW3Jlc1swXV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wX2tleV92YWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcF9rZXlfdmFsdWVbcmVzWzFdXSA9IHByb3AudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wX2RhdGFbcmVzWzBdXS5wdXNoKHByb3Bfa2V5X3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wX2RhdGFbcmVzWzBdXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcF9rZXlfdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcF9rZXlfdmFsdWVbcmVzWzFdXSA9IHByb3AudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BfZGF0YVtyZXNbMF1dLnB1c2gocHJvcF9rZXlfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRfaW5jaWRlbnQuaGFzT3duUHJvcGVydHkocmVzWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfaW5jaWRlbnRbcmVzWzBdXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9pbmNpZGVudFtyZXNbMF1dWzBdW3Jlc1sxXV0gPSBwcm9wLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2luY2lkZW50W3Jlc1swXV1bMF1bcmVzWzFdXSA9IHByb3AudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfaW5jaWRlbnRbcmVzWzBdXVswXVtyZXNbMV1dID0gcHJvcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoKGVycil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlfdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5X3ZhbHVlW3Jlc1sxXV0gPSBwcm9wLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2luY2lkZW50W3Jlc1swXV0gPSBba2V5X3ZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BfZGF0YVtwcm9wLmZpZWxkLmZ1bGxrZXldID0gcHJvcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2luY2lkZW50W3Byb3AuZmllbGQuZnVsbGtleV0gPSBwcm9wLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRGF0YSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChoYXNEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaW5mby5jdXJyZW50Lmhhc093blByb3BlcnR5KFwiaW5jaWRlbnRfaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS51cGRhdGVJbmNpZGVudCgkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BfZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihcImluY2lkZW50X3VwZGF0ZV9mYWlsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmNpZGVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5zYXZlZEluY2lkZW50cyA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1bnNhdmVkSW5jaWRlbnRzJykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzLmZvckVhY2goZnVuY3Rpb24gcmVtb3ZlQXJyYXlFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnRlbXBfaW5jaWRlbnRfaWQgPT0gJHNjb3BlLmluZm8uY3VycmVudC50ZW1wX2luY2lkZW50X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWydpbmNpZGVudF9kYXRhJ10gPSBwcm9wX2RhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50ID0gdW5zYXZlZEluY2lkZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgndW5zYXZlZEluY2lkZW50cycsIEpTT04uc3RyaW5naWZ5KHVuc2F2ZWRJbmNpZGVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAkc2NvcGUuaW5jaWRlbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmNpZGVudHNbal0udGVtcF9pbmNpZGVudF9pZCA9PSBpbmNpZGVudC50ZW1wX2luY2lkZW50X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZXh0ZW5kKCRzY29wZS5pbmNpZGVudHNbal0sIHByb3BfZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICB2YXIgY3JlYXRlSGVhZGVyID0gZnVuY3Rpb24gKGluY2lkZW50KSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBpbmNpZGVudDtcblxuICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XG4gICAgICAgICAgICBpdGVtcy5wdXNoKCcjJyArIGluY2lkZW50LmluY2lkZW50X3BrKTtcblxuICAgICAgICAgICAgaWYgKGluY2lkZW50LmFzc2lnbmVkX3RvKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCgkZmlsdGVyKCd0b1RpdGxlY2FzZScpKGluY2lkZW50LmFzc2lnbmVkX3RvLm5hbWUpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5jaWRlbnQuaW5qdXJ5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluanVyeV9kYXRhID0gJGZpbHRlcigndHJhbnNmb3JtSW5qdXJ5Rmlyc3QnKShpbmNpZGVudC5pbmp1cnkpO1xuICAgICAgICAgICAgICAgIGlmIChpbmp1cnlfZGF0YSAmJiBpbmp1cnlfZGF0YS50cmltKCkgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKCRmaWx0ZXIoJ3RvVGl0bGVjYXNlJykoaW5qdXJ5X2RhdGEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCgkZmlsdGVyKCd0b0VsYXBzZWRUaW1lJykoaW5jaWRlbnQuZHRfY3JlYXRlZCwgJ1wibW1bbV0gc3Nbc10nKSk7XG4gICAgICAgICAgICByZXNwb25zZVsnbG9jYWxfZHRfY3JlYXRlZCddID0gbW9tZW50LnV0YyhpbmNpZGVudC5kdF9jcmVhdGVkKS50eih0ei5uYW1lKCkpLmZvcm1hdCgnSEg6bW06c3MnKTtcblxuICAgICAgICAgICAgaXRlbXMucHVzaChyZXNwb25zZVsnbG9jYWxfZHRfY3JlYXRlZCddKTtcbiAgICAgICAgICAgIHJlc3BvbnNlWydoZWFkZXInXSA9IGl0ZW1zLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjcmVhdGVEdW1teUluY2lkZW50ID0gZnVuY3Rpb24gKGxhdCwgbG9uZywgYWNjdXJhY3kpIHtcbiAgICAgICAgICAgIHZhciBpbmNpZGVudF9wayA9IEpTT04ucGFyc2UoTFMuZ2V0KCduZXh0SW5jaWRlbnRQaycpKTtcbiAgICAgICAgICAgIGlmICghbGF0KSBsYXQgPSAkc2NvcGUubWFwLmNlbnRlci5sYXQ7XG4gICAgICAgICAgICBpZiAoIWxvbmcpIGxvbmcgPSAkc2NvcGUubWFwLmNlbnRlci5sbmc7XG4gICAgICAgICAgICBpZiAoIWFjY3VyYWN5KSBhY2N1cmFjeSA9ICRzY29wZS5tYXAuY2VudGVyLnpvb207XG4gICAgICAgICAgICB2YXIgZHVtbXlfaW5jaWRlbnQgPSB7XG4gICAgICAgICAgICAgICAgXCJpbmNpZGVudF9wa1wiOiAnJyxcbiAgICAgICAgICAgICAgICBcImxvY2F0aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJsYXRcIjogbGF0LFxuICAgICAgICAgICAgICAgICAgICBcImxvbmdcIjogbG9uZyxcbiAgICAgICAgICAgICAgICAgICAgXCJhY2N1cmFjeVwiOiBhY2N1cmFjeVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJpbmNpZGVudF9zdGF0dXNcIjogW3tcbiAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcImZmMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICBcImtleVwiOiBcImNhbGxfcmVjZWl2ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiAxXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgXCJhc3NpZ25lZF90b1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBVc2VyU2VydmljZS5jdXJyZW50VXNlcigpWyduYW1lJ10sXG4gICAgICAgICAgICAgICAgICAgIFwidXNlcl9pZFwiOiBVc2VyU2VydmljZS5jdXJyZW50VXNlcigpWyd1c2VyX2lkJ11cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZHRfY3JlYXRlZFwiOiBtb21lbnQobmV3IERhdGUoKSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyksXG4gICAgICAgICAgICAgICAgXCJub3Rlc1wiOiBbXSxcbiAgICAgICAgICAgICAgICBcInRlbXBfaW5jaWRlbnRfaWRcIjogJHNjb3BlLnRlbXBJbmNpZGVudFBrXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLnRlbXBJbmNpZGVudFBrICs9IDE7XG4gICAgICAgICAgICBkdW1teV9pbmNpZGVudCA9IGNyZWF0ZUhlYWRlcihkdW1teV9pbmNpZGVudCk7XG4gICAgICAgICAgICB2YXIgdW5zYXZlZEluY2lkZW50cyA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1bnNhdmVkSW5jaWRlbnRzJykpO1xuICAgICAgICAgICAgaWYgKHVuc2F2ZWRJbmNpZGVudHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIExTLnNldCgndW5zYXZlZEluY2lkZW50cycsIEpTT04uc3RyaW5naWZ5KFtkdW1teV9pbmNpZGVudF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHMudW5zaGlmdChkdW1teV9pbmNpZGVudCk7XG4gICAgICAgICAgICAgICAgTFMuc2V0KCd1bnNhdmVkSW5jaWRlbnRzJywgSlNPTi5zdHJpbmdpZnkodW5zYXZlZEluY2lkZW50cykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRzLnVuc2hpZnQoZHVtbXlfaW5jaWRlbnQpO1xuXG4gICAgICAgICAgICAkc2NvcGUubWFwLm1hcmtlcnMgPSAkc2NvcGUuaW5jaWRlbnRzLm1hcChmdW5jdGlvbiAoaW5jaWRlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWNvbiA9IChpbmNpZGVudC5zdGF0dXMgPT0gJ2Nsb3NlZCcgfHwgaW5jaWRlbnQuc3RhdHVzID09ICdvbnNjZW5lJykgPyAnbWFwLXVzZXItaWNvbicgOiAnbWFwLXdhcm5pbmctaWNvbic7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZ3JvdXA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBsYXQ6IGluY2lkZW50LmxvY2F0aW9uLmxhdCB8fCBwYXJzZUZsb2F0KGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ubWFwX2xhdCksXG4gICAgICAgICAgICAgICAgICAgIGxuZzogaW5jaWRlbnQubG9jYXRpb24ubG9uZyB8fCBwYXJzZUZsb2F0KGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ubWFwX2xuZyksXG4gICAgICAgICAgICAgICAgICAgIGljb246IHVybEJhc2UgKyAncGluXycgKyBpbmNpZGVudC5pbmNpZGVudF9zdGF0dXNbMF0uY29sb3IgKyAnLnBuZycsXG4gICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLnJlbG9jYXRlTWFya2VycygpO1xuXG4gICAgICAgICAgICB2YXIgbXlMYXRMbmcgPSB7IGxhdDogJHNjb3BlLm1hcC5tYXJrZXJzWzBdLmxhdCwgbG5nOiAkc2NvcGUubWFwLm1hcmtlcnNbMF0ubG5nIH07XG4gICAgICAgICAgICB2YXIgZHVtbXlfbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgaWNvbjogdXJsQmFzZSArICdwaW5fJyArIGR1bW15X2luY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS5jb2xvciArICcucG5nJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbXlMYXRMbmcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGluY2lkZW50X3BrLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZHVtbXlfbWFya2VyLmluY2lkZW50ID0gZHVtbXlfaW5jaWRlbnQ7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihkdW1teV9tYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5oaWdobGlnaHQodGhpcy5pbmNpZGVudCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoZHVtbXlfbWFya2VyLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLnVwZGF0ZUluY2lkZW50KHRoaXMuaW5jaWRlbnQuaW5jaWRlbnRfaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmllbGRfNTJjYTQ1Njk2MmJhOFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBwb2ludC5sYXRMbmcubGF0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZzogcG9pbnQubGF0TG5nLmxuZygpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiSW5jaWRlbnQgbG9jYXRpb24gdXBkYXRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKFwiaW5jaWRlbnRfdXBkYXRlX2ZhaWxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS5nb29nbGVNYXBNYXJrZXJzLnVuc2hpZnQoZHVtbXlfbWFya2VyKTtcbiAgICAgICAgICAgIGR1bW15X21hcmtlci5zZXRNYXAoJHNjb3BlLmdvb2dsZU1hcCk7XG4gICAgICAgICAgICByZXR1cm4gZHVtbXlfaW5jaWRlbnRcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUubGlzdCA9IHtcbiAgICAgICAgICAgIGRhdGVGcm9tOiBzdGFydCxcbiAgICAgICAgICAgIGRhdGVUbzogZW5kLFxuXG4gICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uIChsYXQsIGxvbmcsIGFjY3VyYWN5KSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbygnQURESU5HX0lOQ0lERU5UJyk7XG5cbiAgICAgICAgICAgICAgICBsaXN0X2luY2lkZW50cyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdmFyIGluY2lkZW50ID0gY3JlYXRlRHVtbXlJbmNpZGVudChsYXQsIGxvbmcsIGFjY3VyYWN5KTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5oaWdobGlnaHQoaW5jaWRlbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihsYXQpID09PSB1bmRlZmluZWQpIGxhdCA9IGluY2lkZW50LmxvY2F0aW9uLmxhdDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGxvbmcpID09PSB1bmRlZmluZWQpIGxvbmcgPSBpbmNpZGVudC5sb2NhdGlvbi5sb25nO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoYWNjdXJhY3kpID09PSB1bmRlZmluZWQpIGFjY3VyYWN5ID0gaW5jaWRlbnQubG9jYXRpb24uYWNjdXJhY3k7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRfZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWVsZF81MmNhNDU2OTYyYmE4XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGF0XCI6IGxhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibG9uZ1wiOiBsb25nLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhY2N1cmFjeVwiOiBhY2N1cmFjeVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICQuZXh0ZW5kKGRlZmF1bHRfZGF0YSwgZGVmYXVsdHMpO1xuXG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmNyZWF0ZUluY2lkZW50KGRlZmF1bHRfZGF0YSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKCdJTkNJREVOVF9BRERFRCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bnNhdmVkSW5jaWRlbnRzID0gSlNPTi5wYXJzZShMUy5nZXQoJ3Vuc2F2ZWRJbmNpZGVudHMnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50cy5mb3JFYWNoKGZ1bmN0aW9uIHVwZGF0ZUluY2lkZW50SWRVbnNhdmVkSW5jaWRlbnQoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50ZW1wX2luY2lkZW50X2lkID09IGluY2lkZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gc2F2ZVVuc2F2ZWRJbmNpZGVudEluZm8oZWxlbWVudCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50c1tpbmRleF1bJ2luY2lkZW50X2lkJ10gPSBkYXRhLmluY2lkZW50X2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWydpbmNpZGVudF9wayddID0gZGF0YS5pbmNpZGVudF9waztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XSA9IGNyZWF0ZUhlYWRlcih1bnNhdmVkSW5jaWRlbnRzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1bnNhdmVkSW5jaWRlbnRzJywgSlNPTi5zdHJpbmdpZnkodW5zYXZlZEluY2lkZW50cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSAkc2NvcGUuZmluZE1hcmtlcih1bnNhdmVkSW5jaWRlbnRzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyLnNldExhYmVsKCcjJyArIGRhdGEuaW5jaWRlbnRfcGsudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHMuZm9yRWFjaChmdW5jdGlvbiB1cGRhdGVJbmNpZGVudElkTGl2ZShlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50Lmhhc093blByb3BlcnR5KCd0ZW1wX2luY2lkZW50X2lkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50ZW1wX2luY2lkZW50X2lkID09IGluY2lkZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluY2lkZW50c1tpbmRleF1bJ2luY2lkZW50X2lkJ10gPSBkYXRhLmluY2lkZW50X2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRzW2luZGV4XVsnaW5jaWRlbnRfcGsnXSA9IGRhdGEuaW5jaWRlbnRfcGs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbaW5kZXhdID0gY3JlYXRlSGVhZGVyKCRzY29wZS5pbmNpZGVudHNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRUb0hpZ2hsaWdodCA9IGRhdGEuaW5jaWRlbnRfaWQ7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX2luY2lkZW50X3BrID0gZGF0YS5pbmNpZGVudF9waztcbiAgICAgICAgICAgICAgICAgICAgbGlzdF9pbmNpZGVudHMgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBsaXN0X2luY2lkZW50cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmluaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGl2SWNvbiA9IGZ1bmN0aW9uIChpY29uLCB0ZXh0LCBjb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcbiAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzMwLCAxMDhdLFxuLy8gICAgICAgICAgICAgICAgaWNvbkFuY2hvcjogWzMxLCAxMDFdLFxuLy8gICAgICAgICAgICAgICAgcG9wdXBBbmNob3I6IFs1NSwgLTIwMF0sXG4gICAgICAgICAgICAgICAgaHRtbDogJzxkaXYgY2xhc3M+PHN2ZyBoZWlnaHQ9XCI1MFwiIHdpZHRoPVwiNDVcIj4nICtcbiAgICAgICAgICAgICAgICAnPHBhdGggZD1cIm0zLjAzMzQzLDAuMTgzMjZjMC4wMTk5NiwwLjA5OTk2IC0wLjM5OTE0LDAuMzgzMTggLTAuOTM3OTgsMC42MzMwOGMtMC44OTgwNywwLjQxNjUgLTEuMTc3NDcsMC43MTYzOSAtMS45NTU4LDIuMDQ5MmMtMC4yMTk1MywwLjM4MzE4IC0wLjIxOTUzLDI2LjIwNjQgMCwyNi41ODk1OGMwLjc3ODMzLDEuMzY2MTMgMS4wMzc3NywxLjYzMjY5IDIuMDE1NjcsMi4wNjU4NmwxLjAxNzgxLDAuNDY2NDlsNi4xMjY4MywwLjAzMzMybDYuMTQ2NzksMC4wNDk5OGwwLjExOTc0LDEuMjQ5NTFjMC4xMzk3LDEuMjk5NDkgMC41Nzg3NiwzLjg5ODQ3IDEuMDU3NzMsNi4zMzA4NWMwLjczODQxLDMuNjY1MjMgMC44NzgxMiw0LjI2NSAwLjk5Nzg2LDQuNDk4MjRjMC4wNTk4NywwLjEzMzI3IDAuMTk5NTcsMC42OTk3MiAwLjMxOTMxLDEuMjQ5NTFjMC4zMTkzMSwxLjYzMjY5IDAuNzM4NDEsMy40ODE5NyAwLjg3ODExLDMuNzgxODZjMC4wNTk4OCwwLjE2NjYgMC4xNTk2NiwwLjQxNjUgMC4yMTk1MywwLjU4MzFjMC4wNzk4MywwLjE4MzI2IDAuMjc5NCwwIDAuNjU4NTksLTAuNjMzMDljMC4yOTkzNSwtMC40OTk4IDAuNTc4NzYsLTAuOTMyOTcgMC42Mzg2MiwtMC45ODI5NGMwLjA1OTg3LC0wLjA0OTk3IDAuMzk5MTQsLTAuNTY2NDUgMC43NzgzMywtMS4xNjYyYzAuMzU5MjMsLTAuNTk5NzcgMS4xMTc2LC0xLjc5OTMgMS42NTY0NCwtMi42NjU2M2MwLjU1ODgsLTAuODY2MzMgMS42OTYzNiwtMi43MTU2IDIuNTM0NTUsLTQuMDgxNzNjMC44MTgyNCwtMS4zODI3OSAxLjU1NjY1LC0yLjUzMjM0IDEuNjE2NTIsLTIuNTgyMzJjMC4wNTk4NywtMC4wNDk5OCAwLjcxODQ2LC0xLjEzMjg5IDEuNDU2ODcsLTIuNDE1NzNjMC43NTgzNywtMS4yODI4MyAxLjQ5Njc4LC0yLjUxNTY3IDEuNjM2NDgsLTIuNzQ4OTJsMC4yNzk0LC0wLjQxNjVsNS41NDgwNywtMC4wODMzYzUuMjg4NjQsLTAuMDgzMzEgNS41ODc5OSwtMC4wOTk5NiA2LjQ4NjA2LC0wLjQ2NjQ5YzAuOTM3OTksLTAuMzgzMTggMS43NTYyMywtMS4yMTYxOSAxLjc1NjIzLC0xLjc4MjYzYzAsLTAuMTQ5OTQgMC4xNzk2MiwtMC4zMTY1NCAwLjM5OTE1LC0wLjM2NjUzYzAuMzk5MTQsLTAuMDgzMyAwLjM5OTE0LC0wLjIzMzI0IDAuMzk5MTQsLTEzLjMxMTQ1YzAsLTkuNTc5NTggLTAuMDU5ODcsLTEzLjIxMTQ5IC0wLjIxOTUzLC0xMy4xOTQ4M2MtMC4xMTk3NCwwLjAzMzMyIC0wLjQ1OTAxLC0wLjMxNjU0IC0wLjc1ODM3LC0wLjc0OTcxYy0wLjUzODg0LC0wLjgxNjM1IC0xLjQzNjkxLC0xLjQ0OTQzIC0yLjA3NTU0LC0xLjQ0OTQzYy0wLjIxOTUzLDAgLTAuNDE5MSwtMC4xNDk5NCAtMC40Nzg5NywtMC4zMzMyYy0wLjA5OTc4LC0wLjMzMzIgLTAuMjc5MzksLTAuMzMzMiAtMTkuMjM4NjUsLTAuMzMzMmMtMTMuODkwMTUsMCAtMTkuMTE4OTEsMC4wNDk5OCAtMTkuMDc5LDAuMTgzMjZ6XCIgaWQ9XCJzdmdfMlwiIGZpbGw9XCIjJyArIGNvbG9yICsgJ1wiLz4nICtcbiAgICAgICAgICAgICAgICAnPHRleHQgeG1sOnNwYWNlPVwicHJlc2VydmVcIiBmb250LXdlaWdodD1cImJvbGRcIiB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiIGZvbnQtZmFtaWx5PVwiU2Fucy1zZXJpZlwiIGZvbnQtc2l6ZT1cIjE0XCIgaWQ9XCJzdmdfMVwiIHk9XCIyMC43MDE5NlwiIHg9XCIyMy41MDExM1wiIHN0cm9rZS1saW5lY2FwPVwibnVsbFwiIHN0cm9rZS1saW5lam9pbj1cIm51bGxcIiBzdHJva2UtZGFzaGFycmF5PVwibnVsbFwiIHN0cm9rZS13aWR0aD1cIjBcIiBmaWxsPVwiIzAwMDAwMFwiPiMnICsgdGV4dCArICc8L3RleHQ+JyArXG4gICAgICAgICAgICAgICAgJzwvc3ZnPjwvZGl2PidcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm1hcCA9IHtcbiAgICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgLy9zY3JvbGxXaGVlbFpvb206IGZhbHNlLFxuICAgICAgICAgICAgICAgIC8vZG91YmxlQ2xpY2tab29tOmZhbHNlLFxuICAgICAgICAgICAgICAgIHRyYWNrUmVzaXplOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhbjoge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC44NSxcbiAgICAgICAgICAgICAgICAgICAgZWFzZUxpbmVhcml0eTogMC4zXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXhab29tOiAyMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgIGxhdDogNzAuMDAsXG4gICAgICAgICAgICAgICAgbG5nOiAzNS4wMCxcbiAgICAgICAgICAgICAgICB6b29tOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2VyczogW10sXG4gICAgICAgICAgICBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICBiYXNlbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZVJvYWRtYXA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdNYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJUeXBlOiAnUk9BRE1BUCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ29vZ2xlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnb29nbGVUZXJyYWluOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVGVycmFpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllclR5cGU6ICdURVJSQUlOJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdnb29nbGUnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZUh5YnJpZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NhdGVsbGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllclR5cGU6ICdIWUJSSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dvb2dsZSdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgICAgICAkc2NvcGUudG9nZ2xlTGlzdCA9IGZ1bmN0aW9uICgpIHsgJHNjb3BlLm1hcE5vdFRvZ2dsZSA9ICEkc2NvcGUubWFwTm90VG9nZ2xlOyB9O1xuICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChsaXN0X2luY2lkZW50cykge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ0xPQURJTkdfSU5DSURFTlRTJyk7XG4gICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmZldGNoTWFwKHN0YXJ0LCBlbmQsIHJlc29ydF9pZCwgMCwgMSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5zYXZlZEluY2lkZW50cyA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1bnNhdmVkSW5jaWRlbnRzJykpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5zYXZlZEluY2lkZW50cyAhPSBudWxsICYmIHVuc2F2ZWRJbmNpZGVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiBjcmVhdGVMaXN0T2ZJbmNpZGVudElkKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goZWxlbWVudC5pbmNpZGVudF9wayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHMuZm9yRWFjaChmdW5jdGlvbiByZW1vdmVTeW5jZWRJbmNpZGVudHMoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zLmluZGV4T2YoZWxlbWVudC5pbmNpZGVudF9waykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1bnNhdmVkSW5jaWRlbnRzJywgSlNPTi5zdHJpbmdpZnkodW5zYXZlZEluY2lkZW50cykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHMgPSBkYXRhLnJlc3VsdHMubWFwKGZ1bmN0aW9uIChpbmNpZGVudCkgeyByZXR1cm4gY3JlYXRlSGVhZGVyKGluY2lkZW50KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bnNhdmVkSW5jaWRlbnRzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bnNhdmVkSW5jaWRlbnRzLmxlbmd0aCA+IDApICRzY29wZS5pbmNpZGVudHMgPSB1bnNhdmVkSW5jaWRlbnRzLmNvbmNhdCgkc2NvcGUuaW5jaWRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwLm1hcmtlcnMgPSAkc2NvcGUuaW5jaWRlbnRzLm1hcChmdW5jdGlvbiAoaW5jaWRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpY29uID0gKGluY2lkZW50LnN0YXR1cyA9PSAnY2xvc2VkJyB8fCBpbmNpZGVudC5zdGF0dXMgPT0gJ29uc2NlbmUnKSA/ICdtYXAtdXNlci1pY29uJyA6ICdtYXAtd2FybmluZy1pY29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ3JvdXA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogaW5jaWRlbnQubG9jYXRpb24ubGF0IHx8IHBhcnNlRmxvYXQoY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbGF0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGluY2lkZW50LmxvY2F0aW9uLmxvbmcgfHwgcGFyc2VGbG9hdChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9sbmcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IHVybEJhc2UgKyAncGluXycgKyBpbmNpZGVudC5pbmNpZGVudF9zdGF0dXNbMF0uY29sb3IgKyAnLnBuZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50OiBpbmNpZGVudFxuLy8gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBkaXZJY29uKGljb24sICRmaWx0ZXIoJ3RvRWxhcHNlZFRpbWUnKShpbmNpZGVudC5kdF9jcmVhdGVkLCBcIm1tOnNzXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvLmN1cnJlbnQgPT0gbnVsbCAmJiAhKCRzY29wZS5tYXAuaW5pdGlhbGl6ZWQpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9sYXQgJiYgY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbG5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5jZW50ZXIubGF0ID0gcGFyc2VGbG9hdChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9sYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxuZyA9IHBhcnNlRmxvYXQoY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbG5nKTtcblxuLy8gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZygkc2NvcGUubWFwLmNlbnRlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmNpZGVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGlnaGxpZ2h0KCRzY29wZS5pbmNpZGVudHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLnpvb20gPSBzZXR0aW5ncy5pbml0aWFsX21hcF96b29tX2xldmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5pdE1hcCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRpbWVyKTtcbiAgICAgICAgICAgIHRpbWVyID0gJHRpbWVvdXQoJHNjb3BlLmluaXQsIDE1MDAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLiRvbiggXCIkZGVzdHJveVwiLCBmdW5jdGlvbiAoZXZlbnQpIHsgJHRpbWVvdXQuY2FuY2VsKHRpbWVyKTsgfSApO1xuICAgICAgICAkc2NvcGUuZ2V0TWFya2VyID0gZnVuY3Rpb24gKGluY2lkZW50KSB7XG4gICAgICAgICAgICB2YXIgaWNvbiA9IChpbmNpZGVudC5zdGF0dXMgPT0gJ2Nsb3NlZCcgfHwgaW5jaWRlbnQuc3RhdHVzID09ICdvbnNjZW5lJykgPyAnbWFwLXVzZXItaWNvbicgOiAnbWFwLXdhcm5pbmctaWNvbic7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC8vIGdyb3VwOiAnJyxcbiAgICAgICAgICAgICAgICBsYXQ6IGluY2lkZW50LmxvY2F0aW9uLmxhdCB8fCBwYXJzZUZsb2F0KGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ubWFwX2xhdCksXG4gICAgICAgICAgICAgICAgbG5nOiBpbmNpZGVudC5sb2NhdGlvbi5sb25nIHx8IHBhcnNlRmxvYXQoY3VycmVudFVzZXIucmVzb3J0c1swXS5tYXBfbG5nKSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogdXJsQmFzZSArICdwaW5fJyArIGluY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS5jb2xvciArICcucG5nJyxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcbi8vICAgICAgICAgICAgICAgIGljb246IGRpdkljb24oaWNvbiwgaW5jaWRlbnQuZHRfY3JlYXRlZClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5pbmZvID0ge1xuICAgICAgICAgICAgaXNPcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICAgICAgICBub3RlOiBudWxsLFxuICAgICAgICAgICAgbm90ZXM6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmFkZE5vdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmluZm8ubm90ZSAmJiAkc2NvcGUuaW5mby5ub3RlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKCdTQVZJTkdfTk9URScpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBtb21lbnQobmV3IERhdGUoKSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluZm8uY3VycmVudC5oYXNPd25Qcm9wZXJ0eShcImluY2lkZW50X2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS5hZGROb3RlKCRzY29wZS5pbmZvLmN1cnJlbnQuaW5jaWRlbnRfaWQsICRzY29wZS5pbmZvLm5vdGUsIHRpbWUpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ05PVEVfU0FWRUQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUuaW5mby5jdXJyZW50Lmhhc093blByb3BlcnR5KCdub3RlcycpIHx8ICRzY29wZS5pbmZvLmN1cnJlbnQubm90ZXMgPT0gbnVsbCB8fCAkc2NvcGUuaW5mby5jdXJyZW50Lm5vdGVzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQubm90ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZpZWxkXzUyY2E0NDhkZzk0amE0ID0gbW9tZW50LnV0YyhkYXRhLmZpZWxkXzUyY2E0NDhkZzk0amE0KS50eih0ei5uYW1lKCkpLmZvcm1hdCgkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluZm8uY3VycmVudC5ub3Rlcy51bnNoaWZ0KGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5mby5ub3RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmllbGRfNTJjYTQ0OGRnOTRqYTNcIjogJHNjb3BlLmluZm8ubm90ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmllbGRfNTJjYTQ0OGRnOTRqYTRcIjogdGltZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5jaWRlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5zYXZlZEluY2lkZW50cyA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1bnNhdmVkSW5jaWRlbnRzJykpO1xuICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzLmZvckVhY2goZnVuY3Rpb24gcmVtb3ZlQXJyYXlFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudGVtcF9pbmNpZGVudF9pZCA9PSAkc2NvcGUuaW5mby5jdXJyZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XVsnbm90ZXMnXS51bnNoaWZ0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50ID0gdW5zYXZlZEluY2lkZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1bnNhdmVkSW5jaWRlbnRzJywgSlNPTi5zdHJpbmdpZnkodW5zYXZlZEluY2lkZW50cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5maWVsZF81MmNhNDQ4ZGc5NGphNCA9IG1vbWVudC51dGMoZGF0YS5maWVsZF81MmNhNDQ4ZGc5NGphNCkudHoodHoubmFtZSgpKS5mb3JtYXQoJHNjb3BlLmRhdGV0aW1lX2Zvcm1hdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAkc2NvcGUuaW5jaWRlbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluY2lkZW50c1tqXS50ZW1wX2luY2lkZW50X2lkID09IGluY2lkZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRzW2pdLm5vdGVzLnVuc2hpZnQoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLm5vdGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXR1c0NvbG9yID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBzdGF0dXNOYW1lID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLnN0YXR1c19saXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zdGF0dXNfbGlzdFtpXS5pbmNpZGVudF9zdGF0dXNfaWQgPT0gJHNjb3BlLmluY2lkZW50X3N0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2xvciA9ICRzY29wZS5zdGF0dXNfbGlzdFtpXS5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzTmFtZSA9ICRzY29wZS5zdGF0dXNfbGlzdFtpXS5rZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCRzY29wZS5pbmNpZGVudF9zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBkZWxldGVkLCBnZXQgY29uZmlybWF0aW9uXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmNpZGVudF9zdGF0dXMgPT0gOSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC90ZW1wbGF0ZXMvaW5jaWRlbnRzL2NvbmZpcm0uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGlzX2FsbG93ZWQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvLmN1cnJlbnQuaGFzT3duUHJvcGVydHkoXCJpbmNpZGVudF9pZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgJHNjb3BlLmluY2lkZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluY2lkZW50c1tqXS5pbmNpZGVudF9pZCA9PSAkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRzW2pdWydpbmNpZGVudF9zdGF0dXMnXVswXVsnY29sb3InXSA9IHN0YXR1c0NvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluY2lkZW50c1tqXVsnaW5jaWRlbnRfc3RhdHVzJ11bMF1bJ2tleSddID0gc3RhdHVzTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal1bJ2luY2lkZW50X3N0YXR1cyddWzBdWyd2YWx1ZSddID0gJHNjb3BlLmluY2lkZW50X3N0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gJHNjb3BlLmdvb2dsZU1hcE1hcmtlcnMuZmluZChmdW5jdGlvbihyb3cpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluY2lkZW50U2VydmljZS51cGRhdGVTdGF0dXMoJHNjb3BlLmluZm8uY3VycmVudC5pbmNpZGVudF9pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGF0dXNfdHlwZV9pZFwiOiAkc2NvcGUuaW5jaWRlbnRfc3RhdHVzICsgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c19kYXRlXCI6IG1vbWVudChuZXcgRGF0ZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXBkYXRlZF9ieVwiOiBjdXJyZW50VXNlci51c2VyX2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJTdGF0dXMgdXBkYXRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5mby5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5zYXZlZEluY2lkZW50cyA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1bnNhdmVkSW5jaWRlbnRzJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmNpZGVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50cy5mb3JFYWNoKGZ1bmN0aW9uIHJlbW92ZUFycmF5RWxlbWVudChlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudGVtcF9pbmNpZGVudF9pZCA9PSAkc2NvcGUuaW5mby5jdXJyZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWyd1cGRhdGVkU3RhdHVzJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGF0dXNfdHlwZV9pZFwiOiAkc2NvcGUuaW5jaWRlbnRfc3RhdHVzICsgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGF0dXNfZGF0ZVwiOiBtb21lbnQobmV3IERhdGUoKSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1cGRhdGVkX2J5XCI6IGN1cnJlbnRVc2VyLnVzZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XVsnaW5jaWRlbnRfc3RhdHVzJ11bMF1bJ2NvbG9yJ10gPSBzdGF0dXNDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWydpbmNpZGVudF9zdGF0dXMnXVswXVsna2V5J10gPSBzdGF0dXNOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50c1tpbmRleF1bJ2luY2lkZW50X3N0YXR1cyddWzBdWyd2YWx1ZSddID0gJHNjb3BlLmluY2lkZW50X3N0YXR1cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jaWRlbnQgPSB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAkc2NvcGUuaW5jaWRlbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmNpZGVudHNbal0udGVtcF9pbmNpZGVudF9pZCA9PSBpbmNpZGVudC50ZW1wX2luY2lkZW50X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal0gPSBpbmNpZGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgndW5zYXZlZEluY2lkZW50cycsIEpTT04uc3RyaW5naWZ5KHVuc2F2ZWRJbmNpZGVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgdXBkYXRlIHN0YXR1cyBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluZm8uY3VycmVudC5oYXNPd25Qcm9wZXJ0eShcImluY2lkZW50X2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gJHNjb3BlLmdvb2dsZU1hcE1hcmtlcnMuZmluZChmdW5jdGlvbihyb3cpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X2lkID09IHJvdy5pbmNpZGVudC5pbmNpZGVudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBpbkNvbG9yID0gc3RhdHVzQ29sb3IgPT09ICdmZmZmJyA/ICdjY2NjY2MnIDogc3RhdHVzQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXIuc2V0SWNvbih1cmxCYXNlICsgJ3Bpbl8nICsgcGluQ29sb3IgKyAnLnBuZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyLmluY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS5jb2xvciA9IHN0YXR1c0NvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyLmluY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS5rZXkgPSBzdGF0dXNOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyLmluY2lkZW50LmluY2lkZW50X3N0YXR1c1swXS52YWx1ZSA9ICRzY29wZS5pbmNpZGVudF9zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8ICRzY29wZS5pbmNpZGVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluY2lkZW50c1tqXS5pbmNpZGVudF9pZCA9PSAkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal1bJ2luY2lkZW50X3N0YXR1cyddWzBdWydjb2xvciddID0gc3RhdHVzQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal1bJ2luY2lkZW50X3N0YXR1cyddWzBdWydrZXknXSA9IHN0YXR1c05hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal1bJ2luY2lkZW50X3N0YXR1cyddWzBdWyd2YWx1ZSddID0gJHNjb3BlLmluY2lkZW50X3N0YXR1cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UudXBkYXRlU3RhdHVzKCRzY29wZS5pbmZvLmN1cnJlbnQuaW5jaWRlbnRfaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGF0dXNfdHlwZV9pZFwiOiAkc2NvcGUuaW5jaWRlbnRfc3RhdHVzICsgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RhdHVzX2RhdGVcIjogbW9tZW50KG5ldyBEYXRlKCkpLnV0YygpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVwZGF0ZWRfYnlcIjogY3VycmVudFVzZXIudXNlcl9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiU3RhdHVzIHVwZGF0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jaWRlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuc2F2ZWRJbmNpZGVudHMgPSBKU09OLnBhcnNlKExTLmdldCgndW5zYXZlZEluY2lkZW50cycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHMuZm9yRWFjaChmdW5jdGlvbiByZW1vdmVBcnJheUVsZW1lbnQoZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaW5jaWRlbnRfcGsgPT0gJHNjb3BlLmluZm8uY3VycmVudC5pbmNpZGVudF9waykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XVsndXBkYXRlZFN0YXR1cyddID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdGF0dXNfdHlwZV9pZFwiOiAkc2NvcGUuaW5jaWRlbnRfc3RhdHVzICsgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c19kYXRlXCI6IG1vbWVudChuZXcgRGF0ZSgpKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tREQgSEg6bW06c3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXBkYXRlZF9ieVwiOiBjdXJyZW50VXNlci51c2VyX2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50c1tpbmRleF1bJ2luY2lkZW50X3N0YXR1cyddWzBdWydjb2xvciddID0gc3RhdHVzQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWydpbmNpZGVudF9zdGF0dXMnXVswXVsna2V5J10gPSBzdGF0dXNOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XVsnaW5jaWRlbnRfc3RhdHVzJ11bMF1bJ3ZhbHVlJ10gPSAkc2NvcGUuaW5jaWRlbnRfc3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50ID0gdW5zYXZlZEluY2lkZW50c1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAkc2NvcGUuaW5jaWRlbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluY2lkZW50c1tqXS50ZW1wX2luY2lkZW50X2lkID09IGluY2lkZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRzW2pdID0gaW5jaWRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMUy5zZXQoJ3Vuc2F2ZWRJbmNpZGVudHMnLCBKU09OLnN0cmluZ2lmeSh1bnNhdmVkSW5jaWRlbnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZUFzc2lnbmVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFzc2lnbmVlTmFtZSA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5hc3NpZ25lZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFzc2lnbmVlc1tpXVsna2V5J10gPT0gJHNjb3BlLmFzc2lnbmVkX3RvKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbmVlTmFtZSA9ICRzY29wZS5hc3NpZ25lZXNbaV1bJ25hbWUnXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmFzc2lnbmVkX3RvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvLmN1cnJlbnQuaGFzT3duUHJvcGVydHkoXCJpbmNpZGVudF9pZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8ICRzY29wZS5pbmNpZGVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaW5jaWRlbnRzW2pdLmluY2lkZW50X2lkID09ICRzY29wZS5pbmZvLmN1cnJlbnQuaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW5jaWRlbnRzW2pdWydhc3NpZ25lZF90byddWyd1c2VyX2lkJ10gPSAkc2NvcGUuYXNzaWduZWRfdG87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluY2lkZW50c1tqXVsnYXNzaWduZWRfdG8nXVsnbmFtZSddID0gYXNzaWduZWVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal0gPSBjcmVhdGVIZWFkZXIoJHNjb3BlLmluY2lkZW50c1tqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLnVwZGF0ZUluY2lkZW50KCRzY29wZS5pbmZvLmN1cnJlbnQuaW5jaWRlbnRfaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFzc2lnbmVkX3RvXCI6ICRzY29wZS5hc3NpZ25lZF90byArICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJBc3NpZ25lZSB1cGRhdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdW5zYXZlZEluY2lkZW50cyA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1bnNhdmVkSW5jaWRlbnRzJykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5jaWRlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzLmZvckVhY2goZnVuY3Rpb24gcmVtb3ZlQXJyYXlFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaW5jaWRlbnRfcGsgPT0gJHNjb3BlLmluZm8uY3VycmVudC5pbmNpZGVudF9waykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWyd1cGRhdGVkQXNzaWduZWUnXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhc3NpZ25lZF90b1wiOiAkc2NvcGUuYXNzaWduZWRfdG8gKyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50c1tpbmRleF1bJ2Fzc2lnbmVkX3RvJ11bJ3VzZXJfaWQnXSA9ICRzY29wZS5hc3NpZ25lZF90byArICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHNbaW5kZXhdWydhc3NpZ25lZF90byddWyduYW1lJ10gPSBhc3NpZ25lZU5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XSA9IGNyZWF0ZUhlYWRlcih1bnNhdmVkSW5jaWRlbnRzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jaWRlbnQgPSB1bnNhdmVkSW5jaWRlbnRzW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgJHNjb3BlLmluY2lkZW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmluY2lkZW50c1tqXS50ZW1wX2luY2lkZW50X2lkID09IGluY2lkZW50LnRlbXBfaW5jaWRlbnRfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmNpZGVudHNbal0gPSBpbmNpZGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgndW5zYXZlZEluY2lkZW50cycsIEpTT04uc3RyaW5naWZ5KHVuc2F2ZWRJbmNpZGVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5oaWdobGlnaHQgPSBmdW5jdGlvbiAoaW5jaWRlbnQpIHtcbi8vICAgICAgICAgICAgJGxvZy5sb2coaW5jaWRlbnQpO1xuICAgICAgICAgICAgJHNjb3BlLmluZm8uaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmluY2lkZW50cywgZnVuY3Rpb24gKGluY2lkZW50KSB7XG4gICAgICAgICAgICAgICAgaW5jaWRlbnQuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpbmNpZGVudC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICBzZWxlY3RlZF9pbmNpZGVudF9wayA9IGluY2lkZW50LmluY2lkZW50X3BrO1xuXG4gICAgICAgICAgICB2YXIgaW5jaWRlbnRNYXJrZXIgPSAkc2NvcGUuZ2V0SW5jaWRlbnRGcm9tUmVsb2NhdGVkTWFya2VyKGluY2lkZW50KTtcbiAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLmxhdCA9IHBhcnNlRmxvYXQoaW5jaWRlbnRNYXJrZXIubGF0KSB8fCBwYXJzZUZsb2F0KGN1cnJlbnRVc2VyLnJlc29ydHNbMF0ubWFwX2xhdCk7XG4gICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlci5sbmcgPSBwYXJzZUZsb2F0KGluY2lkZW50TWFya2VyLmxuZykgfHwgcGFyc2VGbG9hdChjdXJyZW50VXNlci5yZXNvcnRzWzBdLm1hcF9sbmcpO1xuXG4gICAgICAgICAgICAkc2NvcGUuZ29vZ2xlTWFwLnNldENlbnRlcihpbmNpZGVudE1hcmtlcik7XG4vLyAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyLnpvb20gPSAxNjsgLy9pbmNpZGVudC56b29tO1xuXG4vLyAgICAgICAgICAgICRzY29wZS5pbmZvLmlzT3BlbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkc2NvcGUuaW5mby5jdXJyZW50ID0gaW5jaWRlbnQ7XG4vLyAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQuZGF0ZXRpbWUgPSBpbmNpZGVudC5kYXRldGltZS50b0xvY2FsZVN0cmluZygpLnJlcGxhY2UoJ2F0ICcsICcnKTtcbiAgICAgICAgICAgIGlmICghaW5jaWRlbnQuaGFzT3duUHJvcGVydHkoJ25vdGVzJykpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5mby5jdXJyZW50Lm5vdGVzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5pbmNpZGVudF9zdGF0dXMgPSAkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X3N0YXR1c1swXS52YWx1ZTtcbiAgICAgICAgICAgICRzY29wZS5pbmNpZGVudF9zdGF0dXMgPSAkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X3N0YXR1c1swXS52YWx1ZTtcbiAgICAgICAgICAgICRzY29wZS5hc3NpZ25lZF90byA9ICRzY29wZS5pbmZvLmN1cnJlbnQuYXNzaWduZWRfdG8udXNlcl9pZDtcbiAgICAgICAgICAgIHVwZGF0ZV9pbmNpZGVudCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkc2NvcGUubW9kZWwuZmlsdGVycy5tYXAoZnVuY3Rpb24oY3VycmVudFZhbHVlLCBpbmRleCl7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50VmFsdWUpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRWYWx1ZS5maWVsZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudFZhbHVlLmZpZWxkLmZ1bGxrZXkpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlLmZpZWxkLmZ1bGxrZXkuaW5kZXhPZignX19fXycpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gY3VycmVudFZhbHVlLmZpZWxkLmZ1bGxrZXkuc3BsaXQoXCJfX19fXCIsIDIpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vZGVsLmZpbHRlcnNbaW5kZXhdLnZhbHVlID0gaW5jaWRlbnRbcmVzWzBdXVswXVtyZXNbMV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vZGVsLmZpbHRlcnNbaW5kZXhdLnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1vZGVsLmZpbHRlcnNbaW5kZXhdLnZhbHVlID0gaW5jaWRlbnRbY3VycmVudFZhbHVlLmZpZWxkLmtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgdXBkYXRlX2luY2lkZW50ID0gdHJ1ZTsgfSwgMjAwKTtcblxuICAgICAgICAgICAgaWYgKCRzY29wZS5pbmZvLmN1cnJlbnQuaGFzT3duUHJvcGVydHkoXCJpbmNpZGVudF9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oJ0xPQURJTkdfTk9URVMnKTtcbiAgICAgICAgICAgICAgICBJbmNpZGVudFNlcnZpY2UuZmV0Y2hOb3Rlcygkc2NvcGUuaW5mby5jdXJyZW50LmluY2lkZW50X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQubm90ZXMgPSBbXTtcbi8vICAgICAgICAgICAgICAgICRsb2cubG9nKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UucmVzdWx0cywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbmZvLmN1cnJlbnQubm90ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfNTJjYTQ0OGRnOTRqYTM6IHZhbHVlLmZpZWxkXzUyY2E0NDhkZzk0amEzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkXzUyY2E0NDhkZzk0amE0OiBtb21lbnQudXRjKHZhbHVlLmZpZWxkXzUyY2E0NDhkZzk0amE0KS50eih0ei5uYW1lKCkpLmZvcm1hdCgkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF81MmNhNDQ4ZGc5NGphNTogdmFsdWUuZmllbGRfNTJjYTQ0OGRnOTRqYTUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90ZV9pZDogdmFsdWUubm90ZV9pZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgICAgJHNjb3BlLmluZm8uY3VycmVudC5ub3RlcyA9IHJlc3BvbnNlLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5pbmZvLmlzT3BlbiA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNhdmVVbnNhdmVkSW5jaWRlbnRSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVuc2F2ZWRJbmNpZGVudHMgPSBKU09OLnBhcnNlKExTLmdldCgndW5zYXZlZEluY2lkZW50cycpKTtcblxuICAgICAgICAgICAgaWYgKHVuc2F2ZWRJbmNpZGVudHMgIT0gbnVsbCAmJiB1bnNhdmVkSW5jaWRlbnRzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHMuZm9yRWFjaChmdW5jdGlvbiBzYXZlRWFjaEluY2lkZW50KHVuc2F2ZWRFbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgSW5jaWRlbnRTZXJ2aWNlLmNyZWF0ZUluY2lkZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmllbGRfNTJjYTQ1Njk2MmJhOFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXRcIjogdW5zYXZlZEVsZW1lbnQubG9jYXRpb24ubGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibG9uZ1wiOiB1bnNhdmVkRWxlbWVudC5sb2NhdGlvbi5sb25nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWNjdXJhY3lcIjogdW5zYXZlZEVsZW1lbnQubG9jYXRpb24uYWNjdXJhY3lcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5zYXZlZEluY2lkZW50cy5mb3JFYWNoKGZ1bmN0aW9uIHJlbW92ZUFycmF5RWxlbWVudChlbGVtZW50LCBpbmRleCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pbmNpZGVudF9wayA9PSB1bnNhdmVkRWxlbWVudC5pbmNpZGVudF9waykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gc2F2ZVVuc2F2ZWRJbmNpZGVudEluZm8oZWxlbWVudCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc2F2ZWRJbmNpZGVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1bnNhdmVkSW5jaWRlbnRzJywgSlNPTi5zdHJpbmdpZnkodW5zYXZlZEluY2lkZW50cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5pbml0KCk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gdmFyIHN5bmNTdGF0dXMgPSAkc2NvcGUuc2F2ZVVuc2F2ZWRJbmNpZGVudFJlZnJlc2goKTtcblxuICAgIFxufV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdDb25maXJtUmVnZW5lcmF0ZU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UpIHtcblxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG4gICAgICAgIH07XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ1Jlc29ydFNldHRpbmdzQ3RybCcsIFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJHJvb3RTY29wZScsICckdGltZW91dCcsICckbG9nJywgJyRzdGF0ZVBhcmFtcycsICckaW50ZXJjb20nLCAnUmVzb3J0U2VydmljZScsICdjdXJyZW50VXNlcicsICdncm93bCcsICdxdWVzdGlvbnMnLCAnJHRyYW5zbGF0ZScsICckdWltb2RhbCcsICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCBSZXNvcnRTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wsIHF1ZXN0aW9ucywgJHRyYW5zbGF0ZSwgJG1vZGFsKSB7XG5cbiAgICAgICAgLy8kaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgLy8gICAgZW1haWw6IGN1cnJlbnRVc2VyLmVtYWlsLFxuICAgICAgICAvLyAgICBuYW1lOiBjdXJyZW50VXNlci5uYW1lLFxuICAgICAgICAvLyAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAvLyAgICB1c2VyX2lkOiBjdXJyZW50VXNlci51c2VyX2lkLFxuICAgICAgICAvLyAgICBjb21wYW55OiB7XG4gICAgICAgIC8vICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgIC8vICAgICAgICBuYW1lOiBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9uYW1lXG4gICAgICAgIC8vICAgIH0sXG4gICAgICAgIC8vICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAvLyAgICBkYXNoYm9hcmRfZmVhdHVyZV9sYXN0X3VzZWQ6IFwiVXNlcnNcIlxuICAgICAgICAvL30pO1xuXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IGN1cnJlbnRVc2VyO1xuICAgICAgICAvLyRzY29wZS5zaG93Um9sZSA9IGZhbHNlO1xuICAgICAgICAvLyRzY29wZS5zaG93UGVybWlzc2lvbnMgPSBmYWxzZTtcbiAgICAgICAgLy8kc2NvcGUuc2hvd0RlbGV0ZVVzZXIgPSBmYWxzZTtcblxuICAgICAgICB2YXIgaWQgPSAkc3RhdGVQYXJhbXMucmVzb3J0SWQ7XG5cblxuICAgICAgICAkc2NvcGUucm9sZXMgPSBbXG4gICAgICAgICAgICB7a2V5OiAxLCBuYW1lOiAnUGF0cm9sbGVyJ30sXG4gICAgICAgICAgICB7a2V5OiAyLCBuYW1lOiAnRGlzcGF0Y2hlcid9LFxuICAgICAgICAgICAge2tleTogMywgbmFtZTogJ01hbmFnZXInfVxuICAgICAgICBdO1xuXG4gICAgICAgICRzY29wZS5wYXBlcl9zaXplcyA9IFtcbiAgICAgICAgICAgIHtrZXk6IDAsIG5hbWU6ICdBNCd9LFxuICAgICAgICAgICAge2tleTogMSwgbmFtZTogJ1VTIFBhcGVyJ31cbiAgICAgICAgXTtcblxuICAgICAgICAkc2NvcGUudW5pdF9mb3JtYXRzID0gW1xuICAgICAgICAgICAge2tleTogMCwgbmFtZTogJ0ltcGVyaWFsJ30sXG4gICAgICAgICAgICB7a2V5OiAxLCBuYW1lOiAnTWV0cmljJ31cbiAgICAgICAgXTtcblxuICAgICAgICAkc2NvcGUuZGF0ZXRpbWVfZm9ybWF0cyA9IFtcbiAgICAgICAgICAgIHtrZXk6IDAsIG5hbWU6ICdNTS9ERC9ZWVlZJ30sXG4gICAgICAgICAgICB7a2V5OiAxLCBuYW1lOiAnREQvTU0vWVlZWSd9XG4gICAgICAgIF07XG5cbiAgICAgICAgJHNjb3BlLnRpbWV6b25lcyA9IFtcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQWJpZGphbicsIG5hbWU6ICdBZnJpY2EvQWJpZGphbid9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9BY2NyYScsIG5hbWU6ICdBZnJpY2EvQWNjcmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQWRkaXNfQWJhYmEnLCBuYW1lOiAnQWZyaWNhL0FkZGlzX0FiYWJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL0FsZ2llcnMnLCBuYW1lOiAnQWZyaWNhL0FsZ2llcnMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQXNtYXJhJywgbmFtZTogJ0FmcmljYS9Bc21hcmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQXNtZXJhJywgbmFtZTogJ0FmcmljYS9Bc21lcmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQmFtYWtvJywgbmFtZTogJ0FmcmljYS9CYW1ha28nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQmFuZ3VpJywgbmFtZTogJ0FmcmljYS9CYW5ndWknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQmFuanVsJywgbmFtZTogJ0FmcmljYS9CYW5qdWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQmlzc2F1JywgbmFtZTogJ0FmcmljYS9CaXNzYXUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQmxhbnR5cmUnLCBuYW1lOiAnQWZyaWNhL0JsYW50eXJlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL0JyYXp6YXZpbGxlJywgbmFtZTogJ0FmcmljYS9CcmF6emF2aWxsZSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9CdWp1bWJ1cmEnLCBuYW1lOiAnQWZyaWNhL0J1anVtYnVyYSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9DYWlybycsIG5hbWU6ICdBZnJpY2EvQ2Fpcm8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQ2FzYWJsYW5jYScsIG5hbWU6ICdBZnJpY2EvQ2FzYWJsYW5jYSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9DZXV0YScsIG5hbWU6ICdBZnJpY2EvQ2V1dGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvQ29uYWtyeScsIG5hbWU6ICdBZnJpY2EvQ29uYWtyeSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9EYWthcicsIG5hbWU6ICdBZnJpY2EvRGFrYXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvRGFyX2VzX1NhbGFhbScsIG5hbWU6ICdBZnJpY2EvRGFyX2VzX1NhbGFhbSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9Eamlib3V0aScsIG5hbWU6ICdBZnJpY2EvRGppYm91dGknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvRG91YWxhJywgbmFtZTogJ0FmcmljYS9Eb3VhbGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvRWxfQWFpdW4nLCBuYW1lOiAnQWZyaWNhL0VsX0FhaXVuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL0ZyZWV0b3duJywgbmFtZTogJ0FmcmljYS9GcmVldG93bid9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9HYWJvcm9uZScsIG5hbWU6ICdBZnJpY2EvR2Fib3JvbmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvSGFyYXJlJywgbmFtZTogJ0FmcmljYS9IYXJhcmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvSm9oYW5uZXNidXJnJywgbmFtZTogJ0FmcmljYS9Kb2hhbm5lc2J1cmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvSnViYScsIG5hbWU6ICdBZnJpY2EvSnViYSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9LYW1wYWxhJywgbmFtZTogJ0FmcmljYS9LYW1wYWxhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL0toYXJ0b3VtJywgbmFtZTogJ0FmcmljYS9LaGFydG91bSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9LaWdhbGknLCBuYW1lOiAnQWZyaWNhL0tpZ2FsaSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9LaW5zaGFzYScsIG5hbWU6ICdBZnJpY2EvS2luc2hhc2EnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvTGFnb3MnLCBuYW1lOiAnQWZyaWNhL0xhZ29zJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL0xpYnJldmlsbGUnLCBuYW1lOiAnQWZyaWNhL0xpYnJldmlsbGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvTG9tZScsIG5hbWU6ICdBZnJpY2EvTG9tZSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9MdWFuZGEnLCBuYW1lOiAnQWZyaWNhL0x1YW5kYSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9MdWJ1bWJhc2hpJywgbmFtZTogJ0FmcmljYS9MdWJ1bWJhc2hpJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL0x1c2FrYScsIG5hbWU6ICdBZnJpY2EvTHVzYWthJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL01hbGFibycsIG5hbWU6ICdBZnJpY2EvTWFsYWJvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL01hcHV0bycsIG5hbWU6ICdBZnJpY2EvTWFwdXRvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL01hc2VydScsIG5hbWU6ICdBZnJpY2EvTWFzZXJ1J30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL01iYWJhbmUnLCBuYW1lOiAnQWZyaWNhL01iYWJhbmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvTW9nYWRpc2h1JywgbmFtZTogJ0FmcmljYS9Nb2dhZGlzaHUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvTW9ucm92aWEnLCBuYW1lOiAnQWZyaWNhL01vbnJvdmlhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL05haXJvYmknLCBuYW1lOiAnQWZyaWNhL05haXJvYmknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvTmRqYW1lbmEnLCBuYW1lOiAnQWZyaWNhL05kamFtZW5hJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL05pYW1leScsIG5hbWU6ICdBZnJpY2EvTmlhbWV5J30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL05vdWFrY2hvdHQnLCBuYW1lOiAnQWZyaWNhL05vdWFrY2hvdHQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvT3VhZ2Fkb3Vnb3UnLCBuYW1lOiAnQWZyaWNhL091YWdhZG91Z291J30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL1BvcnRvLU5vdm8nLCBuYW1lOiAnQWZyaWNhL1BvcnRvLU5vdm8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBZnJpY2EvU2FvX1RvbWUnLCBuYW1lOiAnQWZyaWNhL1Nhb19Ub21lJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL1RpbWJ1a3R1JywgbmFtZTogJ0FmcmljYS9UaW1idWt0dSd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9Ucmlwb2xpJywgbmFtZTogJ0FmcmljYS9Ucmlwb2xpJ30sXG4gICAgICAgICAgICB7a2V5OiAnQWZyaWNhL1R1bmlzJywgbmFtZTogJ0FmcmljYS9UdW5pcyd9LFxuICAgICAgICAgICAge2tleTogJ0FmcmljYS9XaW5kaG9laycsIG5hbWU6ICdBZnJpY2EvV2luZGhvZWsnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FkYWsnLCBuYW1lOiAnQW1lcmljYS9BZGFrJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9BbmNob3JhZ2UnLCBuYW1lOiAnQW1lcmljYS9BbmNob3JhZ2UnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FuZ3VpbGxhJywgbmFtZTogJ0FtZXJpY2EvQW5ndWlsbGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FudGlndWEnLCBuYW1lOiAnQW1lcmljYS9BbnRpZ3VhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9BcmFndWFpbmEnLCBuYW1lOiAnQW1lcmljYS9BcmFndWFpbmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXMnLCBuYW1lOiAnQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9BcmdlbnRpbmEvQ2F0YW1hcmNhJywgbmFtZTogJ0FtZXJpY2EvQXJnZW50aW5hL0NhdGFtYXJjYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQXJnZW50aW5hL0NvbW9kUml2YWRhdmlhJywgbmFtZTogJ0FtZXJpY2EvQXJnZW50aW5hL0NvbW9kUml2YWRhdmlhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9BcmdlbnRpbmEvQ29yZG9iYScsIG5hbWU6ICdBbWVyaWNhL0FyZ2VudGluYS9Db3Jkb2JhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9BcmdlbnRpbmEvSnVqdXknLCBuYW1lOiAnQW1lcmljYS9BcmdlbnRpbmEvSnVqdXknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FyZ2VudGluYS9MYV9SaW9qYScsIG5hbWU6ICdBbWVyaWNhL0FyZ2VudGluYS9MYV9SaW9qYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQXJnZW50aW5hL01lbmRvemEnLCBuYW1lOiAnQW1lcmljYS9BcmdlbnRpbmEvTWVuZG96YSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQXJnZW50aW5hL1Jpb19HYWxsZWdvcycsIG5hbWU6ICdBbWVyaWNhL0FyZ2VudGluYS9SaW9fR2FsbGVnb3MnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FyZ2VudGluYS9TYWx0YScsIG5hbWU6ICdBbWVyaWNhL0FyZ2VudGluYS9TYWx0YSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQXJnZW50aW5hL1Nhbl9KdWFuJywgbmFtZTogJ0FtZXJpY2EvQXJnZW50aW5hL1Nhbl9KdWFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9BcmdlbnRpbmEvU2FuX0x1aXMnLCBuYW1lOiAnQW1lcmljYS9BcmdlbnRpbmEvU2FuX0x1aXMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FyZ2VudGluYS9UdWN1bWFuJywgbmFtZTogJ0FtZXJpY2EvQXJnZW50aW5hL1R1Y3VtYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FyZ2VudGluYS9Vc2h1YWlhJywgbmFtZTogJ0FtZXJpY2EvQXJnZW50aW5hL1VzaHVhaWEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FydWJhJywgbmFtZTogJ0FtZXJpY2EvQXJ1YmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0FzdW5jaW9uJywgbmFtZTogJ0FtZXJpY2EvQXN1bmNpb24nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0F0aWtva2FuJywgbmFtZTogJ0FtZXJpY2EvQXRpa29rYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0F0a2EnLCBuYW1lOiAnQW1lcmljYS9BdGthJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9CYWhpYScsIG5hbWU6ICdBbWVyaWNhL0JhaGlhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9CYWhpYV9CYW5kZXJhcycsIG5hbWU6ICdBbWVyaWNhL0JhaGlhX0JhbmRlcmFzJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9CYXJiYWRvcycsIG5hbWU6ICdBbWVyaWNhL0JhcmJhZG9zJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9CZWxlbScsIG5hbWU6ICdBbWVyaWNhL0JlbGVtJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9CZWxpemUnLCBuYW1lOiAnQW1lcmljYS9CZWxpemUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0JsYW5jLVNhYmxvbicsIG5hbWU6ICdBbWVyaWNhL0JsYW5jLVNhYmxvbid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQm9hX1Zpc3RhJywgbmFtZTogJ0FtZXJpY2EvQm9hX1Zpc3RhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Cb2dvdGEnLCBuYW1lOiAnQW1lcmljYS9Cb2dvdGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0JvaXNlJywgbmFtZTogJ0FtZXJpY2EvQm9pc2UnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0J1ZW5vc19BaXJlcycsIG5hbWU6ICdBbWVyaWNhL0J1ZW5vc19BaXJlcyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ2FtYnJpZGdlX0JheScsIG5hbWU6ICdBbWVyaWNhL0NhbWJyaWRnZV9CYXknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0NhbXBvX0dyYW5kZScsIG5hbWU6ICdBbWVyaWNhL0NhbXBvX0dyYW5kZSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ2FuY3VuJywgbmFtZTogJ0FtZXJpY2EvQ2FuY3VuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9DYXJhY2FzJywgbmFtZTogJ0FtZXJpY2EvQ2FyYWNhcyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ2F0YW1hcmNhJywgbmFtZTogJ0FtZXJpY2EvQ2F0YW1hcmNhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9DYXllbm5lJywgbmFtZTogJ0FtZXJpY2EvQ2F5ZW5uZSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ2F5bWFuJywgbmFtZTogJ0FtZXJpY2EvQ2F5bWFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9DaGljYWdvJywgbmFtZTogJ0FtZXJpY2EvQ2hpY2Fnbyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ2hpaHVhaHVhJywgbmFtZTogJ0FtZXJpY2EvQ2hpaHVhaHVhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Db3JhbF9IYXJib3VyJywgbmFtZTogJ0FtZXJpY2EvQ29yYWxfSGFyYm91cid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ29yZG9iYScsIG5hbWU6ICdBbWVyaWNhL0NvcmRvYmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0Nvc3RhX1JpY2EnLCBuYW1lOiAnQW1lcmljYS9Db3N0YV9SaWNhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9DcmVzdG9uJywgbmFtZTogJ0FtZXJpY2EvQ3Jlc3Rvbid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvQ3VpYWJhJywgbmFtZTogJ0FtZXJpY2EvQ3VpYWJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9DdXJhY2FvJywgbmFtZTogJ0FtZXJpY2EvQ3VyYWNhbyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRGFubWFya3NoYXZuJywgbmFtZTogJ0FtZXJpY2EvRGFubWFya3NoYXZuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9EYXdzb24nLCBuYW1lOiAnQW1lcmljYS9EYXdzb24nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0Rhd3Nvbl9DcmVlaycsIG5hbWU6ICdBbWVyaWNhL0Rhd3Nvbl9DcmVlayd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRGVudmVyJywgbmFtZTogJ0FtZXJpY2EvRGVudmVyJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9EZXRyb2l0JywgbmFtZTogJ0FtZXJpY2EvRGV0cm9pdCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRG9taW5pY2EnLCBuYW1lOiAnQW1lcmljYS9Eb21pbmljYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRWRtb250b24nLCBuYW1lOiAnQW1lcmljYS9FZG1vbnRvbid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRWlydW5lcGUnLCBuYW1lOiAnQW1lcmljYS9FaXJ1bmVwZSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRWxfU2FsdmFkb3InLCBuYW1lOiAnQW1lcmljYS9FbF9TYWx2YWRvcid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRW5zZW5hZGEnLCBuYW1lOiAnQW1lcmljYS9FbnNlbmFkYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvRm9ydF9XYXluZScsIG5hbWU6ICdBbWVyaWNhL0ZvcnRfV2F5bmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0ZvcnRhbGV6YScsIG5hbWU6ICdBbWVyaWNhL0ZvcnRhbGV6YSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvR2xhY2VfQmF5JywgbmFtZTogJ0FtZXJpY2EvR2xhY2VfQmF5J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Hb2R0aGFiJywgbmFtZTogJ0FtZXJpY2EvR29kdGhhYid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvR29vc2VfQmF5JywgbmFtZTogJ0FtZXJpY2EvR29vc2VfQmF5J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9HcmFuZF9UdXJrJywgbmFtZTogJ0FtZXJpY2EvR3JhbmRfVHVyayd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvR3JlbmFkYScsIG5hbWU6ICdBbWVyaWNhL0dyZW5hZGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0d1YWRlbG91cGUnLCBuYW1lOiAnQW1lcmljYS9HdWFkZWxvdXBlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9HdWF0ZW1hbGEnLCBuYW1lOiAnQW1lcmljYS9HdWF0ZW1hbGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0d1YXlhcXVpbCcsIG5hbWU6ICdBbWVyaWNhL0d1YXlhcXVpbCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvR3V5YW5hJywgbmFtZTogJ0FtZXJpY2EvR3V5YW5hJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9IYWxpZmF4JywgbmFtZTogJ0FtZXJpY2EvSGFsaWZheCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSGF2YW5hJywgbmFtZTogJ0FtZXJpY2EvSGF2YW5hJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9IZXJtb3NpbGxvJywgbmFtZTogJ0FtZXJpY2EvSGVybW9zaWxsbyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSW5kaWFuYS9JbmRpYW5hcG9saXMnLCBuYW1lOiAnQW1lcmljYS9JbmRpYW5hL0luZGlhbmFwb2xpcyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSW5kaWFuYS9Lbm94JywgbmFtZTogJ0FtZXJpY2EvSW5kaWFuYS9Lbm94J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9JbmRpYW5hL01hcmVuZ28nLCBuYW1lOiAnQW1lcmljYS9JbmRpYW5hL01hcmVuZ28nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0luZGlhbmEvUGV0ZXJzYnVyZycsIG5hbWU6ICdBbWVyaWNhL0luZGlhbmEvUGV0ZXJzYnVyZyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSW5kaWFuYS9UZWxsX0NpdHknLCBuYW1lOiAnQW1lcmljYS9JbmRpYW5hL1RlbGxfQ2l0eSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSW5kaWFuYS9WZXZheScsIG5hbWU6ICdBbWVyaWNhL0luZGlhbmEvVmV2YXknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0luZGlhbmEvVmluY2VubmVzJywgbmFtZTogJ0FtZXJpY2EvSW5kaWFuYS9WaW5jZW5uZXMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0luZGlhbmEvV2luYW1hYycsIG5hbWU6ICdBbWVyaWNhL0luZGlhbmEvV2luYW1hYyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSW5kaWFuYXBvbGlzJywgbmFtZTogJ0FtZXJpY2EvSW5kaWFuYXBvbGlzJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9JbnV2aWsnLCBuYW1lOiAnQW1lcmljYS9JbnV2aWsnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0lxYWx1aXQnLCBuYW1lOiAnQW1lcmljYS9JcWFsdWl0J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9KYW1haWNhJywgbmFtZTogJ0FtZXJpY2EvSmFtYWljYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSnVqdXknLCBuYW1lOiAnQW1lcmljYS9KdWp1eSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvSnVuZWF1JywgbmFtZTogJ0FtZXJpY2EvSnVuZWF1J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9LZW50dWNreS9Mb3Vpc3ZpbGxlJywgbmFtZTogJ0FtZXJpY2EvS2VudHVja3kvTG91aXN2aWxsZSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvS2VudHVja3kvTW9udGljZWxsbycsIG5hbWU6ICdBbWVyaWNhL0tlbnR1Y2t5L01vbnRpY2VsbG8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0tub3hfSU4nLCBuYW1lOiAnQW1lcmljYS9Lbm94X0lOJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9LcmFsZW5kaWprJywgbmFtZTogJ0FtZXJpY2EvS3JhbGVuZGlqayd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTGFfUGF6JywgbmFtZTogJ0FtZXJpY2EvTGFfUGF6J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9MaW1hJywgbmFtZTogJ0FtZXJpY2EvTGltYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTG9zX0FuZ2VsZXMnLCBuYW1lOiAnQW1lcmljYS9Mb3NfQW5nZWxlcyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTG91aXN2aWxsZScsIG5hbWU6ICdBbWVyaWNhL0xvdWlzdmlsbGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL0xvd2VyX1ByaW5jZXMnLCBuYW1lOiAnQW1lcmljYS9Mb3dlcl9QcmluY2VzJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NYWNlaW8nLCBuYW1lOiAnQW1lcmljYS9NYWNlaW8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL01hbmFndWEnLCBuYW1lOiAnQW1lcmljYS9NYW5hZ3VhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NYW5hdXMnLCBuYW1lOiAnQW1lcmljYS9NYW5hdXMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL01hcmlnb3QnLCBuYW1lOiAnQW1lcmljYS9NYXJpZ290J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NYXJ0aW5pcXVlJywgbmFtZTogJ0FtZXJpY2EvTWFydGluaXF1ZSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTWF0YW1vcm9zJywgbmFtZTogJ0FtZXJpY2EvTWF0YW1vcm9zJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NYXphdGxhbicsIG5hbWU6ICdBbWVyaWNhL01hemF0bGFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NZW5kb3phJywgbmFtZTogJ0FtZXJpY2EvTWVuZG96YSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTWVub21pbmVlJywgbmFtZTogJ0FtZXJpY2EvTWVub21pbmVlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NZXJpZGEnLCBuYW1lOiAnQW1lcmljYS9NZXJpZGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL01ldGxha2F0bGEnLCBuYW1lOiAnQW1lcmljYS9NZXRsYWthdGxhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NZXhpY29fQ2l0eScsIG5hbWU6ICdBbWVyaWNhL01leGljb19DaXR5J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9NaXF1ZWxvbicsIG5hbWU6ICdBbWVyaWNhL01pcXVlbG9uJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Nb25jdG9uJywgbmFtZTogJ0FtZXJpY2EvTW9uY3Rvbid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTW9udGVycmV5JywgbmFtZTogJ0FtZXJpY2EvTW9udGVycmV5J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Nb250ZXZpZGVvJywgbmFtZTogJ0FtZXJpY2EvTW9udGV2aWRlbyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTW9udHJlYWwnLCBuYW1lOiAnQW1lcmljYS9Nb250cmVhbCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTW9udHNlcnJhdCcsIG5hbWU6ICdBbWVyaWNhL01vbnRzZXJyYXQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL05hc3NhdScsIG5hbWU6ICdBbWVyaWNhL05hc3NhdSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTmV3X1lvcmsnLCBuYW1lOiAnQW1lcmljYS9OZXdfWW9yayd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTmlwaWdvbicsIG5hbWU6ICdBbWVyaWNhL05pcGlnb24nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL05vbWUnLCBuYW1lOiAnQW1lcmljYS9Ob21lJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Ob3JvbmhhJywgbmFtZTogJ0FtZXJpY2EvTm9yb25oYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvTm9ydGhfRGFrb3RhL0JldWxhaCcsIG5hbWU6ICdBbWVyaWNhL05vcnRoX0Rha290YS9CZXVsYWgnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL05vcnRoX0Rha290YS9DZW50ZXInLCBuYW1lOiAnQW1lcmljYS9Ob3J0aF9EYWtvdGEvQ2VudGVyJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Ob3J0aF9EYWtvdGEvTmV3X1NhbGVtJywgbmFtZTogJ0FtZXJpY2EvTm9ydGhfRGFrb3RhL05ld19TYWxlbSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvT2ppbmFnYScsIG5hbWU6ICdBbWVyaWNhL09qaW5hZ2EnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1BhbmFtYScsIG5hbWU6ICdBbWVyaWNhL1BhbmFtYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvUGFuZ25pcnR1bmcnLCBuYW1lOiAnQW1lcmljYS9QYW5nbmlydHVuZyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvUGFyYW1hcmlibycsIG5hbWU6ICdBbWVyaWNhL1BhcmFtYXJpYm8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1Bob2VuaXgnLCBuYW1lOiAnQW1lcmljYS9QaG9lbml4J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Qb3J0LWF1LVByaW5jZScsIG5hbWU6ICdBbWVyaWNhL1BvcnQtYXUtUHJpbmNlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Qb3J0X29mX1NwYWluJywgbmFtZTogJ0FtZXJpY2EvUG9ydF9vZl9TcGFpbid9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvUG9ydG9fQWNyZScsIG5hbWU6ICdBbWVyaWNhL1BvcnRvX0FjcmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1BvcnRvX1ZlbGhvJywgbmFtZTogJ0FtZXJpY2EvUG9ydG9fVmVsaG8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1B1ZXJ0b19SaWNvJywgbmFtZTogJ0FtZXJpY2EvUHVlcnRvX1JpY28nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1JhaW55X1JpdmVyJywgbmFtZTogJ0FtZXJpY2EvUmFpbnlfUml2ZXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1Jhbmtpbl9JbmxldCcsIG5hbWU6ICdBbWVyaWNhL1Jhbmtpbl9JbmxldCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvUmVjaWZlJywgbmFtZTogJ0FtZXJpY2EvUmVjaWZlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9SZWdpbmEnLCBuYW1lOiAnQW1lcmljYS9SZWdpbmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1Jlc29sdXRlJywgbmFtZTogJ0FtZXJpY2EvUmVzb2x1dGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1Jpb19CcmFuY28nLCBuYW1lOiAnQW1lcmljYS9SaW9fQnJhbmNvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Sb3NhcmlvJywgbmFtZTogJ0FtZXJpY2EvUm9zYXJpbyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvU2FudGFfSXNhYmVsJywgbmFtZTogJ0FtZXJpY2EvU2FudGFfSXNhYmVsJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TYW50YXJlbScsIG5hbWU6ICdBbWVyaWNhL1NhbnRhcmVtJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TYW50aWFnbycsIG5hbWU6ICdBbWVyaWNhL1NhbnRpYWdvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TYW50b19Eb21pbmdvJywgbmFtZTogJ0FtZXJpY2EvU2FudG9fRG9taW5nbyd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvU2FvX1BhdWxvJywgbmFtZTogJ0FtZXJpY2EvU2FvX1BhdWxvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TY29yZXNieXN1bmQnLCBuYW1lOiAnQW1lcmljYS9TY29yZXNieXN1bmQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1NoaXByb2NrJywgbmFtZTogJ0FtZXJpY2EvU2hpcHJvY2snfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1NpdGthJywgbmFtZTogJ0FtZXJpY2EvU2l0a2EnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1N0X0JhcnRoZWxlbXknLCBuYW1lOiAnQW1lcmljYS9TdF9CYXJ0aGVsZW15J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TdF9Kb2hucycsIG5hbWU6ICdBbWVyaWNhL1N0X0pvaG5zJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TdF9LaXR0cycsIG5hbWU6ICdBbWVyaWNhL1N0X0tpdHRzJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TdF9MdWNpYScsIG5hbWU6ICdBbWVyaWNhL1N0X0x1Y2lhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9TdF9UaG9tYXMnLCBuYW1lOiAnQW1lcmljYS9TdF9UaG9tYXMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1N0X1ZpbmNlbnQnLCBuYW1lOiAnQW1lcmljYS9TdF9WaW5jZW50J30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Td2lmdF9DdXJyZW50JywgbmFtZTogJ0FtZXJpY2EvU3dpZnRfQ3VycmVudCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvVGVndWNpZ2FscGEnLCBuYW1lOiAnQW1lcmljYS9UZWd1Y2lnYWxwYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvVGh1bGUnLCBuYW1lOiAnQW1lcmljYS9UaHVsZSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvVGh1bmRlcl9CYXknLCBuYW1lOiAnQW1lcmljYS9UaHVuZGVyX0JheSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvVGlqdWFuYScsIG5hbWU6ICdBbWVyaWNhL1RpanVhbmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1Rvcm9udG8nLCBuYW1lOiAnQW1lcmljYS9Ub3JvbnRvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9Ub3J0b2xhJywgbmFtZTogJ0FtZXJpY2EvVG9ydG9sYSd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvVmFuY291dmVyJywgbmFtZTogJ0FtZXJpY2EvVmFuY291dmVyJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9WaXJnaW4nLCBuYW1lOiAnQW1lcmljYS9WaXJnaW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbWVyaWNhL1doaXRlaG9yc2UnLCBuYW1lOiAnQW1lcmljYS9XaGl0ZWhvcnNlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9XaW5uaXBlZycsIG5hbWU6ICdBbWVyaWNhL1dpbm5pcGVnJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW1lcmljYS9ZYWt1dGF0JywgbmFtZTogJ0FtZXJpY2EvWWFrdXRhdCd9LFxuICAgICAgICAgICAge2tleTogJ0FtZXJpY2EvWWVsbG93a25pZmUnLCBuYW1lOiAnQW1lcmljYS9ZZWxsb3drbmlmZSd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvQ2FzZXknLCBuYW1lOiAnQW50YXJjdGljYS9DYXNleSd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvRGF2aXMnLCBuYW1lOiAnQW50YXJjdGljYS9EYXZpcyd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvRHVtb250RFVydmlsbGUnLCBuYW1lOiAnQW50YXJjdGljYS9EdW1vbnREVXJ2aWxsZSd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvTWFjcXVhcmllJywgbmFtZTogJ0FudGFyY3RpY2EvTWFjcXVhcmllJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW50YXJjdGljYS9NYXdzb24nLCBuYW1lOiAnQW50YXJjdGljYS9NYXdzb24nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbnRhcmN0aWNhL01jTXVyZG8nLCBuYW1lOiAnQW50YXJjdGljYS9NY011cmRvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW50YXJjdGljYS9QYWxtZXInLCBuYW1lOiAnQW50YXJjdGljYS9QYWxtZXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdBbnRhcmN0aWNhL1JvdGhlcmEnLCBuYW1lOiAnQW50YXJjdGljYS9Sb3RoZXJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQW50YXJjdGljYS9Tb3V0aF9Qb2xlJywgbmFtZTogJ0FudGFyY3RpY2EvU291dGhfUG9sZSd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvU3lvd2EnLCBuYW1lOiAnQW50YXJjdGljYS9TeW93YSd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvVHJvbGwnLCBuYW1lOiAnQW50YXJjdGljYS9Ucm9sbCd9LFxuICAgICAgICAgICAge2tleTogJ0FudGFyY3RpY2EvVm9zdG9rJywgbmFtZTogJ0FudGFyY3RpY2EvVm9zdG9rJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXJjdGljL0xvbmd5ZWFyYnllbicsIG5hbWU6ICdBcmN0aWMvTG9uZ3llYXJieWVuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9BZGVuJywgbmFtZTogJ0FzaWEvQWRlbid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQWxtYXR5JywgbmFtZTogJ0FzaWEvQWxtYXR5J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9BbW1hbicsIG5hbWU6ICdBc2lhL0FtbWFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9BbmFkeXInLCBuYW1lOiAnQXNpYS9BbmFkeXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0FxdGF1JywgbmFtZTogJ0FzaWEvQXF0YXUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0FxdG9iZScsIG5hbWU6ICdBc2lhL0FxdG9iZSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQXNoZ2FiYXQnLCBuYW1lOiAnQXNpYS9Bc2hnYWJhdCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQXNoa2hhYmFkJywgbmFtZTogJ0FzaWEvQXNoa2hhYmFkJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9CYWdoZGFkJywgbmFtZTogJ0FzaWEvQmFnaGRhZCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQmFocmFpbicsIG5hbWU6ICdBc2lhL0JhaHJhaW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0Jha3UnLCBuYW1lOiAnQXNpYS9CYWt1J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9CYW5na29rJywgbmFtZTogJ0FzaWEvQmFuZ2tvayd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQmVpcnV0JywgbmFtZTogJ0FzaWEvQmVpcnV0J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9CaXNoa2VrJywgbmFtZTogJ0FzaWEvQmlzaGtlayd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQnJ1bmVpJywgbmFtZTogJ0FzaWEvQnJ1bmVpJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9DYWxjdXR0YScsIG5hbWU6ICdBc2lhL0NhbGN1dHRhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9DaGl0YScsIG5hbWU6ICdBc2lhL0NoaXRhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9DaG9pYmFsc2FuJywgbmFtZTogJ0FzaWEvQ2hvaWJhbHNhbid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvQ2hvbmdxaW5nJywgbmFtZTogJ0FzaWEvQ2hvbmdxaW5nJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9DaHVuZ2tpbmcnLCBuYW1lOiAnQXNpYS9DaHVuZ2tpbmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0NvbG9tYm8nLCBuYW1lOiAnQXNpYS9Db2xvbWJvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9EYWNjYScsIG5hbWU6ICdBc2lhL0RhY2NhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9EYW1hc2N1cycsIG5hbWU6ICdBc2lhL0RhbWFzY3VzJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9EaGFrYScsIG5hbWU6ICdBc2lhL0RoYWthJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9EaWxpJywgbmFtZTogJ0FzaWEvRGlsaSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvRHViYWknLCBuYW1lOiAnQXNpYS9EdWJhaSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvRHVzaGFuYmUnLCBuYW1lOiAnQXNpYS9EdXNoYW5iZSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvR2F6YScsIG5hbWU6ICdBc2lhL0dhemEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0hhcmJpbicsIG5hbWU6ICdBc2lhL0hhcmJpbid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvSGVicm9uJywgbmFtZTogJ0FzaWEvSGVicm9uJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9Ib19DaGlfTWluaCcsIG5hbWU6ICdBc2lhL0hvX0NoaV9NaW5oJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9Ib25nX0tvbmcnLCBuYW1lOiAnQXNpYS9Ib25nX0tvbmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0hvdmQnLCBuYW1lOiAnQXNpYS9Ib3ZkJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9Jcmt1dHNrJywgbmFtZTogJ0FzaWEvSXJrdXRzayd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvSXN0YW5idWwnLCBuYW1lOiAnQXNpYS9Jc3RhbmJ1bCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvSmFrYXJ0YScsIG5hbWU6ICdBc2lhL0pha2FydGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0pheWFwdXJhJywgbmFtZTogJ0FzaWEvSmF5YXB1cmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0plcnVzYWxlbScsIG5hbWU6ICdBc2lhL0plcnVzYWxlbSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS2FidWwnLCBuYW1lOiAnQXNpYS9LYWJ1bCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS2FtY2hhdGthJywgbmFtZTogJ0FzaWEvS2FtY2hhdGthJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9LYXJhY2hpJywgbmFtZTogJ0FzaWEvS2FyYWNoaSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS2FzaGdhcicsIG5hbWU6ICdBc2lhL0thc2hnYXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0thdGhtYW5kdScsIG5hbWU6ICdBc2lhL0thdGhtYW5kdSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS2F0bWFuZHUnLCBuYW1lOiAnQXNpYS9LYXRtYW5kdSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS2hhbmR5Z2EnLCBuYW1lOiAnQXNpYS9LaGFuZHlnYSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS29sa2F0YScsIG5hbWU6ICdBc2lhL0tvbGthdGEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0tyYXNub3lhcnNrJywgbmFtZTogJ0FzaWEvS3Jhc25veWFyc2snfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0t1YWxhX0x1bXB1cicsIG5hbWU6ICdBc2lhL0t1YWxhX0x1bXB1cid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvS3VjaGluZycsIG5hbWU6ICdBc2lhL0t1Y2hpbmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL0t1d2FpdCcsIG5hbWU6ICdBc2lhL0t1d2FpdCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvTWFjYW8nLCBuYW1lOiAnQXNpYS9NYWNhbyd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvTWFjYXUnLCBuYW1lOiAnQXNpYS9NYWNhdSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvTWFnYWRhbicsIG5hbWU6ICdBc2lhL01hZ2FkYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL01ha2Fzc2FyJywgbmFtZTogJ0FzaWEvTWFrYXNzYXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL01hbmlsYScsIG5hbWU6ICdBc2lhL01hbmlsYSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvTXVzY2F0JywgbmFtZTogJ0FzaWEvTXVzY2F0J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9OaWNvc2lhJywgbmFtZTogJ0FzaWEvTmljb3NpYSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvTm92b2t1em5ldHNrJywgbmFtZTogJ0FzaWEvTm92b2t1em5ldHNrJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9Ob3Zvc2liaXJzaycsIG5hbWU6ICdBc2lhL05vdm9zaWJpcnNrJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9PbXNrJywgbmFtZTogJ0FzaWEvT21zayd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvT3JhbCcsIG5hbWU6ICdBc2lhL09yYWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1Bobm9tX1BlbmgnLCBuYW1lOiAnQXNpYS9QaG5vbV9QZW5oJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9Qb250aWFuYWsnLCBuYW1lOiAnQXNpYS9Qb250aWFuYWsnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1B5b25neWFuZycsIG5hbWU6ICdBc2lhL1B5b25neWFuZyd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvUWF0YXInLCBuYW1lOiAnQXNpYS9RYXRhcid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvUXl6eWxvcmRhJywgbmFtZTogJ0FzaWEvUXl6eWxvcmRhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9SYW5nb29uJywgbmFtZTogJ0FzaWEvUmFuZ29vbid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvUml5YWRoJywgbmFtZTogJ0FzaWEvUml5YWRoJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9TYWlnb24nLCBuYW1lOiAnQXNpYS9TYWlnb24nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1Nha2hhbGluJywgbmFtZTogJ0FzaWEvU2FraGFsaW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1NhbWFya2FuZCcsIG5hbWU6ICdBc2lhL1NhbWFya2FuZCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvU2VvdWwnLCBuYW1lOiAnQXNpYS9TZW91bCd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvU2hhbmdoYWknLCBuYW1lOiAnQXNpYS9TaGFuZ2hhaSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvU2luZ2Fwb3JlJywgbmFtZTogJ0FzaWEvU2luZ2Fwb3JlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9TcmVkbmVrb2x5bXNrJywgbmFtZTogJ0FzaWEvU3JlZG5la29seW1zayd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvVGFpcGVpJywgbmFtZTogJ0FzaWEvVGFpcGVpJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9UYXNoa2VudCcsIG5hbWU6ICdBc2lhL1Rhc2hrZW50J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9UYmlsaXNpJywgbmFtZTogJ0FzaWEvVGJpbGlzaSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvVGVocmFuJywgbmFtZTogJ0FzaWEvVGVocmFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9UZWxfQXZpdicsIG5hbWU6ICdBc2lhL1RlbF9Bdml2J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9UaGltYnUnLCBuYW1lOiAnQXNpYS9UaGltYnUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1RoaW1waHUnLCBuYW1lOiAnQXNpYS9UaGltcGh1J30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9Ub2t5bycsIG5hbWU6ICdBc2lhL1Rva3lvJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9VanVuZ19QYW5kYW5nJywgbmFtZTogJ0FzaWEvVWp1bmdfUGFuZGFuZyd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvVWxhYW5iYWF0YXInLCBuYW1lOiAnQXNpYS9VbGFhbmJhYXRhcid9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvVWxhbl9CYXRvcicsIG5hbWU6ICdBc2lhL1VsYW5fQmF0b3InfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1VydW1xaScsIG5hbWU6ICdBc2lhL1VydW1xaSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvVXN0LU5lcmEnLCBuYW1lOiAnQXNpYS9Vc3QtTmVyYSd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvVmllbnRpYW5lJywgbmFtZTogJ0FzaWEvVmllbnRpYW5lJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9WbGFkaXZvc3RvaycsIG5hbWU6ICdBc2lhL1ZsYWRpdm9zdG9rJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXNpYS9ZYWt1dHNrJywgbmFtZTogJ0FzaWEvWWFrdXRzayd9LFxuICAgICAgICAgICAge2tleTogJ0FzaWEvWWVrYXRlcmluYnVyZycsIG5hbWU6ICdBc2lhL1lla2F0ZXJpbmJ1cmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBc2lhL1llcmV2YW4nLCBuYW1lOiAnQXNpYS9ZZXJldmFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXRsYW50aWMvQXpvcmVzJywgbmFtZTogJ0F0bGFudGljL0F6b3Jlcyd9LFxuICAgICAgICAgICAge2tleTogJ0F0bGFudGljL0Jlcm11ZGEnLCBuYW1lOiAnQXRsYW50aWMvQmVybXVkYSd9LFxuICAgICAgICAgICAge2tleTogJ0F0bGFudGljL0NhbmFyeScsIG5hbWU6ICdBdGxhbnRpYy9DYW5hcnknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdGxhbnRpYy9DYXBlX1ZlcmRlJywgbmFtZTogJ0F0bGFudGljL0NhcGVfVmVyZGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdGxhbnRpYy9GYWVyb2UnLCBuYW1lOiAnQXRsYW50aWMvRmFlcm9lJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXRsYW50aWMvRmFyb2UnLCBuYW1lOiAnQXRsYW50aWMvRmFyb2UnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdGxhbnRpYy9KYW5fTWF5ZW4nLCBuYW1lOiAnQXRsYW50aWMvSmFuX01heWVuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXRsYW50aWMvTWFkZWlyYScsIG5hbWU6ICdBdGxhbnRpYy9NYWRlaXJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXRsYW50aWMvUmV5a2phdmlrJywgbmFtZTogJ0F0bGFudGljL1JleWtqYXZpayd9LFxuICAgICAgICAgICAge2tleTogJ0F0bGFudGljL1NvdXRoX0dlb3JnaWEnLCBuYW1lOiAnQXRsYW50aWMvU291dGhfR2VvcmdpYSd9LFxuICAgICAgICAgICAge2tleTogJ0F0bGFudGljL1N0X0hlbGVuYScsIG5hbWU6ICdBdGxhbnRpYy9TdF9IZWxlbmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdGxhbnRpYy9TdGFubGV5JywgbmFtZTogJ0F0bGFudGljL1N0YW5sZXknfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvQUNUJywgbmFtZTogJ0F1c3RyYWxpYS9BQ1QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvQWRlbGFpZGUnLCBuYW1lOiAnQXVzdHJhbGlhL0FkZWxhaWRlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL0JyaXNiYW5lJywgbmFtZTogJ0F1c3RyYWxpYS9CcmlzYmFuZSd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9Ccm9rZW5fSGlsbCcsIG5hbWU6ICdBdXN0cmFsaWEvQnJva2VuX0hpbGwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvQ2FuYmVycmEnLCBuYW1lOiAnQXVzdHJhbGlhL0NhbmJlcnJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL0N1cnJpZScsIG5hbWU6ICdBdXN0cmFsaWEvQ3VycmllJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL0RhcndpbicsIG5hbWU6ICdBdXN0cmFsaWEvRGFyd2luJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL0V1Y2xhJywgbmFtZTogJ0F1c3RyYWxpYS9FdWNsYSd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9Ib2JhcnQnLCBuYW1lOiAnQXVzdHJhbGlhL0hvYmFydCd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9MSEknLCBuYW1lOiAnQXVzdHJhbGlhL0xISSd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9MaW5kZW1hbicsIG5hbWU6ICdBdXN0cmFsaWEvTGluZGVtYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvTG9yZF9Ib3dlJywgbmFtZTogJ0F1c3RyYWxpYS9Mb3JkX0hvd2UnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvTWVsYm91cm5lJywgbmFtZTogJ0F1c3RyYWxpYS9NZWxib3VybmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvTlNXJywgbmFtZTogJ0F1c3RyYWxpYS9OU1cnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvTm9ydGgnLCBuYW1lOiAnQXVzdHJhbGlhL05vcnRoJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL1BlcnRoJywgbmFtZTogJ0F1c3RyYWxpYS9QZXJ0aCd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9RdWVlbnNsYW5kJywgbmFtZTogJ0F1c3RyYWxpYS9RdWVlbnNsYW5kJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL1NvdXRoJywgbmFtZTogJ0F1c3RyYWxpYS9Tb3V0aCd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9TeWRuZXknLCBuYW1lOiAnQXVzdHJhbGlhL1N5ZG5leSd9LFxuICAgICAgICAgICAge2tleTogJ0F1c3RyYWxpYS9UYXNtYW5pYScsIG5hbWU6ICdBdXN0cmFsaWEvVGFzbWFuaWEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvVmljdG9yaWEnLCBuYW1lOiAnQXVzdHJhbGlhL1ZpY3RvcmlhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQXVzdHJhbGlhL1dlc3QnLCBuYW1lOiAnQXVzdHJhbGlhL1dlc3QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdBdXN0cmFsaWEvWWFuY293aW5uYScsIG5hbWU6ICdBdXN0cmFsaWEvWWFuY293aW5uYSd9LFxuICAgICAgICAgICAge2tleTogJ0JyYXppbC9BY3JlJywgbmFtZTogJ0JyYXppbC9BY3JlJ30sXG4gICAgICAgICAgICB7a2V5OiAnQnJhemlsL0RlTm9yb25oYScsIG5hbWU6ICdCcmF6aWwvRGVOb3JvbmhhJ30sXG4gICAgICAgICAgICB7a2V5OiAnQnJhemlsL0Vhc3QnLCBuYW1lOiAnQnJhemlsL0Vhc3QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdCcmF6aWwvV2VzdCcsIG5hbWU6ICdCcmF6aWwvV2VzdCd9LFxuICAgICAgICAgICAge2tleTogJ0NFVCcsIG5hbWU6ICdDRVQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdDU1Q2Q0RUJywgbmFtZTogJ0NTVDZDRFQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdDYW5hZGEvQXRsYW50aWMnLCBuYW1lOiAnQ2FuYWRhL0F0bGFudGljJ30sXG4gICAgICAgICAgICB7a2V5OiAnQ2FuYWRhL0NlbnRyYWwnLCBuYW1lOiAnQ2FuYWRhL0NlbnRyYWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdDYW5hZGEvRWFzdC1TYXNrYXRjaGV3YW4nLCBuYW1lOiAnQ2FuYWRhL0Vhc3QtU2Fza2F0Y2hld2FuJ30sXG4gICAgICAgICAgICB7a2V5OiAnQ2FuYWRhL0Vhc3Rlcm4nLCBuYW1lOiAnQ2FuYWRhL0Vhc3Rlcm4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdDYW5hZGEvTW91bnRhaW4nLCBuYW1lOiAnQ2FuYWRhL01vdW50YWluJ30sXG4gICAgICAgICAgICB7a2V5OiAnQ2FuYWRhL05ld2ZvdW5kbGFuZCcsIG5hbWU6ICdDYW5hZGEvTmV3Zm91bmRsYW5kJ30sXG4gICAgICAgICAgICB7a2V5OiAnQ2FuYWRhL1BhY2lmaWMnLCBuYW1lOiAnQ2FuYWRhL1BhY2lmaWMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdDYW5hZGEvU2Fza2F0Y2hld2FuJywgbmFtZTogJ0NhbmFkYS9TYXNrYXRjaGV3YW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdDYW5hZGEvWXVrb24nLCBuYW1lOiAnQ2FuYWRhL1l1a29uJ30sXG4gICAgICAgICAgICB7a2V5OiAnQ2hpbGUvQ29udGluZW50YWwnLCBuYW1lOiAnQ2hpbGUvQ29udGluZW50YWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdDaGlsZS9FYXN0ZXJJc2xhbmQnLCBuYW1lOiAnQ2hpbGUvRWFzdGVySXNsYW5kJ30sXG4gICAgICAgICAgICB7a2V5OiAnQ3ViYScsIG5hbWU6ICdDdWJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnRUVUJywgbmFtZTogJ0VFVCd9LFxuICAgICAgICAgICAge2tleTogJ0VTVCcsIG5hbWU6ICdFU1QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFU1Q1RURUJywgbmFtZTogJ0VTVDVFRFQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFZ3lwdCcsIG5hbWU6ICdFZ3lwdCd9LFxuICAgICAgICAgICAge2tleTogJ0VpcmUnLCBuYW1lOiAnRWlyZSd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQnLCBuYW1lOiAnRXRjL0dNVCd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQrMCcsIG5hbWU6ICdFdGMvR01UKzAnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01UKzEnLCBuYW1lOiAnRXRjL0dNVCsxJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVCsxMCcsIG5hbWU6ICdFdGMvR01UKzEwJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVCsxMScsIG5hbWU6ICdFdGMvR01UKzExJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVCsxMicsIG5hbWU6ICdFdGMvR01UKzEyJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVCsyJywgbmFtZTogJ0V0Yy9HTVQrMid9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQrMycsIG5hbWU6ICdFdGMvR01UKzMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01UKzQnLCBuYW1lOiAnRXRjL0dNVCs0J30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVCs1JywgbmFtZTogJ0V0Yy9HTVQrNSd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQrNicsIG5hbWU6ICdFdGMvR01UKzYnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01UKzcnLCBuYW1lOiAnRXRjL0dNVCs3J30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVCs4JywgbmFtZTogJ0V0Yy9HTVQrOCd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQrOScsIG5hbWU6ICdFdGMvR01UKzknfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01ULTAnLCBuYW1lOiAnRXRjL0dNVC0wJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVC0xJywgbmFtZTogJ0V0Yy9HTVQtMSd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtMTAnLCBuYW1lOiAnRXRjL0dNVC0xMCd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtMTEnLCBuYW1lOiAnRXRjL0dNVC0xMSd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtMTInLCBuYW1lOiAnRXRjL0dNVC0xMid9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtMTMnLCBuYW1lOiAnRXRjL0dNVC0xMyd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtMTQnLCBuYW1lOiAnRXRjL0dNVC0xNCd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtMicsIG5hbWU6ICdFdGMvR01ULTInfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01ULTMnLCBuYW1lOiAnRXRjL0dNVC0zJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVC00JywgbmFtZTogJ0V0Yy9HTVQtNCd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtNScsIG5hbWU6ICdFdGMvR01ULTUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01ULTYnLCBuYW1lOiAnRXRjL0dNVC02J30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVC03JywgbmFtZTogJ0V0Yy9HTVQtNyd9LFxuICAgICAgICAgICAge2tleTogJ0V0Yy9HTVQtOCcsIG5hbWU6ICdFdGMvR01ULTgnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR01ULTknLCBuYW1lOiAnRXRjL0dNVC05J30sXG4gICAgICAgICAgICB7a2V5OiAnRXRjL0dNVDAnLCBuYW1lOiAnRXRjL0dNVDAnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvR3JlZW53aWNoJywgbmFtZTogJ0V0Yy9HcmVlbndpY2gnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvVUNUJywgbmFtZTogJ0V0Yy9VQ1QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvVVRDJywgbmFtZTogJ0V0Yy9VVEMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvVW5pdmVyc2FsJywgbmFtZTogJ0V0Yy9Vbml2ZXJzYWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdGMvWnVsdScsIG5hbWU6ICdFdGMvWnVsdSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9BbXN0ZXJkYW0nLCBuYW1lOiAnRXVyb3BlL0Ftc3RlcmRhbSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9BbmRvcnJhJywgbmFtZTogJ0V1cm9wZS9BbmRvcnJhJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0F0aGVucycsIG5hbWU6ICdFdXJvcGUvQXRoZW5zJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0JlbGZhc3QnLCBuYW1lOiAnRXVyb3BlL0JlbGZhc3QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvQmVsZ3JhZGUnLCBuYW1lOiAnRXVyb3BlL0JlbGdyYWRlJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0JlcmxpbicsIG5hbWU6ICdFdXJvcGUvQmVybGluJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0JyYXRpc2xhdmEnLCBuYW1lOiAnRXVyb3BlL0JyYXRpc2xhdmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvQnJ1c3NlbHMnLCBuYW1lOiAnRXVyb3BlL0JydXNzZWxzJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0J1Y2hhcmVzdCcsIG5hbWU6ICdFdXJvcGUvQnVjaGFyZXN0J30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0J1ZGFwZXN0JywgbmFtZTogJ0V1cm9wZS9CdWRhcGVzdCd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9CdXNpbmdlbicsIG5hbWU6ICdFdXJvcGUvQnVzaW5nZW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvQ2hpc2luYXUnLCBuYW1lOiAnRXVyb3BlL0NoaXNpbmF1J30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0NvcGVuaGFnZW4nLCBuYW1lOiAnRXVyb3BlL0NvcGVuaGFnZW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvRHVibGluJywgbmFtZTogJ0V1cm9wZS9EdWJsaW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvR2licmFsdGFyJywgbmFtZTogJ0V1cm9wZS9HaWJyYWx0YXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvR3Vlcm5zZXknLCBuYW1lOiAnRXVyb3BlL0d1ZXJuc2V5J30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0hlbHNpbmtpJywgbmFtZTogJ0V1cm9wZS9IZWxzaW5raSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9Jc2xlX29mX01hbicsIG5hbWU6ICdFdXJvcGUvSXNsZV9vZl9NYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvSXN0YW5idWwnLCBuYW1lOiAnRXVyb3BlL0lzdGFuYnVsJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0plcnNleScsIG5hbWU6ICdFdXJvcGUvSmVyc2V5J30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0thbGluaW5ncmFkJywgbmFtZTogJ0V1cm9wZS9LYWxpbmluZ3JhZCd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9LaWV2JywgbmFtZTogJ0V1cm9wZS9LaWV2J30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0xpc2JvbicsIG5hbWU6ICdFdXJvcGUvTGlzYm9uJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0xqdWJsamFuYScsIG5hbWU6ICdFdXJvcGUvTGp1YmxqYW5hJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0xvbmRvbicsIG5hbWU6ICdFdXJvcGUvTG9uZG9uJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL0x1eGVtYm91cmcnLCBuYW1lOiAnRXVyb3BlL0x1eGVtYm91cmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvTWFkcmlkJywgbmFtZTogJ0V1cm9wZS9NYWRyaWQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvTWFsdGEnLCBuYW1lOiAnRXVyb3BlL01hbHRhJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL01hcmllaGFtbicsIG5hbWU6ICdFdXJvcGUvTWFyaWVoYW1uJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL01pbnNrJywgbmFtZTogJ0V1cm9wZS9NaW5zayd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9Nb25hY28nLCBuYW1lOiAnRXVyb3BlL01vbmFjbyd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9Nb3Njb3cnLCBuYW1lOiAnRXVyb3BlL01vc2Nvdyd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9OaWNvc2lhJywgbmFtZTogJ0V1cm9wZS9OaWNvc2lhJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL09zbG8nLCBuYW1lOiAnRXVyb3BlL09zbG8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvUGFyaXMnLCBuYW1lOiAnRXVyb3BlL1BhcmlzJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1BvZGdvcmljYScsIG5hbWU6ICdFdXJvcGUvUG9kZ29yaWNhJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1ByYWd1ZScsIG5hbWU6ICdFdXJvcGUvUHJhZ3VlJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1JpZ2EnLCBuYW1lOiAnRXVyb3BlL1JpZ2EnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvUm9tZScsIG5hbWU6ICdFdXJvcGUvUm9tZSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9TYW1hcmEnLCBuYW1lOiAnRXVyb3BlL1NhbWFyYSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9TYW5fTWFyaW5vJywgbmFtZTogJ0V1cm9wZS9TYW5fTWFyaW5vJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1NhcmFqZXZvJywgbmFtZTogJ0V1cm9wZS9TYXJhamV2byd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9TaW1mZXJvcG9sJywgbmFtZTogJ0V1cm9wZS9TaW1mZXJvcG9sJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1Nrb3BqZScsIG5hbWU6ICdFdXJvcGUvU2tvcGplJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1NvZmlhJywgbmFtZTogJ0V1cm9wZS9Tb2ZpYSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9TdG9ja2hvbG0nLCBuYW1lOiAnRXVyb3BlL1N0b2NraG9sbSd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9UYWxsaW5uJywgbmFtZTogJ0V1cm9wZS9UYWxsaW5uJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1RpcmFuZScsIG5hbWU6ICdFdXJvcGUvVGlyYW5lJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1RpcmFzcG9sJywgbmFtZTogJ0V1cm9wZS9UaXJhc3BvbCd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9Vemhnb3JvZCcsIG5hbWU6ICdFdXJvcGUvVXpoZ29yb2QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvVmFkdXonLCBuYW1lOiAnRXVyb3BlL1ZhZHV6J30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1ZhdGljYW4nLCBuYW1lOiAnRXVyb3BlL1ZhdGljYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvVmllbm5hJywgbmFtZTogJ0V1cm9wZS9WaWVubmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdFdXJvcGUvVmlsbml1cycsIG5hbWU6ICdFdXJvcGUvVmlsbml1cyd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9Wb2xnb2dyYWQnLCBuYW1lOiAnRXVyb3BlL1ZvbGdvZ3JhZCd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9XYXJzYXcnLCBuYW1lOiAnRXVyb3BlL1dhcnNhdyd9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9aYWdyZWInLCBuYW1lOiAnRXVyb3BlL1phZ3JlYid9LFxuICAgICAgICAgICAge2tleTogJ0V1cm9wZS9aYXBvcm96aHllJywgbmFtZTogJ0V1cm9wZS9aYXBvcm96aHllJ30sXG4gICAgICAgICAgICB7a2V5OiAnRXVyb3BlL1p1cmljaCcsIG5hbWU6ICdFdXJvcGUvWnVyaWNoJ30sXG4gICAgICAgICAgICB7a2V5OiAnR0InLCBuYW1lOiAnR0InfSxcbiAgICAgICAgICAgIHtrZXk6ICdHQi1FaXJlJywgbmFtZTogJ0dCLUVpcmUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdHTVQnLCBuYW1lOiAnR01UJ30sXG4gICAgICAgICAgICB7a2V5OiAnR01UKzAnLCBuYW1lOiAnR01UKzAnfSxcbiAgICAgICAgICAgIHtrZXk6ICdHTVQtMCcsIG5hbWU6ICdHTVQtMCd9LFxuICAgICAgICAgICAge2tleTogJ0dNVDAnLCBuYW1lOiAnR01UMCd9LFxuICAgICAgICAgICAge2tleTogJ0dyZWVud2ljaCcsIG5hbWU6ICdHcmVlbndpY2gnfSxcbiAgICAgICAgICAgIHtrZXk6ICdIU1QnLCBuYW1lOiAnSFNUJ30sXG4gICAgICAgICAgICB7a2V5OiAnSG9uZ2tvbmcnLCBuYW1lOiAnSG9uZ2tvbmcnfSxcbiAgICAgICAgICAgIHtrZXk6ICdJY2VsYW5kJywgbmFtZTogJ0ljZWxhbmQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdJbmRpYW4vQW50YW5hbmFyaXZvJywgbmFtZTogJ0luZGlhbi9BbnRhbmFuYXJpdm8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdJbmRpYW4vQ2hhZ29zJywgbmFtZTogJ0luZGlhbi9DaGFnb3MnfSxcbiAgICAgICAgICAgIHtrZXk6ICdJbmRpYW4vQ2hyaXN0bWFzJywgbmFtZTogJ0luZGlhbi9DaHJpc3RtYXMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdJbmRpYW4vQ29jb3MnLCBuYW1lOiAnSW5kaWFuL0NvY29zJ30sXG4gICAgICAgICAgICB7a2V5OiAnSW5kaWFuL0NvbW9ybycsIG5hbWU6ICdJbmRpYW4vQ29tb3JvJ30sXG4gICAgICAgICAgICB7a2V5OiAnSW5kaWFuL0tlcmd1ZWxlbicsIG5hbWU6ICdJbmRpYW4vS2VyZ3VlbGVuJ30sXG4gICAgICAgICAgICB7a2V5OiAnSW5kaWFuL01haGUnLCBuYW1lOiAnSW5kaWFuL01haGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdJbmRpYW4vTWFsZGl2ZXMnLCBuYW1lOiAnSW5kaWFuL01hbGRpdmVzJ30sXG4gICAgICAgICAgICB7a2V5OiAnSW5kaWFuL01hdXJpdGl1cycsIG5hbWU6ICdJbmRpYW4vTWF1cml0aXVzJ30sXG4gICAgICAgICAgICB7a2V5OiAnSW5kaWFuL01heW90dGUnLCBuYW1lOiAnSW5kaWFuL01heW90dGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdJbmRpYW4vUmV1bmlvbicsIG5hbWU6ICdJbmRpYW4vUmV1bmlvbid9LFxuICAgICAgICAgICAge2tleTogJ0lyYW4nLCBuYW1lOiAnSXJhbid9LFxuICAgICAgICAgICAge2tleTogJ0lzcmFlbCcsIG5hbWU6ICdJc3JhZWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdKYW1haWNhJywgbmFtZTogJ0phbWFpY2EnfSxcbiAgICAgICAgICAgIHtrZXk6ICdKYXBhbicsIG5hbWU6ICdKYXBhbid9LFxuICAgICAgICAgICAge2tleTogJ0t3YWphbGVpbicsIG5hbWU6ICdLd2FqYWxlaW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdMaWJ5YScsIG5hbWU6ICdMaWJ5YSd9LFxuICAgICAgICAgICAge2tleTogJ01FVCcsIG5hbWU6ICdNRVQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdNU1QnLCBuYW1lOiAnTVNUJ30sXG4gICAgICAgICAgICB7a2V5OiAnTVNUN01EVCcsIG5hbWU6ICdNU1Q3TURUJ30sXG4gICAgICAgICAgICB7a2V5OiAnTWV4aWNvL0JhamFOb3J0ZScsIG5hbWU6ICdNZXhpY28vQmFqYU5vcnRlJ30sXG4gICAgICAgICAgICB7a2V5OiAnTWV4aWNvL0JhamFTdXInLCBuYW1lOiAnTWV4aWNvL0JhamFTdXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdNZXhpY28vR2VuZXJhbCcsIG5hbWU6ICdNZXhpY28vR2VuZXJhbCd9LFxuICAgICAgICAgICAge2tleTogJ05aJywgbmFtZTogJ05aJ30sXG4gICAgICAgICAgICB7a2V5OiAnTlotQ0hBVCcsIG5hbWU6ICdOWi1DSEFUJ30sXG4gICAgICAgICAgICB7a2V5OiAnTmF2YWpvJywgbmFtZTogJ05hdmFqbyd9LFxuICAgICAgICAgICAge2tleTogJ1BSQycsIG5hbWU6ICdQUkMnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQU1Q4UERUJywgbmFtZTogJ1BTVDhQRFQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0FwaWEnLCBuYW1lOiAnUGFjaWZpYy9BcGlhJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9BdWNrbGFuZCcsIG5hbWU6ICdQYWNpZmljL0F1Y2tsYW5kJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9Cb3VnYWludmlsbGUnLCBuYW1lOiAnUGFjaWZpYy9Cb3VnYWludmlsbGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0NoYXRoYW0nLCBuYW1lOiAnUGFjaWZpYy9DaGF0aGFtJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9DaHV1aycsIG5hbWU6ICdQYWNpZmljL0NodXVrJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9FYXN0ZXInLCBuYW1lOiAnUGFjaWZpYy9FYXN0ZXInfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0VmYXRlJywgbmFtZTogJ1BhY2lmaWMvRWZhdGUnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0VuZGVyYnVyeScsIG5hbWU6ICdQYWNpZmljL0VuZGVyYnVyeSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvRmFrYW9mbycsIG5hbWU6ICdQYWNpZmljL0Zha2FvZm8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0ZpamknLCBuYW1lOiAnUGFjaWZpYy9GaWppJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9GdW5hZnV0aScsIG5hbWU6ICdQYWNpZmljL0Z1bmFmdXRpJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9HYWxhcGFnb3MnLCBuYW1lOiAnUGFjaWZpYy9HYWxhcGFnb3MnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0dhbWJpZXInLCBuYW1lOiAnUGFjaWZpYy9HYW1iaWVyJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9HdWFkYWxjYW5hbCcsIG5hbWU6ICdQYWNpZmljL0d1YWRhbGNhbmFsJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9HdWFtJywgbmFtZTogJ1BhY2lmaWMvR3VhbSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvSG9ub2x1bHUnLCBuYW1lOiAnUGFjaWZpYy9Ib25vbHVsdSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvSm9obnN0b24nLCBuYW1lOiAnUGFjaWZpYy9Kb2huc3Rvbid9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvS2lyaXRpbWF0aScsIG5hbWU6ICdQYWNpZmljL0tpcml0aW1hdGknfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL0tvc3JhZScsIG5hbWU6ICdQYWNpZmljL0tvc3JhZSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvS3dhamFsZWluJywgbmFtZTogJ1BhY2lmaWMvS3dhamFsZWluJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9NYWp1cm8nLCBuYW1lOiAnUGFjaWZpYy9NYWp1cm8nfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL01hcnF1ZXNhcycsIG5hbWU6ICdQYWNpZmljL01hcnF1ZXNhcyd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvTWlkd2F5JywgbmFtZTogJ1BhY2lmaWMvTWlkd2F5J30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9OYXVydScsIG5hbWU6ICdQYWNpZmljL05hdXJ1J30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9OaXVlJywgbmFtZTogJ1BhY2lmaWMvTml1ZSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvTm9yZm9saycsIG5hbWU6ICdQYWNpZmljL05vcmZvbGsnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL05vdW1lYScsIG5hbWU6ICdQYWNpZmljL05vdW1lYSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvUGFnb19QYWdvJywgbmFtZTogJ1BhY2lmaWMvUGFnb19QYWdvJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9QYWxhdScsIG5hbWU6ICdQYWNpZmljL1BhbGF1J30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9QaXRjYWlybicsIG5hbWU6ICdQYWNpZmljL1BpdGNhaXJuJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9Qb2hucGVpJywgbmFtZTogJ1BhY2lmaWMvUG9obnBlaSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvUG9uYXBlJywgbmFtZTogJ1BhY2lmaWMvUG9uYXBlJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9Qb3J0X01vcmVzYnknLCBuYW1lOiAnUGFjaWZpYy9Qb3J0X01vcmVzYnknfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL1Jhcm90b25nYScsIG5hbWU6ICdQYWNpZmljL1Jhcm90b25nYSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvU2FpcGFuJywgbmFtZTogJ1BhY2lmaWMvU2FpcGFuJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9TYW1vYScsIG5hbWU6ICdQYWNpZmljL1NhbW9hJ30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9UYWhpdGknLCBuYW1lOiAnUGFjaWZpYy9UYWhpdGknfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL1RhcmF3YScsIG5hbWU6ICdQYWNpZmljL1RhcmF3YSd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvVG9uZ2F0YXB1JywgbmFtZTogJ1BhY2lmaWMvVG9uZ2F0YXB1J30sXG4gICAgICAgICAgICB7a2V5OiAnUGFjaWZpYy9UcnVrJywgbmFtZTogJ1BhY2lmaWMvVHJ1ayd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvV2FrZScsIG5hbWU6ICdQYWNpZmljL1dha2UnfSxcbiAgICAgICAgICAgIHtrZXk6ICdQYWNpZmljL1dhbGxpcycsIG5hbWU6ICdQYWNpZmljL1dhbGxpcyd9LFxuICAgICAgICAgICAge2tleTogJ1BhY2lmaWMvWWFwJywgbmFtZTogJ1BhY2lmaWMvWWFwJ30sXG4gICAgICAgICAgICB7a2V5OiAnUG9sYW5kJywgbmFtZTogJ1BvbGFuZCd9LFxuICAgICAgICAgICAge2tleTogJ1BvcnR1Z2FsJywgbmFtZTogJ1BvcnR1Z2FsJ30sXG4gICAgICAgICAgICB7a2V5OiAnUk9DJywgbmFtZTogJ1JPQyd9LFxuICAgICAgICAgICAge2tleTogJ1JPSycsIG5hbWU6ICdST0snfSxcbiAgICAgICAgICAgIHtrZXk6ICdTaW5nYXBvcmUnLCBuYW1lOiAnU2luZ2Fwb3JlJ30sXG4gICAgICAgICAgICB7a2V5OiAnVHVya2V5JywgbmFtZTogJ1R1cmtleSd9LFxuICAgICAgICAgICAge2tleTogJ1VDVCcsIG5hbWU6ICdVQ1QnfSxcbiAgICAgICAgICAgIHtrZXk6ICdVUy9BbGFza2EnLCBuYW1lOiAnVVMvQWxhc2thJ30sXG4gICAgICAgICAgICB7a2V5OiAnVVMvQWxldXRpYW4nLCBuYW1lOiAnVVMvQWxldXRpYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdVUy9Bcml6b25hJywgbmFtZTogJ1VTL0FyaXpvbmEnfSxcbiAgICAgICAgICAgIHtrZXk6ICdVUy9DZW50cmFsJywgbmFtZTogJ1VTL0NlbnRyYWwnfSxcbiAgICAgICAgICAgIHtrZXk6ICdVUy9FYXN0LUluZGlhbmEnLCBuYW1lOiAnVVMvRWFzdC1JbmRpYW5hJ30sXG4gICAgICAgICAgICB7a2V5OiAnVVMvRWFzdGVybicsIG5hbWU6ICdVUy9FYXN0ZXJuJ30sXG4gICAgICAgICAgICB7a2V5OiAnVVMvSGF3YWlpJywgbmFtZTogJ1VTL0hhd2FpaSd9LFxuICAgICAgICAgICAge2tleTogJ1VTL0luZGlhbmEtU3RhcmtlJywgbmFtZTogJ1VTL0luZGlhbmEtU3RhcmtlJ30sXG4gICAgICAgICAgICB7a2V5OiAnVVMvTWljaGlnYW4nLCBuYW1lOiAnVVMvTWljaGlnYW4nfSxcbiAgICAgICAgICAgIHtrZXk6ICdVUy9Nb3VudGFpbicsIG5hbWU6ICdVUy9Nb3VudGFpbid9LFxuICAgICAgICAgICAge2tleTogJ1VTL1BhY2lmaWMnLCBuYW1lOiAnVVMvUGFjaWZpYyd9LFxuICAgICAgICAgICAge2tleTogJ1VTL1BhY2lmaWMtTmV3JywgbmFtZTogJ1VTL1BhY2lmaWMtTmV3J30sXG4gICAgICAgICAgICB7a2V5OiAnVVMvU2Ftb2EnLCBuYW1lOiAnVVMvU2Ftb2EnfSxcbiAgICAgICAgICAgIHtrZXk6ICdVVEMnLCBuYW1lOiAnVVRDJ30sXG4gICAgICAgICAgICB7a2V5OiAnVW5pdmVyc2FsJywgbmFtZTogJ1VuaXZlcnNhbCd9LFxuICAgICAgICAgICAge2tleTogJ1ctU1UnLCBuYW1lOiAnVy1TVSd9LFxuICAgICAgICAgICAge2tleTogJ1dFVCcsIG5hbWU6ICdXRVQnfSxcbiAgICAgICAgICAgIHtrZXk6ICdadWx1JywgbmFtZTogJ1p1bHUnfVxuICAgICAgICBdO1xuXG4vL1xuICAgICAgICAkc2NvcGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfUkVTT1JUX1NFVFRJTkdTXCIpO1xuICAgICAgICAgICAgICAgIFJlc29ydFNlcnZpY2UuZmV0Y2hTZXR0aW5ncyhpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy51bml0X2Zvcm1hdCA9IGRhdGEudW5pdF9mb3JtYXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3MuZGVmYXVsdF91bml0X3BhcGVyID0gZGF0YS5kZWZhdWx0X3VuaXRfcGFwZXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3MuZGF0ZXRpbWVfZm9ybWF0ID0gZGF0YS5kYXRldGltZV9mb3JtYXQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb2RlbC5maWx0ZXJzID0gXy5tYXAoJHNjb3BlLnNldHRpbmdzLmRpc3BhdGNoX2ZpZWxkX2Nob2ljZSwgZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZmllbGRcIjogXy5maW5kKCRzY29wZS5zY2hlbWEucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcC5mdWxsa2V5ID09IGNob2ljZS5maWVsZF9rZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIlNBVkVfUkVTT1JUX1NFVFRJTkdTXCIpO1xuXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgZGlzcGF0Y2hfZmllbGRfY2hvaWNlXG4gICAgICAgICAgICAgICAgIHtmaWVsZF9rZXk6IFwibmFtZVwiLCBmaWVsZF9wb3NpdGlvbjogMX1cbiAgICAgICAgICAgICAgICAge2ZpZWxkX2tleTogXCJwaG9uZVwiLCBmaWVsZF9wb3NpdGlvbjogMn1cbiAgICAgICAgICAgICAgICAge2ZpZWxkX2tleTogXCJib2R5X3BhcnRcIiwgZmllbGRfcG9zaXRpb246IDN9XG4gICAgICAgICAgICAgICAgIHtmaWVsZF9rZXk6IFwiZmllbGRfNTJkNDgwNzdhMTZiZVwiLCBmaWVsZF9wb3NpdGlvbjogNH1cbiAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5kaXNwYXRjaF9maWVsZF9jaG9pY2UgPSBbXTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5kaXNwYXRjaF9maWVsZF9jaG9pY2UgPSBfLm1hcCgkc2NvcGUubW9kZWwuZmlsdGVycywgZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmaWVsZF9rZXlcIjogZmlsdGVyLmZpZWxkLmZ1bGxrZXlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIFJlc29ydFNlcnZpY2UudXBkYXRlU2V0dGluZ3MoaWQsICRzY29wZS5zZXR0aW5ncykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJyZXNvcnRfdXBkYXRlZF9zdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKGVycm9yLmRldGFpbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmhhc093blByb3BlcnR5KCdkZXRhaWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yLmRldGFpbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGVycm9yLCBmdW5jdGlvbiAoZXJyb3JzLCBmaWVsZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkID09ICdub25fZmllbGRfZXJyb3JzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0ZpZWxkIGxldmVsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJHNldFZhbGlkaXR5KCdiYWNrZW5kJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yc1tmaWVsZF0gPSBlcnJvcnMuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2VuZXJhdGVfb2F1dGhfa2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgUmVzb3J0U2VydmljZS5nZW5lcmF0ZU9BdXRoKGlkLCB7fSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3MuY2xpZW50X2lkID0gZGF0YS5jbGllbnRfaWQ7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5jbGllbnRfc2VjcmV0ID0gZGF0YS5jbGllbnRfc2VjcmV0O1xuXG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJyZXNvcnRfdXBkYXRlZF9zdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuaGFzT3duUHJvcGVydHkoJ2RldGFpbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvci5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGVycm9yLCBmdW5jdGlvbiAoZXJyb3JzLCBmaWVsZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQgPT0gJ25vbl9maWVsZF9lcnJvcnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0ZpZWxkIGxldmVsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JtW2ZpZWxkXS4kc2V0VmFsaWRpdHkoJ2JhY2tlbmQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yc1tmaWVsZF0gPSBlcnJvcnMuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVnZW5lcmF0ZV9vYXV0aF9rZXkgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvcmVzb3J0cy90ZW1wbGF0ZXMvY29uZmlybV9yZWdlbmVyYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtUmVnZW5lcmF0ZU1vZGFsQ3RybCcsXG4gICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGlzX2FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICBSZXNvcnRTZXJ2aWNlLnJlZ2VuZXJhdGVPQXV0aChpZCwge30pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5jbGllbnRfaWQgPSBkYXRhLmNsaWVudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncy5jbGllbnRfc2VjcmV0ID0gZGF0YS5jbGllbnRfc2VjcmV0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5zdWNjZXNzKFwicmVzb3J0X3VwZGF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0dsb2JhbCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvci5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChlcnJvciwgZnVuY3Rpb24gKGVycm9ycywgZmllbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PSAnbm9uX2ZpZWxkX2Vycm9ycycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvcnMuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9GaWVsZCBsZXZlbCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRzZXRWYWxpZGl0eSgnYmFja2VuZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvcnNbZmllbGRdID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZG93bmxvYWQgPSBmdW5jdGlvbiAodXJsLCBmaWxlbmFtZSkge1xuICAgICAgICAgICAgdmFyIGFuY2hvciA9IGFuZ3VsYXIuZWxlbWVudCgnPGEvPicpO1xuICAgICAgICAgICAgYW5jaG9yLmF0dHIoe1xuICAgICAgICAgICAgICAgIGhyZWY6IHVybCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkOiBmaWxlbmFtZVxuICAgICAgICAgICAgfSlbMF0uY2xpY2soKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVtb3ZlRmlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgJHNjb3BlLnNldHRpbmdzW3ZhbHVlXSA9ICcnO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zY2hlbWEgPSB7XG4gICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgcHJvcGVydGllczogW11cbiAgICAgICAgfTtcblxuXG4vLyAgICAgICAgU2NoZW1hXHRGb3JtIHR5cGVcbi8vICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlx0dGV4dFxuLy8gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXHRudW1iZXJcbi8vICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCJcdG51bWJlclxuLy8gICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIlx0Y2hlY2tib3hcbi8vICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIlx0ZmllbGRzZXRcbi8vICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIiBhbmQgYSBcImVudW1cIlx0c2VsZWN0XG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIiBhbmQgYSBcImVudW1cIiBpbiBhcnJheSB0eXBlXHRjaGVja2JveGVzXG4vLyAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIlx0YXJyYXlcblxuICAgICAgICB2YXIgc2NoZW1hX3R5cGUgPSB7XG4gICAgICAgICAgICAndGV4dCc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnbnVtYmVyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAncmFuZ2UnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdhcnJvd3MnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdzZWxlY3QnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdtdWx0aV9zZWxlY3QnOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdyYWRpbyc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2dlbmRlcic6ICdzdHJpbmcnLFxuICAgICAgICAgICAgJ2ltYWdlJzogJ29iamVjdCcsXG4gICAgICAgICAgICAnZGF0ZV9waWNrZXInOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICdkYXRlX3RpbWVfcGlja2VyJzogJ3N0cmluZycsXG4gICAgICAgICAgICAnZ29vZ2xlX21hcCc6ICdvYmplY3QnLFxuICAgICAgICAgICAgJ2ZpbGUnOiAnc3RyaW5nJ1xuICAgICAgICB9O1xuXG4vLyAgICAgICAgRm9ybSBUeXBlXHRCZWNvbWVzXG4vLyAgICAgICAgZmllbGRzZXRcdGEgZmllbGRzZXQgd2l0aCBsZWdlbmRcbi8vICAgICAgICBzZWN0aW9uXHRqdXN0IGEgZGl2XG4vLyAgICAgICAgY29uZGl0aW9uYWxcdGEgc2VjdGlvbiB3aXRoIGEgbmctaWZcbi8vICAgICAgICBhY3Rpb25zXHRob3Jpem9udGFsIGJ1dHRvbiBsaXN0LCBjYW4gb25seSBzdWJtaXQgYW5kIGJ1dHRvbnMgYXMgaXRlbXNcbi8vICAgICAgICB0ZXh0XHRpbnB1dCB3aXRoIHR5cGUgdGV4dFxuLy8gICAgICAgIHRleHRhcmVhXHRhIHRleHRhcmVhXG4vLyAgICAgICAgbnVtYmVyXHRpbnB1dCB0eXBlIG51bWJlclxuLy8gICAgICAgIHBhc3N3b3JkXHRpbnB1dCB0eXBlIHBhc3N3b3JkXG4vLyAgICAgICAgY2hlY2tib3hcdGEgY2hlY2tib3hcbi8vICAgICAgICBjaGVja2JveGVzXHRsaXN0IG9mIGNoZWNrYm94ZXNcbi8vICAgICAgICBzZWxlY3RcdGEgc2VsZWN0IChzaW5nbGUgdmFsdWUpXG4vLyAgICAgICAgc3VibWl0XHRhIHN1Ym1pdCBidXR0b25cbi8vICAgICAgICBidXR0b25cdGEgYnV0dG9uXG4vLyAgICAgICAgcmFkaW9zXHRyYWRpbyBidXR0b25zXG4vLyAgICAgICAgcmFkaW9zLWlubGluZVx0cmFkaW8gYnV0dG9ucyBpbiBvbmUgbGluZVxuLy8gICAgICAgIHJhZGlvYnV0dG9uc1x0cmFkaW8gYnV0dG9ucyB3aXRoIGJvb3RzdHJhcCBidXR0b25zXG4vLyAgICAgICAgaGVscFx0aW5zZXJ0IGFyYml0cmFyeSBodG1sXG4vLyAgICAgICAgdGFiXHR0YWJzIHdpdGggY29udGVudFxuLy8gICAgICAgIGFycmF5XHRhIGxpc3QgeW91IGNhbiBhZGQsIHJlbW92ZSBhbmQgcmVvcmRlclxuLy8gICAgICAgIHRhYmFycmF5XHRhIHRhYmJlZCB2ZXJzaW9uIG9mIGFycmF5XG5cbiAgICAgICAgdmFyIGZvcm1fdHlwZSA9IHtcbiAgICAgICAgICAgICd0ZXh0JzogJ3RleHQnLFxuICAgICAgICAgICAgJ3JhbmdlJzogJ3RleHQnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJzogJ3RleHQnLFxuICAgICAgICAgICAgJ251bWJlcic6ICdudW1iZXInLFxuICAgICAgICAgICAgJ2Fycm93cyc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ3NlbGVjdCc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ211bHRpX3NlbGVjdCc6ICdzZWxlY3QnLFxuICAgICAgICAgICAgJ3JhZGlvJzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAnZ2VuZGVyJzogJ3NlbGVjdCcsXG4gICAgICAgICAgICAnaW1hZ2UnOiAnZmlsZV91cGxvYWQnLFxuICAgICAgICAgICAgJ21lc3NhZ2UnOiAnaGVscCcsXG4gICAgICAgICAgICAnZGF0ZV9waWNrZXInOiAnZGF0ZV9waWNrZXInLFxuICAgICAgICAgICAgJ2RhdGVfdGltZV9waWNrZXInOiAnZGF0ZV90aW1lX3BpY2tlcicsXG4gICAgICAgICAgICAnZ29vZ2xlX21hcCc6ICdnb29nbGVtYXAnLFxuICAgICAgICAgICAgJ2ZpbGUnOiAndGV4dCdcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hvc2VuVHlwZXMgPSBbXG4gICAgICAgICAgICAndGV4dCcsXG4gICAgICAgICAgICAncmFuZ2UnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJyxcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICAgICAgJ2RlY2ltYWwnLFxuICAgICAgICAgICAgJ2Fycm93cycsXG4gICAgICAgICAgICAnc2VsZWN0JyxcbiAgICAgICAgICAgIC8vJ211bHRpX3NlbGVjdCcsXG4gICAgICAgICAgICAncmFkaW8nLFxuICAgICAgICAgICAgJ2dlbmRlcidcbiAgICAgICAgICAgIC8vJ2RhdGVfcGlja2VyJyxcbiAgICAgICAgICAgIC8vJ2RhdGVfdGltZV9waWNrZXInXG4gICAgICAgIF07XG5cbiAgICAgICAgdmFyIHRhYnMgPSBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXM7XG5cbiAgICAgICAgdmFyIGdldENob2ljZU1hcCA9IGZ1bmN0aW9uIChtYXBWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBfY2hvaWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgIF90aXRsZW1hcCA9IFtdO1xuXG4gICAgICAgICAgICAvLyBMb29wIGFuZCBidWlsZCBjaG9pY2VzIGFuZCB0aXRsZW1hcFxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcFZhbHVlcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGtleS5pbmRleE9mKFwiY29udHJvbGxlZFwiKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jaG9pY2VzLnB1c2goe1wiaWRcIjoga2V5LCBcIm5hbWVcIjogJHRyYW5zbGF0ZS5pbnN0YW50KHZhbHVlW2tleV0pfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGl0bGVtYXAucHVzaCh7XCJ2YWx1ZVwiOiBrZXksIFwibmFtZVwiOiAkdHJhbnNsYXRlLmluc3RhbnQodmFsdWVba2V5XSl9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwiY2hvaWNlc1wiOiBfY2hvaWNlcyxcbiAgICAgICAgICAgICAgICBcInRpdGxlbWFwXCI6IF90aXRsZW1hcFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5xdWVzdGlvbl9pdGVtcyA9IFtdO1xuXG4gICAgICAgICRzY29wZS5mb3JtX2l0ZW1zID0gW107XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRhYnMpIHtcbiAgICAgICAgICAgIGlmICh0YWJzLmhhc093blByb3BlcnR5KGtleSkpIHtcblxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcXVlc3Rpb24gaW4gdGFic1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV0uaGFzT3duUHJvcGVydHkocXVlc3Rpb24pICYmIChxdWVzdGlvbiA9PSAnUXVlc3Rpb25zJyB8fCBxdWVzdGlvbiA9PSAnUmVwZWF0aW5nUXVlc3Rpb25zJykpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbSBpbiB0YWJzW2tleV1bcXVlc3Rpb25dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYnNba2V5XVtxdWVzdGlvbl0uaGFzT3duUHJvcGVydHkobSkpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxID0gdGFic1trZXldW3F1ZXN0aW9uXVttXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGVtYXAgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdzZWxlY3QnIHx8IHEuVHlwZSA9PSAnYXJyb3dzJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkxIGluIHEuVmFsdWVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5WYWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5MSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hvaWNlTWFwID0gZ2V0Q2hvaWNlTWFwKHEuVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9pY2VzID0gY2hvaWNlTWFwLmNob2ljZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwID0gY2hvaWNlTWFwLnRpdGxlbWFwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09ICdnZW5kZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJNYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJNYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJGZW1hbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZlbWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLlR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiWWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJZZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlbWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJOb1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpZWxkJzogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCc6ICR0cmFuc2xhdGUuaW5zdGFudChxLkxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogcS5UeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlcXVpcmVkJzogcS5SZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxLlBsYWNlaG9sZGVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaG9pY2VzJzogY2hvaWNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHEuT3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hvc2VuVHlwZXMuaW5kZXhPZihxLlR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdWxsa2V5ID0gbTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uID09ICdSZXBlYXRpbmdRdWVzdGlvbnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbGtleSA9IGtleSArICdfX19fJyArIG07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlbWEucHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHEuTGFiZWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogc2NoZW1hX3R5cGVbcS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JkZXInOiBxLk9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogZnVsbGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAna2V5JzogbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9ybXR5cGUnOiBmb3JtX3R5cGVbcS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhY2Vob2xkZXInOiAkdHJhbnNsYXRlLmluc3RhbnQocS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JtX2l0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmaWVsZHNldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENsYXNzOiAnY29sLWxnLTQgY29sLXhzLTEyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IG0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sQ2xhc3M6ICdwYWQtbGVmdC1yaWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmb3JtX3R5cGVbcS5UeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAkdHJhbnNsYXRlLmluc3RhbnQocS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogcS5PcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlTWFwOiB0aXRsZW1hcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWVzdGlvbl9pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocS5UeXBlID09IFwicmVwZWF0ZXJcIiAmJiBxLmhhc093blByb3BlcnR5KCdSZXBlYXRpbmdRdWVzdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHF1ZXN0aW9uMSBpbiB0YWJzW2tleV1bcXVlc3Rpb25dW21dKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJzW2tleV1bcXVlc3Rpb25dW21dLmhhc093blByb3BlcnR5KHF1ZXN0aW9uMSkgJiYgKHF1ZXN0aW9uMSA9PSAnUXVlc3Rpb25zJyB8fCBxdWVzdGlvbjEgPT0gJ1JlcGVhdGluZ1F1ZXN0aW9ucycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuIGluIHRhYnNba2V5XVtxdWVzdGlvbl1bbV1bcXVlc3Rpb24xXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFic1trZXldW3F1ZXN0aW9uXVttXVtxdWVzdGlvbjFdLmhhc093blByb3BlcnR5KG4pKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcTEgPSB0YWJzW2tleV1bcXVlc3Rpb25dW21dW3F1ZXN0aW9uMV1bbl07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNob2ljZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlbWFwID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHExLlR5cGUgPT0gJ3NlbGVjdCcgfHwgcTEuVHlwZSA9PSAnYXJyb3dzJykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkxMSBpbiBxMS5WYWx1ZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxMS5WYWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5MTEpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNob2ljZU1hcCA9IGdldENob2ljZU1hcChxMS5WYWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNob2ljZXMgPSBjaG9pY2VNYXAuY2hvaWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAgPSBjaG9pY2VNYXAudGl0bGVtYXA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocTEuVHlwZSA9PSAnZ2VuZGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTWFsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiRmVtYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGZW1hbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocTEuVHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZW1hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogXCJZZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlllc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFwiTm9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0xID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpZWxkJzogbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsYWJlbCc6ICR0cmFuc2xhdGUuaW5zdGFudChxMS5MYWJlbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHExLlR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVxdWlyZWQnOiBxMS5SZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxMS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hvaWNlcyc6IGNob2ljZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3JkZXInOiBxMS5PcmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaG9zZW5UeXBlcy5pbmRleE9mKHExLlR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlbWEucHJvcGVydGllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAkdHJhbnNsYXRlLmluc3RhbnQodGFic1trZXldLkxhYmVsKSArICcgLSAnICsgJHRyYW5zbGF0ZS5pbnN0YW50KHExLkxhYmVsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6IHNjaGVtYV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvcmRlcic6IHExLk9yZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmdWxsa2V5JzogbSArICdfX19fJyArIG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2tleSc6IG4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcm10eXBlJzogZm9ybV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFjZWhvbGRlcic6ICR0cmFuc2xhdGUuaW5zdGFudChxMS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlTWFwJzogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybV9pdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmllbGRzZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxDbGFzczogJ2NvbC1sZy00IGNvbC14cy0xMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbENsYXNzOiAncGFkLWxlZnQtcmlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZm9ybV90eXBlW3ExLlR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICR0cmFuc2xhdGUuaW5zdGFudChxMS5QbGFjZWhvbGRlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogcTEuT3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZU1hcDogdGl0bGVtYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlc3Rpb25faXRlbXMucHVzaChpdGVtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuZm9ybSA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2VjdGlvbicsXG4gICAgICAgICAgICAgICAgaHRtbENsYXNzOiAnY29sLXhzLTEyJyxcbiAgICAgICAgICAgICAgICBpdGVtczogJHNjb3BlLmZvcm1faXRlbXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICAkc2NvcGUubW9kZWwgPSB7XG4gICAgICAgICAgICBmaWx0ZXJzOiBbXG4gICAgICAgICAgICAgICAge31cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuYWRkRmllbGQgPSBmdW5jdGlvbiAoZmlsdGVycykge1xuICAgICAgICAgICAgZmlsdGVycy5wdXNoKHt9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVtb3ZlRmllbGQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICRzY29wZS5tb2RlbC5maWx0ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG5cbiAgICB9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ1Jlc29ydFNlcnZpY2UnLCBbJyRodHRwJywgJyRxJywgJyR3aW5kb3cnLCAnJGludGVyY29tJywgJyRsb2cnLCAnTFMnLCAnQ09ORklHJywgJ0FwaVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkd2luZG93LCAkaW50ZXJjb20sICRsb2csIExTLCBDT05GSUcsIEFwaVNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgc2VydmljZSA9IHtcbi8vICAgICAgICAgICAgc2F2ZVVzZXI6IGZ1bmN0aW9uIChpZCwgbmFtZSwgZW1haWwsIHJvbGUsIHBob25lLCBhc3NldF9tZ210LCBjb250cm9sbGVkX3N1YnMpIHtcbi8vICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbi8vXG4vLyAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuLy8gICAgICAgICAgICAgICAgICAgICduYW1lJzogbmFtZSxcbi8vICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbCxcbi8vICAgICAgICAgICAgICAgICAgICAncm9sZV9pZCc6IHJvbGUsXG4vLyAgICAgICAgICAgICAgICAgICAgJ3Bob25lJzogcGhvbmUsXG4vLyAgICAgICAgICAgICAgICAgICAgJ3VzZXJfYXNzZXRfbWFuYWdlbWVudCc6YXNzZXRfbWdtdCxcbi8vICAgICAgICAgICAgICAgICAgICAndXNlcl9jb250cm9sbGVkX3N1YnN0YW5jZXMnOmNvbnRyb2xsZWRfc3Vic1xuLy8gICAgICAgICAgICAgICAgfTtcbi8vXG4vLyAgICAgICAgICAgICAgICAkaHR0cC5wdXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvdXNlcnMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4vLyAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuLy8gICAgICAgICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4vLyAgICAgICAgICAgICAgICAgICAgfSk7XG4vL1xuLy8gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbi8vICAgICAgICAgICAgfSxcbi8vXG4vLyAgICAgICAgICAgIGFkZFVzZXI6IGZ1bmN0aW9uIChuYW1lLCBlbWFpbCwgcGhvbmUsIHJvbGUpIHtcbi8vICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbi8vICAgICAgICAgICAgICAgIHZhciByZXNvcnRfaWQgPSBKU09OLnBhcnNlKExTLmdldCgndXNlcicpKS5yZXNvcnRzWzBdLnJlc29ydF9pZDtcbi8vICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4vLyAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiBuYW1lLFxuLy8gICAgICAgICAgICAgICAgICAgICdlbWFpbCc6IGVtYWlsLFxuLy8gICAgICAgICAgICAgICAgICAgICdwaG9uZSc6IHBob25lLFxuLy8gICAgICAgICAgICAgICAgICAgICdyb2xlX2lkJzogcGFyc2VJbnQocm9sZSksXG4vLyAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzogXCJUM21QNCQkMDE0M1wiLFxuLy8gICAgICAgICAgICAgICAgICAgICdyZXNvcnRfaWQnOiByZXNvcnRfaWRcbi8vICAgICAgICAgICAgICAgIH07XG4vL1xuLy8gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy91c2Vycy8nLCBwYXJhbXMpXG4vLyAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuLy8gICAgICAgICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4vLyAgICAgICAgICAgICAgICAgICAgfSk7XG4vL1xuLy8gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbi8vICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZldGNoQWxsOiBmdW5jdGlvbiAoY2h1bmssIHBhZ2UsIHRleHQsIHByZWRpY2F0ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlIHx8ICduYW1lJztcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvdXNlcnMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaDp0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5OnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbj8nZGVzYyc6J2FzYydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9yZXNvcnRzLycgKyBpZCArICcvJylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlVXNlcjogZnVuY3Rpb24gKGlkLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIGVtYWlsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0X25hbWUnOiBmaXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbGFzdF9uYW1lJzogbGFzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvdXNlcnMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2hTZXR0aW5nczogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL3Jlc29ydHMvJyArIGlkICsgJy9zZXR0aW5ncy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB1cGRhdGVTZXR0aW5nczogZnVuY3Rpb24gKGlkLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL3Jlc29ydHMvJyArIGlkICsgJy9zZXR0aW5ncy8nLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdlbmVyYXRlT0F1dGg6IGZ1bmN0aW9uIChpZCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvcmVzb3J0X29hdXRoLz9vcGVyYXRpb249Z2VuZXJhdGUnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICByZWdlbmVyYXRlT0F1dGg6IGZ1bmN0aW9uIChpZCwgZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvcmVzb3J0X29hdXRoLz9vcGVyYXRpb249cmVnZW5lcmF0ZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgfV0pO1xuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignU3RvY2tBZGRDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgU3RvY2tTZXJ2aWNlLCBjdXJyZW50VXNlciwgY29udHJvbGxlZFN1YnN0YW5jZXMsIGxvY2F0aW9ucywgZ3Jvd2wpIHtcblxuICAgICAgICAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2VzID0gY29udHJvbGxlZFN1YnN0YW5jZXMucmVzdWx0cztcblxuICAgICAgICAkc2NvcGUubG9jYXRpb25zID0gbG9jYXRpb25zLnJlc3VsdHM7XG5cbiAgICAgICAgJHNjb3BlLmFkZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdyb3dsLmluZm8oXCJBRERfQVNTRVRcIik7XG5cbiAgICAgICAgICAgIFN0b2NrU2VydmljZS5hZGQoJHNjb3BlLnF1YW50aXR5LCAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2UuY29udHJvbGxlZF9zdWJzdGFuY2VfaWQsICRzY29wZS52b2x1bWUsXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9uX2lkLCAkc2NvcGUuZHRfZXhwaXJ5KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJzdG9ja19hZGRlZF9zdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhcInN0b2NrX3JlcG9ydFwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKGVycm9yLmRldGFpbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9HbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKGVycm9yLmhhc093blByb3BlcnR5KCdkZXRhaWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAkc2NvcGUuZXJyb3IgPSBlcnJvci5kZXRhaWw7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICRzY29wZS5mb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vYW5ndWxhci5mb3JFYWNoKGVycm9yLCBmdW5jdGlvbiAoZXJyb3JzLCBmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBpZiAoZmllbGQgPT0gJ25vbl9maWVsZF9lcnJvcnMnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAvLyBHbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZXJyb3IgPSBlcnJvcnMuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICRzY29wZS5mb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgLy9GaWVsZCBsZXZlbCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICRzY29wZS5mb3JtW2ZpZWxkXS4kc2V0VmFsaWRpdHkoJ2JhY2tlbmQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICRzY29wZS5lcnJvcnNbZmllbGRdID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy99KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1N0b2NrQ2hlY2tpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCAkbW9kYWxJbnN0YW5jZSwgU3RvY2tTZXJ2aWNlLCBkYXRhLCBncm93bCwgY29udHJvbGxlZFN1YnN0YW5jZXMsIGxvY2F0aW9ucykge1xuXG4gICAgICAgICRzY29wZS5kYXRhID0gZGF0YTtcblxuICAgICAgICAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2VzID0gY29udHJvbGxlZFN1YnN0YW5jZXMucmVzdWx0cztcbiAgICAgICAgJHNjb3BlLmxvY2F0aW9ucyA9IGxvY2F0aW9ucy5yZXN1bHRzO1xuICAgICAgICAvL18uZmlsdGVyKGxvY2F0aW9ucy5yZXN1bHRzLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgLy8gICAgcmV0dXJuIGxvY2F0aW9uLmxvY2F0aW9uX2lkICE9IGRhdGEubG9jYXRpb24ubG9jYXRpb25faWQ7XG4gICAgICAgIC8vfSk7XG5cbiAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKGxvY2F0aW9uX2lkKSB7XG4gICAgICAgICAgICBTdG9ja1NlcnZpY2UuY2hlY2tpbihkYXRhLmFzc2lnbm1lbnQuY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tfYXNzaWdubWVudF9pZCwgbG9jYXRpb25faWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignU3RvY2tDaGVja291dEN0cmwnLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRyb290U2NvcGUnLCAnJHRpbWVvdXQnLCAnJGxvZycsICckc3RhdGVQYXJhbXMnLCAnJGludGVyY29tJywgJ1N0b2NrU2VydmljZScsICdVc2VyU2VydmljZScsICdjdXJyZW50VXNlcicsICdjb250cm9sbGVkU3Vic3RhbmNlcycsICdsb2NhdGlvbnMnLCAncXVlc3Rpb25zJywgJ2dyb3dsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkc3RhdGVQYXJhbXMsICRpbnRlcmNvbSwgU3RvY2tTZXJ2aWNlLCBVc2VyU2VydmljZSwgY3VycmVudFVzZXIsIGNvbnRyb2xsZWRTdWJzdGFuY2VzLCBsb2NhdGlvbnMsIHF1ZXN0aW9ucywgZ3Jvd2wpIHtcblxuICAgICAgICBpbml0aWFsaXplKCk7XG5cbiAgICAgICAgJHNjb3BlLmNoZWNrb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkNIRUNLT1VUX0FTU0VUXCIpO1xuXG4gICAgICAgICAgICBTdG9ja1NlcnZpY2UuY2hlY2tvdXQoJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrLmNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX2lkLCAkc2NvcGUudXNlcl9pZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5zdWNjZXNzKFwic3RvY2tfY2hlY2tvdXRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzdGF0ZS5nbyhcInN0b2NrX3JlcG9ydFwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgJHNjb3BlLmVycm9yID0gZXJyb3IuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAvL2FuZ3VsYXIuZm9yRWFjaChlcnJvciwgZnVuY3Rpb24gKGVycm9ycywgZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgaWYgKGZpZWxkID09ICdub25fZmllbGRfZXJyb3JzJykge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgLy8gR2xvYmFsIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIC8vRmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJHNldFZhbGlkaXR5KCdiYWNrZW5kJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAkc2NvcGUuZXJyb3JzW2ZpZWxkXSA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgICAgICRzY29wZS5jb250cm9sbGVkX3N1YnN0YW5jZXMgPSBjb250cm9sbGVkU3Vic3RhbmNlcy5yZXN1bHRzO1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlID0ge307XG4gICAgICAgICAgICAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2UuY29udHJvbGxlZF9zdWJzdGFuY2VfaWQgPSAnJztcblxuICAgICAgICAgICAgJHNjb3BlLmxvY2F0aW9ucyA9IGxvY2F0aW9ucy5yZXN1bHRzO1xuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdsb2NhdGlvbl9pZCcsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgJiYgbmV3VmFsdWUgIT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImxvY2F0aW9uIHdhdGNoZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN0b2NrKCRzY29wZS5sb2NhdGlvbl9pZCwgJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlLmNvbnRyb2xsZWRfc3Vic3RhbmNlX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnY29udHJvbGxlZF9zdWJzdGFuY2UnLCBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICYmIG5ld1ZhbHVlICE9IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJzdWJzdGFuY2Ugd2F0Y2hlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RvY2soJHNjb3BlLmxvY2F0aW9uX2lkLCAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2UuY29udHJvbGxlZF9zdWJzdGFuY2VfaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmhhc093blByb3BlcnR5KCdjb250cm9sbGVkU3Vic3RhbmNlSWQnKSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jb250cm9sbGVkX3N1YnN0YW5jZSA9IF8uZmluZChjb250cm9sbGVkU3Vic3RhbmNlcy5yZXN1bHRzLCBmdW5jdGlvbiAoY29udHJvbGxlZFN1YnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udHJvbGxlZFN1YnN0YW5jZS5jb250cm9sbGVkX3N1YnN0YW5jZV9pZCA9PSAkc3RhdGVQYXJhbXMuY29udHJvbGxlZFN1YnN0YW5jZUlkO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaGFzT3duUHJvcGVydHkoJ2xvY2F0aW9uSWQnKSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2NhdGlvbl9pZCA9ICRzdGF0ZVBhcmFtcy5sb2NhdGlvbklkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RvY2soJHNjb3BlLmxvY2F0aW9uX2lkLCAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2UuY29udHJvbGxlZF9zdWJzdGFuY2VfaWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmZXRjaFVzZXJzKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZldGNoVXNlcnMoKSB7XG4gICAgICAgICAgICB2YXIgdGFicyA9IHF1ZXN0aW9ucy5EYXNoYm9hcmRJdGVtcztcblxuICAgICAgICAgICAgaWYgKHRhYnMgJiYgdGFicy5oYXNPd25Qcm9wZXJ0eSgnZmllbGRfNTJkNDdhYWM5YmQxMycpICYmIHRhYnMuZmllbGRfNTJkNDdhYWM5YmQxMyAmJiB0YWJzLmZpZWxkXzUyZDQ3YWFjOWJkMTMuaGFzT3duUHJvcGVydHkoJ1JlcGVhdGluZ1F1ZXN0aW9ucycpICYmIHRhYnMuZmllbGRfNTJkNDdhYWM5YmQxMy5SZXBlYXRpbmdRdWVzdGlvbnMgJiYgdGFicy5maWVsZF81MmQ0N2FhYzliZDEzLlJlcGVhdGluZ1F1ZXN0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncGF0cm9sbGVyJykgJiYgdGFicy5maWVsZF81MmQ0N2FhYzliZDEzLlJlcGVhdGluZ1F1ZXN0aW9ucy5wYXRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMgPSBxdWVzdGlvbnMuRGFzaGJvYXJkSXRlbXMuZmllbGRfNTJkNDdhYWM5YmQxMy5SZXBlYXRpbmdRdWVzdGlvbnMucGF0cm9sbGVyLlZhbHVlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJzID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuLy8gICAgICAgICAgICBVc2VyU2VydmljZS5mZXRjaEFsbCgxMDAwLCAxKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMgPSBkYXRhLnJlc3VsdHMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGl0ZW0udXNlcl9pZCxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZVxuLy8gICAgICAgICAgICAgICAgICAgICAgICB9O1xuLy9cbi8vICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbi8vICAgICAgICAgICAgICAgICRzY29wZS51c2VycyA9IG51bGw7XG4vLyAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVTdG9jayhsb2NhdGlvbklkLCBjb250cm9sbGVkU3Vic3RhbmNlSWQpIHtcbiAgICAgICAgICAgIFN0b2NrU2VydmljZS5mZXRjaEFsbCgxMDAwLCAxLCAnJywgJ2NvbnRyb2xsZWRfc3Vic3RhbmNlX19jb250cm9sbGVkX3N1YnN0YW5jZV9uYW1lJywgZmFsc2UsICdpbicsIGxvY2F0aW9uSWQsIGNvbnRyb2xsZWRTdWJzdGFuY2VJZCwgbnVsbCwgbnVsbClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tzID0gZGF0YS5yZXN1bHRzLm1hcChmdW5jdGlvbiAoc3RvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b2NrLmNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX3RleHQgPSBzdG9jay5jb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19wayArIFwiIChcIiArIHN0b2NrLnZvbHVtZSArIFwiIFwiICsgc3RvY2suY29udHJvbGxlZF9zdWJzdGFuY2UudW5pdHMgKyBcIilcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9jaztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrcyA9IGNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrcztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmhhc093blByb3BlcnR5KCdjb250cm9sbGVkU3Vic3RhbmNlU3RvY2tJZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2sgPSBfLmZpbmQoY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tzLCBmdW5jdGlvbiAoY29udHJvbGxlZFN1YnN0YW5jZVN0b2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZWRTdWJzdGFuY2VTdG9jay5jb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19pZCA9PSAkc3RhdGVQYXJhbXMuY29udHJvbGxlZFN1YnN0YW5jZVN0b2NrSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuZXJyb3IoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfV0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignU3RvY2tEaXNwb3NlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJHEsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCAkbW9kYWxJbnN0YW5jZSwgU3RvY2tTZXJ2aWNlLCBkYXRhLCBncm93bCwgY29udHJvbGxlZFN1YnN0YW5jZXMsIGxvY2F0aW9ucykge1xuXG4gICAgICAgICRzY29wZS5kYXRhID0gZGF0YTtcblxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcS5hbGwoXy5tYXAoZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIFN0b2NrU2VydmljZS5kaXNwb3NlKGl0ZW0uY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignU3RvY2tSZWxvY2F0ZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCAkbW9kYWxJbnN0YW5jZSwgU3RvY2tTZXJ2aWNlLCBkYXRhLCBjb250cm9sbGVkU3Vic3RhbmNlcywgbG9jYXRpb25zLCBncm93bCkge1xuXG4gICAgICAgICRzY29wZS5kYXRhID0gZGF0YTtcblxuICAgICAgICAkc2NvcGUubG9jYXRpb25zID0gYW5ndWxhci5jb3B5KGxvY2F0aW9ucy5yZXN1bHRzKTtcblxuICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAobG9jYXRpb25faWQpIHtcbiAgICAgICAgICAgIF8uZWFjaChkYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIFN0b2NrU2VydmljZS5yZWxvY2F0ZShpdGVtLmNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX2lkLCBsb2NhdGlvbl9pZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignU3RvY2tSZXBvcnRDdHJsJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRsb2cnLCAnJHN0YXRlUGFyYW1zJywgJyRpbnRlcmNvbScsICdTdG9ja1NlcnZpY2UnLCAnY3VycmVudFVzZXInLCAnZ3Jvd2wnLCAnJHVpbW9kYWwnLCAnJHRyYW5zbGF0ZScsICdsb2NhdGlvbnMnLCAnY29udHJvbGxlZFN1YnN0YW5jZXMnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRzdGF0ZSwgJHJvb3RTY29wZSwgJHRpbWVvdXQsICRsb2csICRzdGF0ZVBhcmFtcywgJGludGVyY29tLCBTdG9ja1NlcnZpY2UsIGN1cnJlbnRVc2VyLCBncm93bCwgJG1vZGFsLCAkdHJhbnNsYXRlLCBsb2NhdGlvbnMsIGNvbnRyb2xsZWRTdWJzdGFuY2VzKSB7XG5cbiAgICAgICAgdmFyIGN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgZGlmZiA9IG5ldyBEYXRlKGN1cnJlbnQuZ2V0VGltZSgpIC0gKDMwICogMjQgKiA2MCAqIDYwICogMTAwMCkpOyAvLyBhIG1vbnRoXG5cbiAgICAgICAgdmFyIHR6ID0ganN0ei5kZXRlcm1pbmUoKTtcblxuICAgICAgICB2YXIgZGF0ZV9mb3JtYXRfbWFwcGluZyA9IHtcbiAgICAgICAgICAgIFwiTU0vREQvWVlZWVwiOiBcIk1NL2RkL3l5eXlcIixcbiAgICAgICAgICAgIFwiREQvTU0vWVlZWVwiOiBcImRkL01NL3l5eXlcIlxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5kYXRldGltZV9mb3JtYXQgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdLmRhdGV0aW1lX2Zvcm1hdC5rZXk7XG4gICAgICAgIHZhciBkYXRlX2Zvcm1hdCA9ICRzY29wZS5kYXRldGltZV9mb3JtYXQuc2xpY2UoMCwxMCk7XG4gICAgICAgICRzY29wZS5kYXRlX2Zvcm1hdCA9IGRhdGVfZm9ybWF0X21hcHBpbmdbZGF0ZV9mb3JtYXRdO1xuXG4gICAgICAgIGZ1bmN0aW9uIHRvVVRDKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9tZW50LnR6KHZhbHVlLCAnWVlZWS1NTS1ERCBISDptbTpzcycsIHR6Lm5hbWUoKSkudXRjKCkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB0b0xvY2FsVGltZSh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vbWVudC51dGModmFsdWUpLnR6KHR6Lm5hbWUoKSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgICRzY29wZS5jc3MgPSBcImhlaWdodDoxNzVweDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O1wiO1xuXG4gICAgICAgIHZhciBzdGF0dXNlcyA9IHtcbiAgICAgICAgICAgICdpbic6ICdpbl9zdG9jaycsXG4gICAgICAgICAgICAnb3V0JzogJ2FsbG9jYXRlZCcsXG4gICAgICAgICAgICAndXNlZCc6ICd1c2VkJ1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vZGVmYXVsdCA9IEluIFN0b2NrIHZpZXdcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRfc3RhdHVzID0gJ2luJztcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRfc3RhdHVzX3RleHQgPSBzdGF0dXNlc1skc2NvcGUuY3VycmVudF9zdGF0dXNdO1xuXG4gICAgICAgICRzY29wZS5idWxrX2FjdGlvbnMgPSBbe1xuICAgICAgICAgICAga2V5OiAnZGlzcG9zZScsXG4gICAgICAgICAgICB2YWx1ZTogJHRyYW5zbGF0ZS5pbnN0YW50KCdkaXNwb3NlJylcbiAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChsb2NhdGlvbnMucmVzdWx0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAkc2NvcGUuYnVsa19hY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleTogJ3JlbG9jYXRlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJHRyYW5zbGF0ZS5pbnN0YW50KCdyZWxvY2F0ZScpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgJHNjb3BlLmxvY2F0aW9ucyA9IGFuZ3VsYXIuY29weShsb2NhdGlvbnMucmVzdWx0cyk7XG4gICAgICAgICRzY29wZS5sb2NhdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICBsb2NhdGlvbl9pZDogJ19fZW1wdHlfXycsXG4gICAgICAgICAgICBsb2NhdGlvbl9uYW1lOiAnQWxsJyxcbiAgICAgICAgICAgIGFyZWE6IHtcbiAgICAgICAgICAgICAgICBhcmVhX2lkOiAnJyxcbiAgICAgICAgICAgICAgICBhcmVhX25hbWU6ICdBbGwnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9jYXRpb25fc3RhdHVzOiB7dmFsdWU6IDAsIGtleTogXCJsaXZlXCJ9LFxuICAgICAgICAgICAgbWFwX2xhdDogMCxcbiAgICAgICAgICAgIG1hcF9sb25nOiAwXG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5sb2NhdGlvbl9pZCA9ICRzY29wZS5sb2NhdGlvbnNbMF0ubG9jYXRpb25faWQ7XG5cbiAgICAgICAgJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlcyA9IGNvbnRyb2xsZWRTdWJzdGFuY2VzLnJlc3VsdHM7XG5cbiAgICAgICAgJHNjb3BlLmNvbnRyb2xsZWRfc3Vic3RhbmNlID0ge307XG5cbiAgICAgICAgJHNjb3BlLmxpc3QgPSB7XG4gICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgICBmaWx0ZXJlZDogW10sXG4gICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcbiAgICAgICAgICAgIGl0ZW1zUGVyUGFnZTogMjAsXG4gICAgICAgICAgICB0b3RhbEl0ZW1zOiAwLFxuICAgICAgICAgICAgdG90YWxQYWdlczogMCxcbiAgICAgICAgICAgIHByZWRpY2F0ZTogJ2NvbnRyb2xsZWRfc3Vic3RhbmNlX19jb250cm9sbGVkX3N1YnN0YW5jZV9uYW1lJyxcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IDAsXG4gICAgICAgICAgICBkYXRlRnJvbTogbW9tZW50KGRpZmYpLmZvcm1hdCgnWVlZWS1NTS1ERCcpLFxuICAgICAgICAgICAgZGF0ZVRvOiBtb21lbnQoY3VycmVudCkuZm9ybWF0KCdZWVlZLU1NLUREJyksXG5cbiAgICAgICAgICAgIHNldFBhZ2U6IGZ1bmN0aW9uIChwYWdlTnVtKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UgPSBwYWdlTnVtO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zID0gJHNjb3BlLmxpc3QuZmlsdGVyZWQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNvcnRfYnk6IGZ1bmN0aW9uIChwcmVkaWNhdGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucmV2ZXJzZSA9ICEkc2NvcGUubGlzdC5yZXZlcnNlO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkbG9nLmxvZygnZmV0Y2hpbmcgaXRlbXMuLi4nKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJMT0FESU5HX1NUT0NLXCIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0X3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QuZGF0ZUZyb20pLmZvcm1hdCgnWVlZWS1NTS1ERCAwMDowMDowMCcpKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSB0b1VUQyhtb21lbnQoJHNjb3BlLmxpc3QuZGF0ZVRvKS5mb3JtYXQoJ1lZWVktTU0tREQgMjM6NTk6NTknKSk7XG5cbiAgICAgICAgICAgICAgICBTdG9ja1NlcnZpY2UuZmV0Y2hBbGwoJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlLCAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSwgJycsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSwgJHNjb3BlLmN1cnJlbnRfc3RhdHVzLCAkc2NvcGUubG9jYXRpb25faWQsICRzY29wZS5jb250cm9sbGVkX3N1YnN0YW5jZS5jb250cm9sbGVkX3N1YnN0YW5jZV9pZCwgc3RhcnRfdGltZSwgZW5kX3RpbWUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pdGVtcyA9IGRhdGEucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnN1bW1hcnkgPSBkYXRhLnN1bW1hcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNlbGVjdGVkID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYXJ0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQaWVDaGFydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcIm5hbWVcIiwgbGFiZWw6IFwiXCIsIHR5cGU6IFwic3RyaW5nXCJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2lkOiBcImNvdW50XCIsIGxhYmVsOiBcIkNvdW50XCIsIHR5cGU6IFwibnVtYmVyXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicm93c1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogJHRyYW5zbGF0ZS5pbnN0YW50KCdpbl9zdG9jaycpfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6IGRhdGEuc3VtbWFyeS5pbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Y6ICR0cmFuc2xhdGUuaW5zdGFudCgnYWxsb2NhdGVkJyl9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7djogZGF0YS5zdW1tYXJ5Lm91dH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuLy8gICAgICAgICAgICAgIFwidGl0bGVcIjogXCJJbmNpZGVudHNcIixcbi8vICAgICAgICAgICAgICBcImZpbGxcIjogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpZUhvbGU6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZ2VuZDoge3Bvc2l0aW9uOiAnbm9uZSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydEFyZWE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzE1MCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5RXhhY3RWYWx1ZXNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cInZBeGlzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgXCJ0aXRsZVwiOiBcIkluY2lkZW50c1wiLCBcImdyaWRsaW5lc1wiOiB7XCJjb3VudFwiOiA2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL30sXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNUYXJnZXQ6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtpc0h0bWw6IHRydWV9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1wiaEF4aXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBcInRpdGxlXCI6ICRzY29wZS5zY2FsZS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sb3JzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjMzViZmJmJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjZmQ0MjNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjZmZiNjQ4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjOTQ5ZmIzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcjNGM1MjYxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcnM6IHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmVycm9yKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QubG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19TVE9DS1wiKTtcblxuICAgICAgICAgICAgICAgIFN0b2NrU2VydmljZS5mZXRjaEFsbCgkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UsICRzY29wZS5saXN0LmN1cnJlbnRQYWdlLCB0ZXh0LCAkc2NvcGUubGlzdC5wcmVkaWNhdGUsICRzY29wZS5saXN0LnJldmVyc2UpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5pdGVtcyA9IGRhdGEucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC50b3RhbEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYXJjaGl2ZTogZnVuY3Rpb24gKGNvbnRyb2xsZWRfc3Vic3RhbmNlX2lkKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZW1vdmluZ1wiKTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9jb250cm9sbGVkX3N1YnN0YW5jZXMvdGVtcGxhdGVzL2NvbmZpcm0uaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIFN0b2NrU2VydmljZS5yZW1vdmUoY29udHJvbGxlZF9zdWJzdGFuY2VfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vY2hlY2tvdXQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy99LFxuXG4gICAgICAgICAgICBjaGVja19pbjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvc3RvY2tzL3RlbXBsYXRlcy9jaGVja2luLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU3RvY2tDaGVja2luQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVkU3Vic3RhbmNlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVkU3Vic3RhbmNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmxpc3QuaXRlbXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gXy5maWx0ZXIoZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaGFzT3duUHJvcGVydHkoJ3NlbGVjdGVkJykgJiYgaXRlbS5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9zdG9ja3MvdGVtcGxhdGVzL2Rpc3Bvc2UuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9ja0Rpc3Bvc2VDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRTdWJzdGFuY2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZWRTdWJzdGFuY2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTtcbiAgICAgICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVsb2NhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGFuZ3VsYXIuY29weSgkc2NvcGUubGlzdC5pdGVtcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBfLmZpbHRlcihkYXRhLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5oYXNPd25Qcm9wZXJ0eSgnc2VsZWN0ZWQnKSAmJiBpdGVtLnNlbGVjdGVkO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvYXBwL3N0b2Nrcy90ZW1wbGF0ZXMvcmVsb2NhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdTdG9ja1JlbG9jYXRlQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVkU3Vic3RhbmNlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVkU3Vic3RhbmNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7XG4gICAgICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc2VsZWN0aW9uX3VwZGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3Quc2VsZWN0ZWQrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3Quc2VsZWN0ZWQtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuZGF0ZUZyb20nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5kYXRlVG8nLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5pdGVtc1BlclBhZ2UnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmxpc3QudG90YWxQYWdlcyA9IE1hdGguY2VpbCgkc2NvcGUubGlzdC5maWx0ZXJlZEl0ZW1zIC8gJHNjb3BlLmxpc3QuaXRlbXNQZXJQYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdsaXN0LmN1cnJlbnRQYWdlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnY3VycmVudF9zdGF0dXMnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAmJiBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRfc3RhdHVzX3RleHQgPSBzdGF0dXNlc1skc2NvcGUuY3VycmVudF9zdGF0dXNdO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdjb250cm9sbGVkX3N1YnN0YW5jZS5jb250cm9sbGVkX3N1YnN0YW5jZV9pZCcsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICYmIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xvY2F0aW9uX2lkJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vJHNjb3BlLiR3YXRjaChcbiAgICAgICAgLy8gICAgJ2J1bGtfYWN0aW9uJyxcbiAgICAgICAgLy8gICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09ICdkaXNwb3NlJykge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5kaXNwb3NlKCk7XG4gICAgICAgIC8vICAgICAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PSAncmVsb2NhdGUnKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJlbG9jYXRlKCk7XG4gICAgICAgIC8vICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAvLyAgICB9XG4gICAgICAgIC8vKTtcblxuICAgICAgICAkc2NvcGUuYnVsa19zZWxlY3Rpb25fdXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT0gJ2Rpc3Bvc2UnKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgPT0gJ3JlbG9jYXRlJykge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnJlbG9jYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cblxuICAgICAgICB2YXIgZmlsdGVyVGV4dFRpbWVvdXQ7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdzZWFyY2gnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVGV4dFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChmaWx0ZXJUZXh0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ2YWx1ZSBjaGFuZ2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3Quc2VhcmNoKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7IC8vIGRlbGF5IDI1MCBtc1xuXG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ1N0b2NrU2VydmljZScsIFsnJGh0dHAnLCAnJHEnLCAnJHdpbmRvdycsICckaW50ZXJjb20nLCAnJGxvZycsICdMUycsICdDT05GSUcnLCAnQXBpU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICR3aW5kb3csICRpbnRlcmNvbSwgJGxvZywgTFMsIENPTkZJRywgQXBpU2VydmljZSkge1xuXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xuICAgICAgICAgICAgZmV0Y2hBbGw6IGZ1bmN0aW9uIChjaHVuaywgcGFnZSwgdGV4dCwgcHJlZGljYXRlLCBkaXJlY3Rpb24sIGN1cnJlbnRfc3RhdHVzLCBsb2NhdGlvbl9pZCwgY29udHJvbGxlZF9zdWJzdGFuY2VfaWQsIGRhdGVGcm9tLCBkYXRlVG8gKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlIHx8ICdjb250cm9sbGVkX3N1YnN0YW5jZV9fY29udHJvbGxlZF9zdWJzdGFuY2VfbmFtZSc7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgaWYobG9jYXRpb25faWQ9PSdfX2VtcHR5X18nKXtcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25faWQ9Jyc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2NvbnRyb2xsZWRfc3Vic3RhbmNlcy9yZXBvcnQvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9mcm9tOiBkYXRlRnJvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlX3RvOiBkYXRlVG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfc3RhdHVzOmN1cnJlbnRfc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5OnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbj8nZGVzYyc6J2FzYycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb25faWQ6bG9jYXRpb25faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlZF9zdWJzdGFuY2VfaWQ6Y29udHJvbGxlZF9zdWJzdGFuY2VfaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAocXVhbnRpdHksIGNvbnRyb2xsZWRfc3Vic3RhbmNlX2lkLCB2b2x1bWUsbG9jYXRpb25faWQsIGR0X2V4cGlyeSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAncXVhbnRpdHknOiBxdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRyb2xsZWRfc3Vic3RhbmNlX2lkJzogY29udHJvbGxlZF9zdWJzdGFuY2VfaWQsXG4gICAgICAgICAgICAgICAgICAgICd2b2x1bWUnOiB2b2x1bWUsXG4gICAgICAgICAgICAgICAgICAgICdsb2NhdGlvbl9pZCc6IGxvY2F0aW9uX2lkLFxuICAgICAgICAgICAgICAgICAgICAnZHRfZXhwaXJ5JzogZHRfZXhwaXJ5XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvY29udHJvbGxlZF9zdWJzdGFuY2VzL2FkZC8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgY2hlY2tvdXQ6IGZ1bmN0aW9uIChjb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19pZCwgdXNlcl9pZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAnY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tfaWQnOiBjb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19pZCxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXJfaWQnOiB1c2VyX2lkXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvY29udHJvbGxlZF9zdWJzdGFuY2VzL2NoZWNrb3V0LycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjaGVja2luOiBmdW5jdGlvbiAoY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tfYXNzaWdubWVudF9pZCwgbG9jYXRpb25faWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX2Fzc2lnbm1lbnRfaWQnOiBjb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19hc3NpZ25tZW50X2lkLFxuICAgICAgICAgICAgICAgICAgICAnbG9jYXRpb25faWQnOmxvY2F0aW9uX2lkXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvY29udHJvbGxlZF9zdWJzdGFuY2VzL2NoZWNraW4vJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlbG9jYXRlOiBmdW5jdGlvbiAoY29udHJvbGxlZF9zdWJzdGFuY2Vfc3RvY2tfaWQsIGxvY2F0aW9uX2lkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdjb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19pZCc6IGNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX2lkLFxuICAgICAgICAgICAgICAgICAgICAnbG9jYXRpb25faWQnOiBsb2NhdGlvbl9pZFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2NvbnRyb2xsZWRfc3Vic3RhbmNlcy9yZWxvY2F0ZS8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKGNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX2lkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdjb250cm9sbGVkX3N1YnN0YW5jZV9zdG9ja19pZCc6IGNvbnRyb2xsZWRfc3Vic3RhbmNlX3N0b2NrX2lkLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2NvbnRyb2xsZWRfc3Vic3RhbmNlcy9kaXNwb3NlLycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG5cbiAgICAgICAgICAgIGZldGNoOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXNzZXRzLycgKyBpZCArICcvJylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoaWQsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSwgZW1haWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXNzZXRzLycgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICB9XSk7XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdVc2VyQWRkQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIFVzZXJTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wpIHtcblxuICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdXNlcl9pZDogY3VycmVudFVzZXIudXNlcl9pZCxcbiAgICAgICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgZGFzaGJvYXJkX2ZlYXR1cmVfbGFzdF91c2VkOiBcIlVzZXJzXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFjdXJyZW50VXNlci5pc01hbmFnZXIpIHtcbiAgICAgICAgICAgICRzdGF0ZS5nbyhcIm1hcFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzY29wZS5yb2xlcyA9IFtcbiAgICAgICAgICAgIHtrZXk6IDEsIG5hbWU6ICdQYXRyb2xsZXInfSxcbiAgICAgICAgICAgIHtrZXk6IDIsIG5hbWU6ICdEaXNwYXRjaGVyJ30sXG4gICAgICAgICAgICB7a2V5OiAzLCBuYW1lOiAnTWFuYWdlcid9XG4gICAgICAgIF07XG5cbiAgICAgICAgJHNjb3BlLmFkZFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBncm93bC5pbmZvKFwiQUREX1VTRVJcIik7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5hZGRVc2VyKCRzY29wZS5uYW1lLCAkc2NvcGUuZW1haWwsICRzY29wZS5waG9uZSwgJHNjb3BlLnJvbGUpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbi8vICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcInVzZXJfY3JlYXRlZF9zdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbyhcInVzZXJzXCIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICAvL0dsb2JhbCBlcnJvcnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmhhc093blByb3BlcnR5KCdkZXRhaWwnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3IuZGV0YWlsO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZXJyb3IsIGZ1bmN0aW9uIChlcnJvcnMsIGZpZWxkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PSAnbm9uX2ZpZWxkX2Vycm9ycycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRzZXRWYWxpZGl0eSgnYmFja2VuZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JzW2ZpZWxkXSA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTsiLCIndXNlIHN0cmljdCc7XG5cblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1VzZXJFZGl0Q3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJGxvZywgJHN0YXRlUGFyYW1zLCAkaW50ZXJjb20sIFVzZXJTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wpIHtcblxuICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdXNlcl9pZDogY3VycmVudFVzZXIudXNlcl9pZCxcbiAgICAgICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgZGFzaGJvYXJkX2ZlYXR1cmVfbGFzdF91c2VkOiBcIlVzZXJzXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLnNob3dSb2xlID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5zaG93UGVybWlzc2lvbnMgPSBjdXJyZW50VXNlci5yZXNvcnRzWzBdLnJlc29ydF9jb250cm9sbGVkX3N1YnN0YW5jZXMgfHwgY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfYXNzZXRfbWFuYWdlbWVudDtcbiAgICAgICAgJHNjb3BlLnNob3dEZWxldGVVc2VyID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5zaG93QWN0aXZhdGVVc2VyID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5zaG93RGVhY3RpdmF0ZVVzZXIgPSBmYWxzZTtcblxuICAgICAgICB2YXIgaWQgPSAkc3RhdGVQYXJhbXMudXNlcklkO1xuXG5cbiAgICAgICAgJHNjb3BlLnJvbGVzID0gW1xuICAgICAgICAgICAge2tleTogMSwgbmFtZTogJ1BhdHJvbGxlcid9LFxuICAgICAgICAgICAge2tleTogMiwgbmFtZTogJ0Rpc3BhdGNoZXInfSxcbiAgICAgICAgICAgIHtrZXk6IDMsIG5hbWU6ICdNYW5hZ2VyJ31cbiAgICAgICAgXTtcblxuICAgICAgICAkc2NvcGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfVVNFUlwiKTtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5mZXRjaChpZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyLnJvbGUgPSBkYXRhLnJvbGVfaWRbMF0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VXNlci51c2VyX2lkICE9IGRhdGEudXNlcl9pZCAmJiBjdXJyZW50VXNlci5yb2xlID09ICdNYW5hZ2VyJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dSb2xlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0RlbGV0ZVVzZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWN0aXZhdGVVc2VyID0gZGF0YVsndXNlcl9zdGF0dXMnXSA9PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RGVhY3RpdmF0ZVVzZXIgPSBkYXRhWyd1c2VyX3N0YXR1cyddID09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiTE9BRElOR19ERVZJQ0VTXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgVXNlclNlcnZpY2UuZmV0Y2hEZXZpY2VzKGlkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIuZGV2aWNlcyA9IGRhdGEuZGV2aWNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUub25fZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5pbmZvKGVycm9yLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zYXZlVXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJTQVZFX1VTRVJcIik7XG4gICAgICAgICAgICAgICAgVXNlclNlcnZpY2Uuc2F2ZVVzZXIoaWQsICRzY29wZS51c2VyLm5hbWUsICRzY29wZS51c2VyLmVtYWlsLCAkc2NvcGUudXNlci5yb2xlLCAkc2NvcGUudXNlci5waG9uZSwgJHNjb3BlLnVzZXIudXNlcl9hc3NldF9tYW5hZ2VtZW50LCAkc2NvcGUudXNlci51c2VyX2NvbnRyb2xsZWRfc3Vic3RhbmNlcykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAkbG9nLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLnN1Y2Nlc3MoXCJ1c2VyX3VwZGF0ZWRfc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihlcnJvcil7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9HbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5oYXNPd25Qcm9wZXJ0eSgnZGV0YWlsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yLmRldGFpbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JtLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZXJyb3IsIGZ1bmN0aW9uIChlcnJvcnMsIGZpZWxkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZCA9PSAnbm9uX2ZpZWxkX2Vycm9ycycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHbG9iYWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZXJyb3JzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRmllbGQgbGV2ZWwgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1bZmllbGRdLiRzZXRWYWxpZGl0eSgnYmFja2VuZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybVtmaWVsZF0uJGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3JzW2ZpZWxkXSA9IGVycm9ycy5qb2luKCcsICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVzZXRQYXNzd29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBncm93bC5pbmZvKFwiUkVTRVRfUEFTU1dPUkRcIik7XG4gICAgICAgICAgICAgICAgVXNlclNlcnZpY2UuZm9yZ290UGFzc3dvcmQoJHNjb3BlLnVzZXIuZW1haWwpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5zdWNjZXNzKGRhdGEuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm93bC5lcnJvcihlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVtb3ZlVXNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJSRU1PVkVfVVNFUlwiKTtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5yZW1vdmVVc2VyKGlkLCAkc2NvcGUudXNlci5maXJzdG5hbWUsICRzY29wZS51c2VyLmxhc3RuYW1lLCAkc2NvcGUudXNlci5lbWFpbCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcIlJFTU9WRV9VU0VSXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKFwidXNlcnNcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZVVzZXJTdGF0dXMgPSBmdW5jdGlvbih0eXBlKXtcbiAgICAgICAgICAgIFVzZXJTZXJ2aWNlLnVwZGF0ZVVzZXJTdGF0dXMoJHNjb3BlLnVzZXIudXNlcl9pZCwgJHNjb3BlLnVzZXIucmVzb3J0c1swXVsncmVzb3J0X2lkJ10sIHR5cGUpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBY3RpdmF0ZVVzZXIgPSB0eXBlID09ICdhcmNoaXZlZCcgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RGVhY3RpdmF0ZVVzZXIgPSB0eXBlID09ICdhcmNoaXZlZCcgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudGVzdE5vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbiAoZGV2aWNlSWQpIHtcbiAgICAgICAgICAgIGlmIChkZXZpY2VJZCkge1xuICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oXCJURVNUX05PVElGSUNBVElPTlNcIik7XG4gICAgICAgICAgICAgICAgVXNlclNlcnZpY2UudGVzdERldmljZShkZXZpY2VJZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVtb3ZlRGV2aWNlID0gZnVuY3Rpb24gKGRldmljZUlkKSB7XG4vLyAgICAgICAgICAgICRsb2cubG9nKGRldmljZUlkKTtcblxuICAgICAgICAgICAgaWYgKGRldmljZUlkKSB7XG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIlJFTU9WRV9ERVZJQ0VcIik7XG4gICAgICAgICAgICAgICAgVXNlclNlcnZpY2UucmVtb3ZlRGV2aWNlKGRldmljZUlkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3Jvd2wuc3VjY2VzcyhcIkRFVklDRV9SRU1PVkVEXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3dsLmluZm8oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cblxuICAgIH0pOyIsIid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignVXNlckxpc3RDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkc3RhdGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkbG9nLCAkaW50ZXJjb20sIFVzZXJTZXJ2aWNlLCBjdXJyZW50VXNlciwgZ3Jvd2wpIHtcblxuICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgIGVtYWlsOiBjdXJyZW50VXNlci5lbWFpbCxcbiAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRVc2VyLm5hbWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdXNlcl9pZDogY3VycmVudFVzZXIudXNlcl9pZCxcbiAgICAgICAgICAgIGNvbXBhbnk6IHtcbiAgICAgICAgICAgICAgICBpZDogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY3VycmVudFVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJvbGU6IGN1cnJlbnRVc2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgZGFzaGJvYXJkX2ZlYXR1cmVfbGFzdF91c2VkOiBcIlVzZXJzXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFVc2VyU2VydmljZS5jdXJyZW50VXNlcigpLmlzTWFuYWdlcikge1xuICAgICAgICAgICAgJHN0YXRlLmdvKFwibWFwXCIpO1xuICAgICAgICB9XG5cblxuICAgICAgICAkc2NvcGUubGlzdCA9IHtcbiAgICAgICAgICAgIHVzZXJzOiBbXSxcbiAgICAgICAgICAgIGZpbHRlcmVkOiBbXSxcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgICAgICAgICAgaXRlbXNQZXJQYWdlOiAyMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDAsXG4gICAgICAgICAgICB0b3RhbFBhZ2VzOiAwLFxuICAgICAgICAgICAgcHJlZGljYXRlOiAndXNlcl9fbmFtZScsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcblxuICAgICAgICAgICAgc2V0UGFnZTogZnVuY3Rpb24gKHBhZ2VOdW0pIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5jdXJyZW50UGFnZSA9IHBhZ2VOdW07XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmaWx0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgPSAkc2NvcGUubGlzdC5maWx0ZXJlZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc29ydF9ieTogZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5yZXZlcnNlID0gISRzY29wZS5saXN0LnJldmVyc2U7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRsb2cubG9nKCdmZXRjaGluZyB1c2Vycy4uLicpO1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfVVNFUlwiKTtcbiAgICAgICAgICAgICAgICBVc2VyU2VydmljZS5mZXRjaEFsbCgkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UsICRzY29wZS5saXN0LmN1cnJlbnRQYWdlLCAnJywgJHNjb3BlLmxpc3QucHJlZGljYXRlLCAkc2NvcGUubGlzdC5yZXZlcnNlIClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudXNlcnMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUub25fZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2VhcmNoOiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgZ3Jvd2wuaW5mbyhcIkxPQURJTkdfVVNFUlwiKTtcblxuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmZldGNoQWxsKCRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSwgJHNjb3BlLmxpc3QuY3VycmVudFBhZ2UsIHRleHQsICRzY29wZS5saXN0LnByZWRpY2F0ZSwgJHNjb3BlLmxpc3QucmV2ZXJzZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QudXNlcnMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QudG90YWxJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUub25fZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5hZGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oXCJ1c2VyX2FkZFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgJ2xpc3QuaXRlbXNQZXJQYWdlJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5saXN0LnRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoJHNjb3BlLmxpc3QuZmlsdGVyZWRJdGVtcyAvICRzY29wZS5saXN0Lml0ZW1zUGVyUGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goXG4gICAgICAgICAgICAnbGlzdC5jdXJyZW50UGFnZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubGlzdC50b3RhbFBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5saXN0LmZpbHRlcmVkSXRlbXMgLyAkc2NvcGUubGlzdC5pdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgZmlsdGVyVGV4dFRpbWVvdXQ7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICdzZWFyY2gnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVGV4dFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChmaWx0ZXJUZXh0VGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0VGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidmFsdWUgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnNlYXJjaChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMDApOyAvLyBkZWxheSAyNTAgbXNcblxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgfSk7XG5cblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpXG4gICAgLnNlcnZpY2UoJ1VzZXJTZXJ2aWNlJywgWyckaHR0cCcsICckcScsICckd2luZG93JywgJyRpbnRlcmNvbScsICckbG9nJywgJ0xTJywgJ0NPTkZJRycsICdBcGlTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgJHdpbmRvdywgJGludGVyY29tLCAkbG9nLCBMUywgQ09ORklHLCBBcGlTZXJ2aWNlKSB7XG5cbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XG5cbiAgICAgICAgICAgIHVzZXI6IG51bGwsXG4gICAgICAgICAgICBpc19hdXRoZW50aWNhdGVkOiBmYWxzZSxcblxuICAgICAgICAgICAgZGlzY292ZXI6IGZ1bmN0aW9uIChlbWFpbCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICdlbWFpbCc6IGVtYWlsIHx8ICcnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvYXV0aC9kaXNjb3Zlci8nLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXBwaW5nID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcHAubWVkaWM1Mi5sb2NhbCc6IENPTkZJRy5CQVNFX1VSTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwLWRldi5tZWRpYzUyLmNvbSc6IGRhdGEubG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FwcC1kZXYtdXMubWVkaWM1Mi5jb20nOiBkYXRhLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcHAtZGV2LWF1Lm1lZGljNTIuY29tJzogZGF0YS5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwLXN0YWdpbmcubWVkaWM1Mi5jb20nOiBkYXRhLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcHAubWVkaWM1Mi5jb20nOiBkYXRhLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsb2NhbGhvc3Q6ODA5NSc6ICdodHRwOi8vbG9jYWxob3N0OjgwOTAnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhcmF2ZWxNYXBwaW5nID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhcHAubWVkaWM1Mi5sb2NhbCc6IENPTkZJRy5MQVJBVkVMX1VSTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwLWRldi5tZWRpYzUyLmNvbSc6IGRhdGEubGFyYXZlbF9sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwLWRldi11cy5tZWRpYzUyLmNvbSc6IGRhdGEubGFyYXZlbF9sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwLWRldi1hdS5tZWRpYzUyLmNvbSc6IGRhdGEubGFyYXZlbF9sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXBwLXN0YWdpbmcubWVkaWM1Mi5jb20nOiBkYXRhLmxhcmF2ZWxfbG9jYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FwcC5tZWRpYzUyLmNvbSc6IGRhdGEubGFyYXZlbF9sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9jYWxob3N0OjgwOTUnOiAnaHR0cDovL2xvY2FsaG9zdDo4MTAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgnQVBJJywgbWFwcGluZ1tob3N0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMUy5zZXQoJ0xBUkFWRUxfQ09SUycsIGxhcmF2ZWxNYXBwaW5nW2hvc3RdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGFyYXZlbE1hcHBpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaG9zdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsYXJhdmVsTWFwcGluZ1tob3N0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGxvZy5sb2coZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgnQVBJJywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbG9naW46IGZ1bmN0aW9uIChlbWFpbCwgcGFzc3dvcmQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzogcGFzc3dvcmQgfHwgJydcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hdXRoL2xvZ2luLycsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb2xlc0FyciA9IFsnJywgJ1BhdHJvbGxlcicsICdEaXNwYXRjaGVyJywgJ01hbmFnZXInXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS51c2VyLnJvbGUgPSByb2xlc0FycltkYXRhLnVzZXIucm9sZV9pZFswXS52YWx1ZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudXNlci5yb2xlX2lkLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LnZhbHVlID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS51c2VyLmlzTWFuYWdlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLnVzZXIgPSBkYXRhLnVzZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLnVzZXIucm9sZSA9IGRhdGEudXNlci5yb2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5pc19hdXRoZW50aWNhdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgTFMuc2V0KCd1c2VyJywgSlNPTi5zdHJpbmdpZnkoc2VydmljZS51c2VyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBMUy5zZXQoJ3Rva2VuJywgJ1Rva2VuICcgKyBkYXRhLnVzZXIudG9rZW4pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW50ZXJjb20udXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogc2VydmljZS51c2VyLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNlcnZpY2UudXNlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogc2VydmljZS51c2VyLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogc2VydmljZS51c2VyLnJlc29ydHNbMF0ucmVzb3J0X2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzZXJ2aWNlLnVzZXIucmVzb3J0c1swXS5yZXNvcnRfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogc2VydmljZS51c2VyLnJvbGVfaWRbMF0ua2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hib2FyZF9mZWF0dXJlX2xhc3RfdXNlZDogXCJMb2dpblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfY29ubmVjdGVkOiBzZXJ2aWNlLnVzZXIudXNlcl9jb25uZWN0ZWQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2cubG9nKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLnVzZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5pc19hdXRoZW50aWNhdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgndXNlcicsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuXG4gICAgICAgICAgICBsb2dvdXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VydmljZS51c2VyICYmIHNlcnZpY2UudXNlci5oYXNPd25Qcm9wZXJ0eSgndXNlcl9pZCcpICYmIHNlcnZpY2UudXNlci51c2VyX2lkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hdXRoL2xvZ291dC8nICsgc2VydmljZS51c2VyLnVzZXJfaWQgKyAnLycsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSwgc3RhdHVzLCBoZWFkZXJzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLnVzZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuaXNfYXV0aGVudGljYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgndXNlcicsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExTLnNldCgndG9rZW4nLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMUy5zZXQoJ0FQSScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMUy5zZXQoJ2VuX1VTJywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGN1cnJlbnRVc2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UudXNlcjtcbi8vICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbi8vICAgICAgICAgICAgICAgICRodHRwLmdldChDT05GSUcuQVBJX0JBU0VfVVJMICsgJy9hdXRoL2N1cnJlbnRfdXNlcicpXG4vLyAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuLy8gICAgICAgICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGRhdGEpO1xuLy8gICAgICAgICAgICAgICAgICAgIH0pO1xuLy9cbi8vICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBjdXJyZW50Um9sZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLnVzZXIucm9sZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNhdmVVc2VyOiBmdW5jdGlvbiAoaWQsIG5hbWUsIGVtYWlsLCByb2xlLCBwaG9uZSwgYXNzZXRfbWdtdCwgY29udHJvbGxlZF9zdWJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGVfaWQnOiByb2xlLFxuICAgICAgICAgICAgICAgICAgICAncGhvbmUnOiBwaG9uZSxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXJfYXNzZXRfbWFuYWdlbWVudCc6YXNzZXRfbWdtdCxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXJfY29udHJvbGxlZF9zdWJzdGFuY2VzJzpjb250cm9sbGVkX3N1YnNcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL3VzZXJzLycgKyBpZCArICcvJywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGFkZFVzZXI6IGZ1bmN0aW9uIChuYW1lLCBlbWFpbCwgcGhvbmUsIHJvbGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc29ydF9pZCA9IEpTT04ucGFyc2UoTFMuZ2V0KCd1c2VyJykpLnJlc29ydHNbMF0ucmVzb3J0X2lkO1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICduYW1lJzogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzogZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICdwaG9uZSc6IHBob25lLFxuICAgICAgICAgICAgICAgICAgICAncm9sZV9pZCc6IHBhcnNlSW50KHJvbGUpLFxuICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOiBcIlQzbVA0JCQwMTQzXCIsXG4gICAgICAgICAgICAgICAgICAgICdyZXNvcnRfaWQnOiByZXNvcnRfaWRcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy91c2Vycy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZldGNoQWxsOiBmdW5jdGlvbiAoY2h1bmssIHBhZ2UsIHRleHQsIHByZWRpY2F0ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlIHx8ICduYW1lJztcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvdXNlcnMvJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKHBhZ2UgLSAxKSAqIGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaDp0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2J5OnByZWRpY2F0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9ieV9kaXJlY3Rpb246IGRpcmVjdGlvbj8nZGVzYyc6J2FzYydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy91c2Vycy8nICsgaWQgKyAnLycpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGZldGNoRGV2aWNlczogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL3VzZXJzLycgKyBpZCArICcvZGV2aWNlcy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcsIGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBmb3Jnb3RQYXNzd29yZDogZnVuY3Rpb24gKGVtYWlsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzogZW1haWxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy9hdXRoL3Bhc3N3b3JkX3Jlc2V0LycsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVzZXRQYXNzd29yZDogZnVuY3Rpb24gKGlkLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIGVtYWlsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0X25hbWUnOiBmaXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbGFzdF9uYW1lJzogbGFzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL3VzZXJzLycgKyBpZCArICcvcmVzZXRwYXNzd29yZCcsIHBhcmFtcylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcmVtb3ZlVXNlcjogZnVuY3Rpb24gKGlkLCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIGVtYWlsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0X25hbWUnOiBmaXJzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAnbGFzdF9uYW1lJzogbGFzdF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBlbWFpbFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvdXNlcnMvJyArIGlkICsgJy8nLCBwYXJhbXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdXBkYXRlVXNlclN0YXR1czogZnVuY3Rpb24gKHVzZXJfaWQsIHJlc29ydF9pZCwgdHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwLmdldChBcGlTZXJ2aWNlLmJhc2UoKSArIENPTkZJRy5BUElfVVJMICsgJy91c2Vycy8nICsgdXNlcl9pZCArICcvc3RhdHVzLycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29ydF9pZDogcmVzb3J0X2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRldGFpbCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0ZXN0RGV2aWNlOiBmdW5jdGlvbiAoZGV2aWNlSWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoQXBpU2VydmljZS5iYXNlKCkgKyBDT05GSUcuQVBJX1VSTCArICcvZGV2aWNlcy8nICsgZGV2aWNlSWQgKyAnL3Rlc3Rfbm90aWZpY2F0aW9ucy8nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHJlbW92ZURldmljZTogZnVuY3Rpb24gKGRldmljZUlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucHV0KEFwaVNlcnZpY2UuYmFzZSgpICsgQ09ORklHLkFQSV9VUkwgKyAnL2RldmljZXMvJyArIGRldmljZUlkICsgJy8nLCB7J2RldmljZV9zdGF0ZSc6IDJ9KVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAgICAgaWYgKExTLmdldCgndXNlcicpID09IG51bGwgfHwgTFMuZ2V0KCd1c2VyJykgPT0gXCJudWxsXCIgfHwgTFMuZ2V0KCd1c2VyJykgPT0gXCJcIiB8fCBMUy5nZXQoJ3VzZXInKSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBMUy5zZXQoJ3VzZXInLCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VydmljZS51c2VyID0gSlNPTi5wYXJzZShMUy5nZXQoJ3VzZXInKSk7XG4gICAgICAgICAgICAgICAgc2VydmljZS5pc19hdXRoZW50aWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluaXQoKTtcblxuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICB9XSk7XG5cblxuIl19
